# AitherZero Docker Environment Configuration
# Copy this file to .env and customize for your environment
# Docker Compose automatically loads .env files

# =============================================================================
# AitherZero Core Configuration
# =============================================================================

# Run mode: Set to true for non-interactive automation
AITHERZERO_NONINTERACTIVE=false

# CI/CD mode: Enable for continuous integration environments
AITHERZERO_CI=false

# Profile: Minimal, Standard, Developer, or Full
# - Minimal: Bare essentials only
# - Standard: Common tools and features (default)
# - Developer: Full development tools
# - Full: Everything including optional features
AITHERZERO_PROFILE=Standard

# =============================================================================
# Deployment Context
# =============================================================================

# Environment identifier: development, staging, production
DEPLOYMENT_ENVIRONMENT=development

# Git branch name (automatically set in CI/CD)
BRANCH_NAME=main

# Pull Request number (for PR deployments)
PR_NUMBER=

# Commit SHA (automatically set in CI/CD)
COMMIT_SHA=

# =============================================================================
# Optional Services Configuration
# =============================================================================

# PostgreSQL Database Password (used with --profile with-database)
# SECURITY: Change this to a strong password for production
POSTGRES_PASSWORD=changeme

# Redis Configuration (used with --profile with-cache)
# Uncomment if you need custom Redis settings
# REDIS_PASSWORD=
# REDIS_MAX_MEMORY=256mb

# =============================================================================
# Logging and Output Configuration
# =============================================================================

# Log level: Debug, Information, Warning, Error
# Note: Container default is Warning to reduce verbosity
# AITHERZERO_LOG_LEVEL=Warning

# Disable transcript logging (saves disk space in CI)
# AITHERZERO_DISABLE_TRANSCRIPT=1

# =============================================================================
# Resource Limits (Optional Overrides)
# =============================================================================

# These are set in docker-compose.yml but can be overridden here
# COMPOSE_CPU_LIMIT=2
# COMPOSE_MEMORY_LIMIT=2G
# COMPOSE_CPU_RESERVATION=0.5
# COMPOSE_MEMORY_RESERVATION=512M

# =============================================================================
# Network Configuration (Advanced)
# =============================================================================

# Custom subnet for Docker network
# DOCKER_SUBNET=172.28.0.0/16

# Exposed ports (uncomment to change defaults)
# HTTP_PORT=8080
# HTTPS_PORT=8443

# =============================================================================
# Development Options
# =============================================================================

# Enable hot-reload by mounting local source code
# WARNING: Only use for local development, never in PR/production
# MOUNT_SOURCE_CODE=false

# Git credentials path (for local development only)
# WARNING: Never mount credentials in CI/CD or PR environments
# GIT_CONFIG_PATH=~/.gitconfig
# SSH_KEY_PATH=~/.ssh

# =============================================================================
# Testing Configuration
# =============================================================================

# Test profile: Quick, Standard, Full, CI
# TEST_PROFILE=Standard

# Enable code coverage
# ENABLE_COVERAGE=false

# Test result format: NUnitXml, JUnitXml
# TEST_OUTPUT_FORMAT=NUnitXml

# =============================================================================
# Notes
# =============================================================================

# 1. After editing, restart containers: docker-compose up -d
# 2. View current environment: docker exec aitherzero-app env | grep AITHERZERO
# 3. Never commit this file with real secrets - use .gitignore
# 4. For production, use Docker secrets or a secrets management service
# 5. Boolean values: true/false (lowercase)
# 6. Empty values are treated as unset
