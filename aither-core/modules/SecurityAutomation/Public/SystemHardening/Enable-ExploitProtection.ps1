function Enable-ExploitProtection {
    <#
    .SYNOPSIS
        Enables Windows Exploit Protection (EMET successor) and DEP across the system.
        
    .DESCRIPTION
        Configures Windows Defender Exploit Guard and Data Execution Prevention (DEP)
        to protect against memory corruption vulnerabilities, ROP/JOP attacks, and
        other exploitation techniques. Supports both system-wide and application-specific
        configurations.
        
    .PARAMETER ProtectionLevel
        Level of exploit protection to apply
        
    .PARAMETER ComputerName
        Target computer names. Default: localhost
        
    .PARAMETER Credential
        Credentials for remote computer access
        
    .PARAMETER ApplicationPaths
        Specific applications to protect with custom settings
        
    .PARAMETER EnableDEP
        Enable Data Execution Prevention system-wide
        
    .PARAMETER EnableASLR
        Enable Address Space Layout Randomization
        
    .PARAMETER EnableCFG
        Enable Control Flow Guard
        
    .PARAMETER EnableROP
        Enable Return Oriented Programming protection
        
    .PARAMETER CustomSettings
        Custom exploit protection settings hashtable
        
    .PARAMETER TestMode
        Show what would be configured without making changes
        
    .PARAMETER ReportPath
        Path to save protection status report
        
    .PARAMETER BackupSettings
        Create backup of current settings before changes
        
    .EXAMPLE
        Enable-ExploitProtection -ProtectionLevel 'High' -EnableDEP -ReportPath 'C:\Reports\exploit-protection.html'
        
    .EXAMPLE
        Enable-ExploitProtection -ApplicationPaths @('C:\Program Files\MyApp\app.exe') -EnableCFG -EnableROP
        
    .EXAMPLE
        Enable-ExploitProtection -ComputerName @('Server1', 'Server2') -ProtectionLevel 'Enterprise' -Credential $Creds
    #>
    
    [CmdletBinding(SupportsShouldProcess)]
    param(
        [Parameter()]
        [ValidateSet('Basic', 'Standard', 'High', 'Enterprise', 'Custom')]
        [string]$ProtectionLevel = 'Standard',
        
        [Parameter()]
        [string[]]$ComputerName = @('localhost'),
        
        [Parameter()]
        [pscredential]$Credential,
        
        [Parameter()]
        [string[]]$ApplicationPaths = @(),
        
        [Parameter()]
        [switch]$EnableDEP,
        
        [Parameter()]
        [switch]$EnableASLR,
        
        [Parameter()]
        [switch]$EnableCFG,
        
        [Parameter()]
        [switch]$EnableROP,
        
        [Parameter()]
        [hashtable]$CustomSettings = @{},
        
        [Parameter()]
        [switch]$TestMode,
        
        [Parameter()]
        [string]$ReportPath,
        
        [Parameter()]
        [switch]$BackupSettings
    )
    
    begin {
        Write-CustomLog -Level 'INFO' -Message "Configuring exploit protection: $ProtectionLevel level"
        
        # Check if running as Administrator
        $CurrentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
        $Principal = New-Object Security.Principal.WindowsPrincipal($CurrentUser)
        if (-not $Principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
            throw "This function requires Administrator privileges"
        }
        
        # Define protection profiles
        $ProtectionProfiles = @{
            'Basic' = @{
                DEP = @{
                    Enable = $true
                    Policy = 'OptOut'  # DEP enabled for all but excluded programs
                }
                ASLR = @{
                    Enable = $true
                    ForceRelocateImages = $false
                    RequireInfo = $false
                }
                CFG = @{
                    Enable = $true
                    SuppressExports = $false
                    StrictMode = $false
                }
                ROP = @{
                    Enable = $false
                }
                SEHOP = @{
                    Enable = $true
                }
            }
            'Standard' = @{
                DEP = @{
                    Enable = $true
                    Policy = 'OptOut'
                }
                ASLR = @{
                    Enable = $true
                    ForceRelocateImages = $true
                    RequireInfo = $false
                }
                CFG = @{
                    Enable = $true
                    SuppressExports = $false
                    StrictMode = $false
                }
                ROP = @{
                    Enable = $true
                    CallerCheck = $true
                    SimExec = $true
                    StackPivot = $true
                }
                SEHOP = @{
                    Enable = $true
                }
                HeapSpray = @{
                    Enable = $true
                }
            }
            'High' = @{
                DEP = @{
                    Enable = $true
                    Policy = 'AlwaysOn'  # DEP enabled for all programs
                }
                ASLR = @{
                    Enable = $true
                    ForceRelocateImages = $true
                    RequireInfo = $true
                }
                CFG = @{
                    Enable = $true
                    SuppressExports = $true
                    StrictMode = $true
                }
                ROP = @{
                    Enable = $true
                    CallerCheck = $true
                    SimExec = $true
                    StackPivot = $true
                }
                SEHOP = @{
                    Enable = $true
                }
                HeapSpray = @{
                    Enable = $true
                }
                NullPage = @{
                    Enable = $true
                }
            }
            'Enterprise' = @{
                DEP = @{
                    Enable = $true
                    Policy = 'AlwaysOn'
                }
                ASLR = @{
                    Enable = $true
                    ForceRelocateImages = $true
                    RequireInfo = $true
                }
                CFG = @{
                    Enable = $true
                    SuppressExports = $true
                    StrictMode = $true
                }
                ROP = @{
                    Enable = $true
                    CallerCheck = $true
                    SimExec = $true
                    StackPivot = $true
                }
                SEHOP = @{
                    Enable = $true
                }
                HeapSpray = @{
                    Enable = $true
                }
                NullPage = @{
                    Enable = $true
                }
                ChildProcessMitigation = @{
                    Enable = $true
                    AllowChildProcessCreation = $false
                }
                ImageLoad = @{
                    Enable = $true
                    BlockRemoteImageLoads = $true
                    BlockLowLabelImageLoads = $true
                }
            }
        }
        
        $ProtectionResults = @{
            Level = $ProtectionLevel
            ComputersProcessed = @()
            SettingsApplied = 0
            ApplicationsProtected = 0
            Errors = @()
            Recommendations = @()
        }
    }
    
    process {
        try {
            foreach ($Computer in $ComputerName) {
                Write-CustomLog -Level 'INFO' -Message "Configuring exploit protection on: $Computer"
                
                $ComputerResult = @{
                    ComputerName = $Computer
                    Timestamp = Get-Date
                    ProtectionSettings = @{}
                    ApplicationSettings = @{}
                    SystemSettings = @{}
                    ChangesMade = 0
                    Errors = @()
                }
                
                try {
                    # Backup current settings if requested
                    if ($BackupSettings) {
                        Write-CustomLog -Level 'INFO' -Message "Creating exploit protection backup for $Computer"
                        
                        $BackupData = @{
                            DEP = @{}
                            Registry = @{}
                            Timestamp = Get-Date
                        }
                        
                        try {
                            # Get current DEP policy
                            $DepPolicy = & bcdedit /enum | Select-String "nx"
                            $BackupData.DEP['CurrentPolicy'] = $DepPolicy.Line
                            
                            # Get current registry settings
                            $ExploitKeys = @(
                                'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\kernel',
                                'HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\App and browser protection'
                            )
                            
                            foreach ($Key in $ExploitKeys) {
                                if (Test-Path $Key) {
                                    $BackupData.Registry[$Key] = Get-ItemProperty -Path $Key
                                }
                            }
                            
                            $BackupFile = "exploit-protection-backup-$Computer-$(Get-Date -Format 'yyyyMMdd-HHmmss').xml"
                            $BackupData | Export-Clixml -Path $BackupFile -Force
                            Write-CustomLog -Level 'SUCCESS' -Message "Backup saved to: $BackupFile"
                            
                        } catch {
                            Write-CustomLog -Level 'WARNING' -Message "Failed to create complete backup: $($_.Exception.Message)"
                        }
                    }
                    
                    # Get protection configuration
                    $Config = if ($ProtectionLevel -eq 'Custom') {
                        $CustomSettings
                    } else {
                        $ProtectionProfiles[$ProtectionLevel]
                    }
                    
                    # Apply individual switches if specified
                    if ($EnableDEP -and $Config.DEP) {
                        $Config.DEP.Enable = $true
                    }
                    if ($EnableASLR -and $Config.ASLR) {
                        $Config.ASLR.Enable = $true
                    }
                    if ($EnableCFG -and $Config.CFG) {
                        $Config.CFG.Enable = $true
                    }
                    if ($EnableROP -and $Config.ROP) {
                        $Config.ROP.Enable = $true
                    }
                    
                    # Configure Data Execution Prevention (DEP)
                    if ($Config.DEP -and $Config.DEP.Enable) {
                        Write-CustomLog -Level 'INFO' -Message "Configuring DEP on $Computer"
                        
                        try {
                            $DepPolicy = $Config.DEP.Policy
                            $BcdCommand = switch ($DepPolicy) {
                                'OptIn' { 'bcdedit /set nx OptIn' }
                                'OptOut' { 'bcdedit /set nx OptOut' }
                                'AlwaysOn' { 'bcdedit /set nx AlwaysOn' }
                                default { 'bcdedit /set nx OptOut' }
                            }
                            
                            if ($TestMode) {
                                Write-CustomLog -Level 'INFO' -Message "[TEST] Would execute: $BcdCommand"
                            } else {
                                if ($PSCmdlet.ShouldProcess("DEP Policy", "Set to $DepPolicy")) {
                                    $Result = Invoke-Expression $BcdCommand
                                    $ComputerResult.SystemSettings['DEP'] = @{
                                        Policy = $DepPolicy
                                        Applied = $true
                                        Result = $Result
                                    }
                                    $ProtectionResults.SettingsApplied++
                                    $ComputerResult.ChangesMade++
                                    Write-CustomLog -Level 'SUCCESS' -Message "DEP configured: $DepPolicy"
                                }
                            }
                            
                        } catch {
                            $Error = "Failed to configure DEP: $($_.Exception.Message)"
                            $ComputerResult.Errors += $Error
                            Write-CustomLog -Level 'ERROR' -Message $Error
                        }
                    }
                    
                    # Configure Windows Defender Exploit Guard via registry
                    $ExploitGuardKey = 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\App and browser protection'
                    
                    # Ensure the registry key exists
                    if (-not (Test-Path $ExploitGuardKey) -and -not $TestMode) {
                        New-Item -Path $ExploitGuardKey -Force | Out-Null
                    }
                    
                    # Configure ASLR
                    if ($Config.ASLR -and $Config.ASLR.Enable) {
                        Write-CustomLog -Level 'INFO' -Message "Configuring ASLR on $Computer"
                        
                        try {
                            $AslrSettings = @{
                                'MoveImages' = if ($Config.ASLR.ForceRelocateImages) { 3 } else { 1 }
                                'RequireInfo' = if ($Config.ASLR.RequireInfo) { 1 } else { 0 }
                            }
                            
                            foreach ($Setting in $AslrSettings.Keys) {
                                $Value = $AslrSettings[$Setting]
                                $RegPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management"
                                
                                if ($TestMode) {
                                    Write-CustomLog -Level 'INFO' -Message "[TEST] Would set $RegPath\$Setting = $Value"
                                } else {
                                    if ($PSCmdlet.ShouldProcess("ASLR $Setting", "Set to $Value")) {
                                        Set-ItemProperty -Path $RegPath -Name $Setting -Value $Value -Force
                                        $ComputerResult.ProtectionSettings["ASLR_$Setting"] = $Value
                                        $ProtectionResults.SettingsApplied++
                                        $ComputerResult.ChangesMade++
                                    }
                                }
                            }
                            
                            Write-CustomLog -Level 'SUCCESS' -Message "ASLR configured on $Computer"
                            
                        } catch {
                            $Error = "Failed to configure ASLR: $($_.Exception.Message)"
                            $ComputerResult.Errors += $Error
                            Write-CustomLog -Level 'ERROR' -Message $Error
                        }
                    }
                    
                    # Configure Control Flow Guard (CFG)
                    if ($Config.CFG -and $Config.CFG.Enable) {
                        Write-CustomLog -Level 'INFO' -Message "Configuring CFG on $Computer"
                        
                        try {
                            $CfgKey = 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\kernel'
                            $CfgSettings = @{
                                'CfgBitmap' = 1
                                'CfgBitmapPolicy' = if ($Config.CFG.StrictMode) { 2 } else { 1 }
                            }
                            
                            foreach ($Setting in $CfgSettings.Keys) {
                                $Value = $CfgSettings[$Setting]
                                
                                if ($TestMode) {
                                    Write-CustomLog -Level 'INFO' -Message "[TEST] Would set $CfgKey\$Setting = $Value"
                                } else {
                                    if ($PSCmdlet.ShouldProcess("CFG $Setting", "Set to $Value")) {
                                        Set-ItemProperty -Path $CfgKey -Name $Setting -Value $Value -Force
                                        $ComputerResult.ProtectionSettings["CFG_$Setting"] = $Value
                                        $ProtectionResults.SettingsApplied++
                                        $ComputerResult.ChangesMade++
                                    }
                                }
                            }
                            
                            Write-CustomLog -Level 'SUCCESS' -Message "CFG configured on $Computer"
                            
                        } catch {
                            $Error = "Failed to configure CFG: $($_.Exception.Message)"
                            $ComputerResult.Errors += $Error
                            Write-CustomLog -Level 'ERROR' -Message $Error
                        }
                    }
                    
                    # Configure ROP/JOP protections
                    if ($Config.ROP -and $Config.ROP.Enable) {
                        Write-CustomLog -Level 'INFO' -Message "Configuring ROP protections on $Computer"
                        
                        try {
                            # Use PowerShell cmdlets for Exploit Guard if available
                            if (Get-Command Set-ProcessMitigation -ErrorAction SilentlyContinue) {
                                $MitigationSettings = @{
                                    'DEP' = 'Enable'
                                    'ASLR' = 'Enable'
                                    'BottomUp' = 'Enable'
                                    'HighEntropy' = 'Enable'
                                }
                                
                                if ($Config.ROP.CallerCheck) {
                                    $MitigationSettings['ROP'] = 'Enable'
                                }
                                
                                if ($Config.ROP.StackPivot) {
                                    $MitigationSettings['StackPivot'] = 'Enable'
                                }
                                
                                if ($TestMode) {
                                    Write-CustomLog -Level 'INFO' -Message "[TEST] Would apply system-wide ROP protections"
                                } else {
                                    if ($PSCmdlet.ShouldProcess("System ROP Protection", "Enable")) {
                                        Set-ProcessMitigation -System -Enable DEP,ASLR,BottomUp,HighEntropy
                                        $ComputerResult.ProtectionSettings['ROP_SystemWide'] = 'Enabled'
                                        $ProtectionResults.SettingsApplied++
                                        $ComputerResult.ChangesMade++
                                        Write-CustomLog -Level 'SUCCESS' -Message "System-wide ROP protections enabled"
                                    }
                                }
                            } else {
                                Write-CustomLog -Level 'WARNING' -Message "Set-ProcessMitigation cmdlet not available on $Computer"
                            }
                            
                        } catch {
                            $Error = "Failed to configure ROP protections: $($_.Exception.Message)"
                            $ComputerResult.Errors += $Error
                            Write-CustomLog -Level 'ERROR' -Message $Error
                        }
                    }
                    
                    # Configure application-specific protections
                    if ($ApplicationPaths.Count -gt 0) {
                        Write-CustomLog -Level 'INFO' -Message "Configuring application-specific protections"
                        
                        foreach ($AppPath in $ApplicationPaths) {
                            try {
                                if (Test-Path $AppPath) {
                                    $AppName = Split-Path $AppPath -Leaf
                                    
                                    if ($TestMode) {
                                        Write-CustomLog -Level 'INFO' -Message "[TEST] Would protect application: $AppName"
                                    } else {
                                        if ($PSCmdlet.ShouldProcess($AppName, "Apply exploit protections")) {
                                            if (Get-Command Set-ProcessMitigation -ErrorAction SilentlyContinue) {
                                                Set-ProcessMitigation -Name $AppName -Enable DEP,ASLR,BottomUp,HighEntropy
                                                $ComputerResult.ApplicationSettings[$AppName] = 'Protected'
                                                $ProtectionResults.ApplicationsProtected++
                                                $ComputerResult.ChangesMade++
                                                Write-CustomLog -Level 'SUCCESS' -Message "Protected application: $AppName"
                                            }
                                        }
                                    }
                                } else {
                                    Write-CustomLog -Level 'WARNING' -Message "Application not found: $AppPath"
                                }
                                
                            } catch {
                                $Error = "Failed to protect application $AppPath`: $($_.Exception.Message)"
                                $ComputerResult.Errors += $Error
                                Write-CustomLog -Level 'ERROR' -Message $Error
                            }
                        }
                    }
                    
                    Write-CustomLog -Level 'SUCCESS' -Message "Exploit protection configuration completed for $Computer"
                    
                } catch {
                    $Error = "Failed to configure exploit protection on $Computer`: $($_.Exception.Message)"
                    $ComputerResult.Errors += $Error
                    Write-CustomLog -Level 'ERROR' -Message $Error
                }
                
                $ProtectionResults.ComputersProcessed += $ComputerResult
            }
            
        } catch {
            Write-CustomLog -Level 'ERROR' -Message "Error during exploit protection configuration: $($_.Exception.Message)"
            throw
        }
    }
    
    end {
        Write-CustomLog -Level 'SUCCESS' -Message "Exploit protection configuration completed"
        
        # Generate recommendations
        $ProtectionResults.Recommendations += "Restart systems after exploit protection changes to ensure all settings take effect"
        $ProtectionResults.Recommendations += "Test critical applications thoroughly after enabling exploit protections"
        $ProtectionResults.Recommendations += "Monitor Windows Event Logs for exploit protection events"
        $ProtectionResults.Recommendations += "Regularly update Windows Defender and security intelligence"
        $ProtectionResults.Recommendations += "Consider application compatibility testing with enhanced protections"
        
        if ($ProtectionResults.SettingsApplied -gt 0) {
            $ProtectionResults.Recommendations += "Verify DEP settings with: bcdedit /enum | findstr nx"
            $ProtectionResults.Recommendations += "Monitor process creation for protection enforcement"
        }
        
        if ($ProtectionResults.ApplicationsProtected -gt 0) {
            $ProtectionResults.Recommendations += "Use Get-ProcessMitigation to verify application-specific settings"
        }
        
        # Generate report if requested
        if ($ReportPath) {
            try {
                $HtmlReport = @"
<!DOCTYPE html>
<html>
<head>
    <title>Exploit Protection Configuration Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #f0f0f0; padding: 15px; border-radius: 5px; }
        .computer { border: 1px solid #ccc; margin: 20px 0; padding: 15px; border-radius: 5px; }
        .enabled { color: green; font-weight: bold; }
        .disabled { color: red; }
        table { border-collapse: collapse; width: 100%; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .recommendation { background-color: #e7f3ff; padding: 10px; margin: 5px 0; border-radius: 3px; }
    </style>
</head>
<body>
    <div class='header'>
        <h1>Exploit Protection Configuration Report</h1>
        <p><strong>Protection Level:</strong> $($ProtectionResults.Level)</p>
        <p><strong>Generated:</strong> $(Get-Date)</p>
        <p><strong>Computers Processed:</strong> $($ProtectionResults.ComputersProcessed.Count)</p>
        <p><strong>Settings Applied:</strong> $($ProtectionResults.SettingsApplied)</p>
        <p><strong>Applications Protected:</strong> $($ProtectionResults.ApplicationsProtected)</p>
    </div>
"@
                
                foreach ($Computer in $ProtectionResults.ComputersProcessed) {
                    $HtmlReport += "<div class='computer'>"
                    $HtmlReport += "<h2>$($Computer.ComputerName)</h2>"
                    $HtmlReport += "<p><strong>Changes Made:</strong> $($Computer.ChangesMade)</p>"
                    
                    if ($Computer.ProtectionSettings.Count -gt 0) {
                        $HtmlReport += "<h3>Protection Settings</h3>"
                        $HtmlReport += "<table><tr><th>Setting</th><th>Value</th></tr>"
                        
                        foreach ($Setting in $Computer.ProtectionSettings.Keys) {
                            $Value = $Computer.ProtectionSettings[$Setting]
                            $HtmlReport += "<tr><td>$Setting</td><td class='enabled'>$Value</td></tr>"
                        }
                        
                        $HtmlReport += "</table>"
                    }
                    
                    if ($Computer.ApplicationSettings.Count -gt 0) {
                        $HtmlReport += "<h3>Protected Applications</h3>"
                        $HtmlReport += "<table><tr><th>Application</th><th>Status</th></tr>"
                        
                        foreach ($App in $Computer.ApplicationSettings.Keys) {
                            $Status = $Computer.ApplicationSettings[$App]
                            $HtmlReport += "<tr><td>$App</td><td class='enabled'>$Status</td></tr>"
                        }
                        
                        $HtmlReport += "</table>"
                    }
                    
                    $HtmlReport += "</div>"
                }
                
                $HtmlReport += "<div class='header'><h2>Recommendations</h2>"
                foreach ($Rec in $ProtectionResults.Recommendations) {
                    $HtmlReport += "<div class='recommendation'>$Rec</div>"
                }
                $HtmlReport += "</div>"
                
                $HtmlReport += "</body></html>"
                
                $HtmlReport | Out-File -FilePath $ReportPath -Encoding UTF8
                Write-CustomLog -Level 'SUCCESS' -Message "Protection report saved to: $ReportPath"
                
            } catch {
                Write-CustomLog -Level 'ERROR' -Message "Failed to generate report: $($_.Exception.Message)"
            }
        }
        
        # Display summary
        Write-CustomLog -Level 'INFO' -Message "Exploit Protection Summary:"
        Write-CustomLog -Level 'INFO' -Message "  Protection Level: $($ProtectionResults.Level)"
        Write-CustomLog -Level 'INFO' -Message "  Computers: $($ProtectionResults.ComputersProcessed.Count)"
        Write-CustomLog -Level 'INFO' -Message "  Settings Applied: $($ProtectionResults.SettingsApplied)"
        Write-CustomLog -Level 'INFO' -Message "  Applications Protected: $($ProtectionResults.ApplicationsProtected)"
        
        if ($ProtectionResults.SettingsApplied -gt 0) {
            Write-CustomLog -Level 'WARNING' -Message "System restart recommended to fully activate all exploit protections"
        }
        
        return $ProtectionResults
    }
}