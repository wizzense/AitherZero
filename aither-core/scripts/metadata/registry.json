{
  "Templates": {
    "Parallel": {
      "Name": "Parallel Execution Script",
      "Content": "#Requires -Version 7.0\r\n\r\n<#\r\n.SYNOPSIS\r\n    Parallel execution script template\r\n.DESCRIPTION\r\n    Template for creating scripts that execute operations in parallel\r\n.PARAMETER Items\r\n    Items to process in parallel\r\n.PARAMETER MaxParallel\r\n    Maximum number of parallel operations\r\n.EXAMPLE\r\n    .\\ParallelScript.ps1 -Items @(\"item1\", \"item2\", \"item3\") -MaxParallel 3\r\n#>\r\n\r\nparam(\r\n    [Parameter(Mandatory = $true)]\r\n    [string[]]$Items,\r\n    \r\n    [Parameter(Mandatory = $false)]\r\n    [int]$MaxParallel = 5,\r\n    \r\n    [Parameter(Mandatory = $false)]\r\n    [switch]$WhatIf\r\n)\r\n\r\ntry {\r\n    Write-CustomLog -Level 'INFO' -Message \"Parallel execution script started with $($Items.Count) items\"\r\n    \r\n    if ($WhatIf) {\r\n        Write-CustomLog -Level 'INFO' -Message \"WhatIf mode: Would process $($Items.Count) items in parallel\"\r\n        return\r\n    }\r\n    \r\n    # Process items in parallel\r\n    $results = $Items | ForEach-Object -Parallel {\r\n        param($item)\r\n        \r\n        try {\r\n            Write-Host \"Processing item: $item\" -ForegroundColor Cyan\r\n            \r\n            # Your parallel processing logic here\r\n            Start-Sleep -Seconds (Get-Random -Minimum 1 -Maximum 3)\r\n            \r\n            return @{\r\n                Item = $item\r\n                Status = 'Success'\r\n                Result = \"Processed successfully\"\r\n            }\r\n        } catch {\r\n            return @{\r\n                Item = $item\r\n                Status = 'Failed'\r\n                Result = $_.Exception.Message\r\n            }\r\n        }\r\n    } -ThrottleLimit $MaxParallel\r\n    \r\n    # Process results\r\n    $successful = $results | Where-Object { $_.Status -eq 'Success' }\r\n    $failed = $results | Where-Object { $_.Status -eq 'Failed' }\r\n    \r\n    Write-CustomLog -Level 'SUCCESS' -Message \"Parallel execution completed. Success: $($successful.Count), Failed: $($failed.Count)\"\r\n    \r\n    if ($failed.Count -gt 0) {\r\n        Write-CustomLog -Level 'WARNING' -Message \"Some items failed to process:\"\r\n        foreach ($failure in $failed) {\r\n            Write-CustomLog -Level 'ERROR' -Message \"  - $($failure.Item): $($failure.Result)\"\r\n        }\r\n    }\r\n    \r\n    return $results\r\n    \r\n} catch {\r\n    Write-CustomLog -Level 'ERROR' -Message \"Parallel execution script failed: $($_.Exception.Message)\"\r\n    throw\r\n}",
      "Description": "Template for parallel execution scripts"
    },
    "Basic": {
      "Name": "Basic PowerShell Script",
      "Content": "#Requires -Version 7.0\r\n\r\n<#\r\n.SYNOPSIS\r\n    Basic PowerShell script template\r\n.DESCRIPTION\r\n    Template for creating basic PowerShell scripts with logging support\r\n.PARAMETER ExampleParam\r\n    Example parameter\r\n.EXAMPLE\r\n    .\\Script.ps1 -ExampleParam \"value\"\r\n#>\r\n\r\nparam(\r\n    [Parameter(Mandatory = $false)]\r\n    [string]$ExampleParam = \"default\",\r\n    \r\n    [Parameter(Mandatory = $false)]\r\n    [switch]$WhatIf\r\n)\r\n\r\ntry {\r\n    Write-CustomLog -Level 'INFO' -Message \"Script started with parameter: $ExampleParam\"\r\n    \r\n    if ($WhatIf) {\r\n        Write-CustomLog -Level 'INFO' -Message \"WhatIf mode: Script would perform actions here\"\r\n        return\r\n    }\r\n    \r\n    # Your script logic here\r\n    Write-CustomLog -Level 'INFO' -Message \"Performing script operations...\"\r\n    \r\n    # Example operation\r\n    Start-Sleep -Seconds 1\r\n    \r\n    Write-CustomLog -Level 'SUCCESS' -Message \"Script completed successfully\"\r\n    \r\n} catch {\r\n    Write-CustomLog -Level 'ERROR' -Message \"Script failed: $($_.Exception.Message)\"\r\n    throw\r\n}",
      "Description": "Simple PowerShell script template with logging"
    },
    "Lab": {
      "Name": "Lab Automation Script",
      "Content": "#Requires -Version 7.0\r\n\r\n<#\r\n.SYNOPSIS\r\n    Lab automation script template\r\n.DESCRIPTION\r\n    Template for creating lab automation scripts with comprehensive error handling\r\n.PARAMETER LabName\r\n    Name of the lab environment\r\n.PARAMETER Operation\r\n    Operation to perform\r\n.EXAMPLE\r\n    .\\LabScript.ps1 -LabName \"TestLab\" -Operation \"Deploy\"\r\n#>\r\n\r\nparam(\r\n    [Parameter(Mandatory = $true)]\r\n    [string]$LabName,\r\n    \r\n    [Parameter(Mandatory = $false)]\r\n    [ValidateSet('Deploy', 'Destroy', 'Status', 'Validate')]\r\n    [string]$Operation = 'Status',\r\n    \r\n    [Parameter(Mandatory = $false)]\r\n    [switch]$WhatIf\r\n)\r\n\r\ntry {\r\n    Write-CustomLog -Level 'INFO' -Message \"Lab automation script started: $LabName ($Operation)\"\r\n    \r\n    # Validate prerequisites\r\n    if (-not $env:PROJECT_ROOT) {\r\n        throw \"PROJECT_ROOT environment variable not set\"\r\n    }\r\n    \r\n    if ($WhatIf) {\r\n        Write-CustomLog -Level 'INFO' -Message \"WhatIf mode: Would perform $Operation on $LabName\"\r\n        return\r\n    }\r\n    \r\n    # Lab operation logic\r\n    switch ($Operation) {\r\n        'Deploy' {\r\n            Write-CustomLog -Level 'INFO' -Message \"Deploying lab: $LabName\"\r\n            # Deployment logic here\r\n        }\r\n        'Destroy' {\r\n            Write-CustomLog -Level 'INFO' -Message \"Destroying lab: $LabName\"\r\n            # Destruction logic here\r\n        }\r\n        'Status' {\r\n            Write-CustomLog -Level 'INFO' -Message \"Checking lab status: $LabName\"\r\n            # Status check logic here\r\n        }\r\n        'Validate' {\r\n            Write-CustomLog -Level 'INFO' -Message \"Validating lab: $LabName\"\r\n            # Validation logic here\r\n        }\r\n    }\r\n    \r\n    Write-CustomLog -Level 'SUCCESS' -Message \"Lab automation completed successfully\"\r\n    \r\n} catch {\r\n    Write-CustomLog -Level 'ERROR' -Message \"Lab automation failed: $($_.Exception.Message)\"\r\n    throw\r\n}",
      "Description": "Template for lab automation scripts"
    },
    "Module": {
      "Name": "Module Function Script",
      "Content": "#Requires -Version 7.0\r\n\r\n<#\r\n.SYNOPSIS\r\n    Module function script template\r\n.DESCRIPTION\r\n    Template for creating scripts that use AitherZero modules\r\n.PARAMETER ModuleName\r\n    Name of the module to work with\r\n.EXAMPLE\r\n    .\\ModuleScript.ps1 -ModuleName \"LabRunner\"\r\n#>\r\n\r\nparam(\r\n    [Parameter(Mandatory = $true)]\r\n    [string]$ModuleName,\r\n    \r\n    [Parameter(Mandatory = $false)]\r\n    [switch]$WhatIf\r\n)\r\n\r\ntry {\r\n    Write-CustomLog -Level 'INFO' -Message \"Module script started for: $ModuleName\"\r\n    \r\n    # Import required modules\r\n    $moduleAvailable = Get-Module -Name $ModuleName -ListAvailable\r\n    if (-not $moduleAvailable) {\r\n        throw \"Module $ModuleName is not available\"\r\n    }\r\n    \r\n    Import-Module $ModuleName -Force\r\n    Write-CustomLog -Level 'INFO' -Message \"Module $ModuleName imported successfully\"\r\n    \r\n    if ($WhatIf) {\r\n        Write-CustomLog -Level 'INFO' -Message \"WhatIf mode: Would execute module operations\"\r\n        return\r\n    }\r\n    \r\n    # Your module-specific logic here\r\n    Write-CustomLog -Level 'INFO' -Message \"Executing module operations...\"\r\n    \r\n    Write-CustomLog -Level 'SUCCESS' -Message \"Module script completed successfully\"\r\n    \r\n} catch {\r\n    Write-CustomLog -Level 'ERROR' -Message \"Module script failed: $($_.Exception.Message)\"\r\n    throw\r\n}",
      "Description": "Template for module-based scripts"
    }
  },
  "RegisteredScripts": {},
  "Metadata": {
    "Platform": "Linux",
    "LastUpdated": "2025-07-09T23:50:05.323393+00:00",
    "Version": "1.0"
  },
  "ExecutionHistory": []
}
