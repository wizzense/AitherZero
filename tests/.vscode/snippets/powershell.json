{
    "PowerShell Function Template": {
        "prefix": "psfunction",
        "body": [
            "#Requires -Version 7.0",
            "",
            "<#",
            ".SYNOPSIS",
            "    ${1:Brief description}",
            "",
            ".DESCRIPTION",
            "    ${2:Detailed description}",
            "",
            ".PARAMETER ${3:ParameterName}",
            "    ${4:Parameter description}",
            "",
            ".EXAMPLE",
            "    ${5:Example usage}",
            "",
            ".NOTES",
            "    Author: ${6:Author}",
            "    Version: ${7:1.0.0}",
            "    Dependencies: ${8:Dependencies}",
            "#>",
            "",
            "function ${9:Verb-Noun} {",
            "    [CmdletBinding(SupportsShouldProcess)]",
            "    param(",
            "        [Parameter(Mandatory = \\$true)]",
            "        [ValidateNotNullOrEmpty()]",
            "        [string]\\$${3:ParameterName},",
            "        ",
            "        [Parameter()]",
            "        [string]\\$${10:OptionalParam} = '${11:DefaultValue}'",
            "    )",
            "    ",
            "    begin {",
            "        Write-CustomLog -Level 'INFO' -Message \"Starting \\$($MyInvocation.MyCommand.Name)\"",
            "        ${12:# Additional setup}",
            "    }",
            "    ",
            "    process {",
            "        try {",
            "            if (\\$PSCmdlet.ShouldProcess(\\$${3:ParameterName}, '${13:Action}')) {",
            "                ${0:# Implementation here}",
            "            }",
            "        }",
            "        catch {",
            "            Write-CustomLog -Level 'ERROR' -Message \"Error in \\$($MyInvocation.MyCommand.Name): \\$($_.Exception.Message)\"",
            "            throw",
            "        }",
            "    }",
            "    ",
            "    end {",
            "        Write-CustomLog -Level 'SUCCESS' -Message \"Completed \\$($MyInvocation.MyCommand.Name)\"",
            "    }",
            "}"
        ],
        "description": "PowerShell function template with project standards"
    },
    "PowerShell Module Manifest": {
        "prefix": "psmanifest",
        "body": [
            "#Requires -Version 7.0",
            "",
            "@{",
            "    # Module Metadata",
            "    RootModule = '${1:ModuleName}.psm1'",
            "    ModuleVersion = '${2:1.0.0}'",
            "    GUID = '${3:${RANDOM_GUID}}'",
            "    Author = '${4:Author}'",
            "    CompanyName = '${5:Company}'",
            "    Copyright = '(c) ${6:$CURRENT_YEAR} ${4:Author}. All rights reserved.'",
            "    Description = '${7:Module description}'",
            "    ",
            "    # PowerShell Requirements",
            "    PowerShellVersion = '7.0'",
            "    CompatiblePSEditions = @('Core')",
            "    ",
            "    # Module Dependencies",
            "    RequiredModules = @(${8:# Add required modules})",
            "    ",
            "    # Exported Functions and Variables",
            "    FunctionsToExport = @('*')",
            "    CmdletsToExport = @()",
            "    VariablesToExport = @()",
            "    AliasesToExport = @()",
            "    ",
            "    # Private Data",
            "    PrivateData = @{",
            "        PSData = @{",
            "            Tags = @('${9:automation}', '${10:powershell}', '${11:infrastructure}')",
            "            LicenseUri = '${12:LicenseUri}'",
            "            ProjectUri = '${13:ProjectUri}'",
            "            ReleaseNotes = '${14:Initial release}'",
            "            Prerelease = '${15:# Remove if not prerelease}'",
            "        }",
            "    }",
            "}"
        ],
        "description": "PowerShell module manifest template with comprehensive metadata"
    },
    "Pester Test Template": {
        "prefix": "pestertest",
        "body": [
            "#Requires -Module Pester",
            "#Requires -Version 7.0",
            "",
            "BeforeDiscovery {",
            "    \\$ProjectRoot = Split-Path -Parent \\$PSScriptRoot",
            "    \\$ModuleName = '${1:ModuleName}'",
            "    \\$ModulePath = Join-Path \\$ProjectRoot \"aither-core/modules/\\$ModuleName\"",
            "}",
            "",
            "Describe '${2:ComponentName}' {",
            "    BeforeAll {",
            "        # Import the module",
            "        Import-Module \\$ModulePath -Force",
            "        ",
            "        # Setup test environment",
            "        \\$TestDrive = Get-PSDrive TestDrive | Select-Object -ExpandProperty Root",
            "        ${3:# Additional setup}",
            "    }",
            "    ",
            "    AfterAll {",
            "        # Cleanup test environment",
            "        Remove-Module \\$ModuleName -Force -ErrorAction SilentlyContinue",
            "        ${4:# Additional cleanup}",
            "    }",
            "    ",
            "    Context '${5:Unit Tests}' {",
            "        BeforeEach {",
            "            ${6:# Setup for each test}",
            "        }",
            "        ",
            "        It '${7:Should perform expected behavior}' {",
            "            # Arrange",
            "            ${8:# Test setup}",
            "            ",
            "            # Act",
            "            \\$Result = ${9:# Execute function}",
            "            ",
            "            # Assert",
            "            \\$Result | Should -Not -BeNullOrEmpty",
            "            ${0:# Additional assertions}",
            "        }",
            "        ",
            "        It '${10:Should handle error conditions}' {",
            "            # Arrange & Act & Assert",
            "            { ${11:# Code that should throw} } | Should -Throw",
            "        }",
            "    }",
            "    ",
            "    Context '${12:Integration Tests}' {",
            "        It '${13:Should integrate with other components}' {",
            "            ${14:# Integration test implementation}",
            "        }",
            "    }",
            "}"
        ],
        "description": "Comprehensive Pester test template with modern structure"
    },
    "Advanced Try-Catch with Logging": {
        "prefix": "pstrycatch",
        "body": [
            "try {",
            "    Write-CustomLog -Level 'INFO' -Message \"${1:Starting operation}\"",
            "    ${2:# Code that might throw an exception}",
            "}",
            "catch [${3:SpecificExceptionType}] {",
            "    Write-CustomLog -Level 'ERROR' -Message \"Specific error in \\$($MyInvocation.MyCommand.Name): \\$($_.Exception.Message)\"",
            "    ${4:# Specific error handling}",
            "    throw",
            "}",
            "catch {",
            "    Write-CustomLog -Level 'ERROR' -Message \"Unexpected error in \\$($MyInvocation.MyCommand.Name): \\$($_.Exception.Message)\"",
            "    Write-CustomLog -Level 'DEBUG' -Message \"Error details: \\$($_.ScriptStackTrace)\"",
            "    ${5:# General error handling}",
            "    throw",
            "}",
            "finally {",
            "    ${6:# Cleanup code}",
            "}"
        ],
        "description": "Advanced try-catch block with specific exception handling and logging"
    },
    "Parameter Validation Advanced": {
        "prefix": "psvalidation",
        "body": [
            "[Parameter(${1:Mandatory = \\$true}, ${2:Position = 0}, ${3:ValueFromPipeline = \\$true})]",
            "[ValidateNotNullOrEmpty()]",
            "[ValidateSet(${4:'Option1', 'Option2', 'Option3'})]",
            "[ValidatePattern(${5:'^[a-zA-Z0-9]+\\$'})]",
            "[ValidateRange(${6:1}, ${7:100})]",
            "[Alias('${8:AliasName}')]",
            "[${9:string}]\\$${10:ParameterName}${11:,}"
        ],
        "description": "Comprehensive parameter validation with multiple attributes"
    },
    "Cross-Platform Path Utilities": {
        "prefix": "pspath",
        "body": [
            "# Cross-platform path construction",
            "\\$${1:VariableName} = Join-Path -Path '${2:BasePath}' -ChildPath '${3:SubPath}'",
            "",
            "# Resolve to absolute path",
            "if (Test-Path \\$${1:VariableName}) {",
            "    \\$${1:VariableName} = Convert-Path \\$${1:VariableName}",
            "}",
            "",
            "# Ensure directory exists",
            "\\$ParentPath = Split-Path -Parent \\$${1:VariableName}",
            "if (-not (Test-Path \\$ParentPath)) {",
            "    New-Item -Path \\$ParentPath -ItemType Directory -Force | Out-Null",
            "}"
        ],
        "description": "Cross-platform path utilities with validation and creation"
    },
    "Module Import with Validation": {
        "prefix": "psimport",
        "body": [
            "\\$ModulePath = Join-Path -Path '${1:BasePath}' -ChildPath '${2:ModuleName}'",
            "",
            "if (-not (Test-Path \\$ModulePath)) {",
            "    throw \"Module not found at path: \\$ModulePath\"",
            "}",
            "",
            "try {",
            "    Import-Module \\$ModulePath -Force -ErrorAction Stop",
            "    Write-CustomLog -Level 'INFO' -Message \"Successfully imported module: ${2:ModuleName}\"",
            "}",
            "catch {",
            "    Write-CustomLog -Level 'ERROR' -Message \"Failed to import module ${2:ModuleName}: \\$($_.Exception.Message)\"",
            "    throw",
            "}"
        ],
        "description": "Module import with validation and error handling"
    },
    "Write-CustomLog with Context": {
        "prefix": "pslog",
        "body": [
            "Write-CustomLog -Level '${1|INFO,WARN,ERROR,SUCCESS,DEBUG|}' -Message '${2:Message}' -Context @{",
            "    Function = \\$MyInvocation.MyCommand.Name",
            "    ${3:AdditionalKey} = '${4:AdditionalValue}'",
            "}"
        ],
        "description": "Enhanced custom log entry with context information"
    },
    "PowerShell Class Template": {
        "prefix": "psclass",
        "body": [
            "class ${1:ClassName} {",
            "    # Properties",
            "    [string]\\$${2:PropertyName}",
            "    hidden [string]\\$${3:HiddenProperty}",
            "    ",
            "    # Constructor",
            "    ${1:ClassName}() {",
            "        ${4:# Default constructor}",
            "    }",
            "    ",
            "    ${1:ClassName}([string]\\$${2:PropertyName}) {",
            "        \\$this.${2:PropertyName} = \\$${2:PropertyName}",
            "        ${5:# Parameterized constructor}",
            "    }",
            "    ",
            "    # Methods",
            "    [string] ToString() {",
            "        return \"${1:ClassName}: \\$(\\$this.${2:PropertyName})\"",
            "    }",
            "    ",
            "    [void] ${6:MethodName}() {",
            "        ${7:# Method implementation}",
            "    }",
            "    ",
            "    # Static method",
            "    static [${1:ClassName}] Create([string]\\$${2:PropertyName}) {",
            "        return [${1:ClassName}]::new(\\$${2:PropertyName})",
            "    }",
            "}"
        ],
        "description": "PowerShell class template with properties, constructors, and methods"
    },
    "Configuration Data Template": {
        "prefix": "psconfig",
        "body": [
            "@{",
            "    # Configuration metadata",
            "    ConfigVersion = '${1:1.0.0}'",
            "    LastModified = '${2:$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE}'",
            "    Environment = '${3:Development}'",
            "    ",
            "    # Application settings",
            "    Application = @{",
            "        Name = '${4:ApplicationName}'",
            "        Version = '${5:1.0.0}'",
            "        LogLevel = '${6:INFO}'",
            "        MaxRetries = ${7:3}",
            "    }",
            "    ",
            "    # Infrastructure settings",
            "    Infrastructure = @{",
            "        Provider = '${8:Hyper-V}'",
            "        Region = '${9:Local}'",
            "        ResourceGroup = '${10:lab-resources}'",
            "    }",
            "    ",
            "    # Security settings",
            "    Security = @{",
            "        EncryptionEnabled = \\$${11:true}",
            "        AuditEnabled = \\$${12:true}",
            "        CertificateThumbprint = '${13:# Certificate thumbprint}'",
            "    }",
            "    ",
            "    # Custom settings",
            "    ${14:CustomSection} = @{",
            "        ${15:Setting1} = '${16:Value1}'",
            "        ${17:Setting2} = ${18:42}",
            "    }",
            "}"
        ],
        "description": "Configuration data template with common sections"
    },
    "Mock Implementation Enhanced": {
        "prefix": "psmock",
        "body": [
            "# Mock ${1:CommandName} with parameter filtering",
            "Mock ${1:CommandName} {",
            "    param(",
            "        ${2:# Mock parameters}",
            "    )",
            "    ",
            "    ${3:# Mock implementation}",
            "    return ${4:[PSCustomObject]@{",
            "        ${5:Property1} = '${6:Value1}'",
            "        ${7:Property2} = ${8:42}",
            "    }}",
            "} -ModuleName '${9:ModuleName}' -ParameterFilter {",
            "    ${10:\\$ParameterName -eq 'ExpectedValue'}",
            "}",
            "",
            "# Verify mock was called",
            "Assert-MockCalled ${1:CommandName} -ModuleName '${9:ModuleName}' -Times ${11:1} -Exactly"
        ],
        "description": "Enhanced Pester mock with parameter filtering and verification"
    },
    "PowerShell Workflow Template": {
        "prefix": "psworkflow",
        "body": [
            "#Requires -Version 7.0",
            "",
            "<#",
            ".SYNOPSIS",
            "    ${1:Workflow description}",
            "",
            ".DESCRIPTION",
            "    ${2:Detailed workflow description}",
            "#>",
            "",
            "[CmdletBinding()]",
            "param(",
            "    [Parameter(Mandatory = \\$true)]",
            "    [string]\\$${3:ConfigPath}",
            ")",
            "",
            "begin {",
            "    # Initialize workflow",
            "    Write-CustomLog -Level 'INFO' -Message \"Starting workflow: ${1:Workflow description}\"",
            "    ",
            "    # Load configuration",
            "    if (-not (Test-Path \\$${3:ConfigPath})) {",
            "        throw \"Configuration file not found: \\$${3:ConfigPath}\"",
            "    }",
            "    ",
            "    \\$Config = Import-PowerShellDataFile -Path \\$${3:ConfigPath}",
            "}",
            "",
            "process {",
            "    try {",
            "        # Step 1: ${4:First step description}",
            "        Write-CustomLog -Level 'INFO' -Message \"${4:First step description}\"",
            "        ${5:# Step 1 implementation}",
            "        ",
            "        # Step 2: ${6:Second step description}",
            "        Write-CustomLog -Level 'INFO' -Message \"${6:Second step description}\"",
            "        ${7:# Step 2 implementation}",
            "        ",
            "        # Step 3: ${8:Final step description}",
            "        Write-CustomLog -Level 'INFO' -Message \"${8:Final step description}\"",
            "        ${0:# Step 3 implementation}",
            "    }",
            "    catch {",
            "        Write-CustomLog -Level 'ERROR' -Message \"Workflow failed: \\$($_.Exception.Message)\"",
            "        throw",
            "    }",
            "}",
            "",
            "end {",
            "    Write-CustomLog -Level 'SUCCESS' -Message \"Workflow completed successfully\"",
            "}"
        ],
        "description": "Multi-step workflow template with configuration and logging"
    }
}
