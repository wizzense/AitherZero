#!/usr/bin/env pwsh
# AitherZero Universal CLI - Combines az, seq, and playbook functionality

# Capture command-line arguments
$arguments = $args

# Determine the actual directory of this script
$scriptDir = $null

# Try different methods to get the script directory
if ($PSScriptRoot) {
    $scriptDir = $PSScriptRoot
} elseif ($MyInvocation.MyCommand.Path) {
    $scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
} else {
    # When run as ./az, we're already in the right directory
    $scriptDir = Get-Location
}

# Verify we found the AitherZero root
if (-not (Test-Path "$scriptDir/AitherZero.psd1")) {
    if (Test-Path "./AitherZero.psd1") {
        $scriptDir = Get-Location
    } else {
        Write-Error "Cannot find AitherZero.psd1. Please run from the AitherZero directory."
        exit 1
    }
}

# Load module if needed
if (-not $env:AITHERZERO_INITIALIZED) {
    Import-Module "$scriptDir/AitherZero.psd1" -Force -Global
}

# Show usage if no arguments
if ($arguments.Count -eq 0) {
    Write-Host "`nAitherZero Universal Command (az)" -ForegroundColor Cyan
    Write-Host "==================================`n" -ForegroundColor Cyan
    
    Write-Host "Single Scripts:" -ForegroundColor Yellow
    Write-Host "  az 0402                    # Run unit tests" -ForegroundColor White
    Write-Host "  az 0510                    # Generate project report" -ForegroundColor White
    Write-Host "  az 0511 -ShowAll           # Show dashboard with options`n" -ForegroundColor White
    
    Write-Host "Sequences:" -ForegroundColor Yellow
    Write-Host "  az 0402,0404,0407          # Run multiple scripts" -ForegroundColor White
    Write-Host "  az 0400-0409               # Run range of scripts" -ForegroundColor White
    Write-Host "  az 0000-0099               # Run all environment prep`n" -ForegroundColor White
    
    Write-Host "Playbooks:" -ForegroundColor Yellow
    Write-Host "  az playbook test-quick     # Run test-quick playbook" -ForegroundColor White
    Write-Host "  az pb test-fix-workflow    # Run test fix workflow" -ForegroundColor White
    Write-Host "  az playbook audit-full     # Run full audit`n" -ForegroundColor White
    
    Write-Host "Available Playbooks:" -ForegroundColor Gray
    Write-Host "  test-quick, test-full, test-fix-workflow" -ForegroundColor White
    Write-Host "  build-release, audit-full, report-dashboard" -ForegroundColor White
    
    exit 1
}

$firstArg = [string]$arguments[0]

# Check if this is a playbook command
if ($firstArg -eq 'playbook' -or $firstArg -eq 'pb') {
    if ($arguments.Count -lt 2) {
        Write-Host "Error: Playbook name required" -ForegroundColor Red
        Write-Host "Usage: az playbook <name> [options]" -ForegroundColor Yellow
        exit 1
    }
    
    $playbookName = $arguments[1]
    $additionalArgs = @()
    if ($arguments.Count -gt 2) {
        $additionalArgs = $arguments[2..($arguments.Count-1)]
    }
    
    Write-Host "ðŸŽ­ Running playbook: $playbookName" -ForegroundColor Cyan
    & "$scriptDir/Start-AitherZero.ps1" -Mode Orchestrate -Playbook $playbookName -NonInteractive @additionalArgs
    exit $LASTEXITCODE
}

# Check if this is a sequence (contains comma or dash with numbers)
if ($firstArg -match '[,\-]' -and $firstArg -match '^\d+') {
    # This is a sequence pattern
    if (-not (Get-Command Invoke-OrchestrationSequence -ErrorAction SilentlyContinue)) {
        Write-Error "Invoke-OrchestrationSequence command not found."
        exit 1
    }
    
    $additionalParams = @{}
    if ($arguments.Count -gt 1) {
        # Parse remaining arguments as parameters
        for ($i = 1; $i -lt $arguments.Count; $i++) {
            $arg = $arguments[$i]
            if ($arg -match '^-(\w+)$') {
                $paramName = $Matches[1]
                if ($i + 1 -lt $arguments.Count -and $arguments[$i + 1] -notmatch '^-') {
                    $additionalParams[$paramName] = $arguments[$i + 1]
                    $i++
                } else {
                    $additionalParams[$paramName] = $true
                }
            }
        }
    }
    
    Write-Host "ðŸ”„ Running sequence: $firstArg" -ForegroundColor Cyan
    Invoke-OrchestrationSequence -Sequence $firstArg @additionalParams
    exit $LASTEXITCODE
}

# Otherwise, treat as single script number
if (-not (Get-Command Invoke-AitherScript -ErrorAction SilentlyContinue)) {
    Write-Error "Invoke-AitherScript command not found."
    exit 1
}

if ($arguments.Count -gt 1) {
    $remainingArgs = $arguments[1..($arguments.Count-1)]
    Invoke-AitherScript -ScriptNumber $firstArg @remainingArgs
} else {
    Invoke-AitherScript -ScriptNumber $firstArg
}