{
  "name": "test-phase1-validation",
  "description": "Phase 1: Validate comprehensive test reporting infrastructure",
  "version": "1.0.0",
  "author": "AitherZero Testing Framework - Phase 1",
  "tags": ["testing", "phase1", "validation", "reporting", "dashboard"],
  "requirements": {
    "modules": ["Pester", "PSScriptAnalyzer"],
    "minimumVersion": "7.0",
    "estimatedDuration": "5-10 minutes"
  },
  "variables": {
    "testPath": "./tests",
    "outputPath": "./tests/results",
    "reportsPath": "./reports",
    "skipTests": false,
    "showReports": false,
    "continueOnError": true
  },
  "stages": [
    {
      "name": "Test Discovery",
      "description": "Discover all test files in the repository",
      "script": "Write-Host 'üîç Discovering test files...' -ForegroundColor Cyan; $unitTests = @(Get-ChildItem -Path './tests/unit' -Filter '*.Tests.ps1' -Recurse -ErrorAction SilentlyContinue); $integrationTests = @(Get-ChildItem -Path './tests/integration' -Filter '*.Tests.ps1' -Recurse -ErrorAction SilentlyContinue); $total = $unitTests.Count + $integrationTests.Count; Write-Host \"‚úÖ Unit Test Files: $($unitTests.Count)\" -ForegroundColor Green; Write-Host \"‚úÖ Integration Test Files: $($integrationTests.Count)\" -ForegroundColor Green; Write-Host \"‚úÖ Total Test Files: $total\" -ForegroundColor Green; if ($total -lt 200) { Write-Host '‚ö†Ô∏è Warning: Expected around 290 test files' -ForegroundColor Yellow }",
      "continueOnError": false
    },
    {
      "name": "Prepare Output Directories",
      "description": "Ensure test results and reports directories exist",
      "script": "Write-Host 'üìÅ Preparing output directories...' -ForegroundColor Cyan; $paths = @('{{outputPath}}', '{{reportsPath}}'); foreach ($path in $paths) { if (-not (Test-Path $path)) { New-Item -ItemType Directory -Path $path -Force | Out-Null; Write-Host \"‚úÖ Created: $path\" -ForegroundColor Green } else { Write-Host \"‚úÖ Exists: $path\" -ForegroundColor Green } }",
      "continueOnError": false
    },
    {
      "name": "Environment Check",
      "description": "Verify testing tools are installed",
      "sequence": ["0400"],
      "continueOnError": false
    },
    {
      "name": "Execute Unit Tests",
      "description": "Run unit tests and generate TestReport format",
      "sequence": ["0402"],
      "variables": {
        "OutputPath": "{{outputPath}}",
        "PassThru": true
      },
      "continueOnError": true,
      "condition": "{{skipTests:=false}} -eq $false"
    },
    {
      "name": "Execute Integration Tests",
      "description": "Run integration tests and generate TestReport format",
      "sequence": ["0403"],
      "variables": {
        "OutputPath": "{{outputPath}}",
        "PassThru": true
      },
      "continueOnError": true,
      "condition": "{{skipTests:=false}} -eq $false"
    },
    {
      "name": "Validate Report Format",
      "description": "Check that TestReport files were generated correctly",
      "script": "Write-Host 'üìä Validating report format...' -ForegroundColor Cyan; $testReports = Get-ChildItem -Path '{{outputPath}}' -Filter 'TestReport-*.json' -ErrorAction SilentlyContinue; if ($testReports.Count -eq 0) { Write-Host '‚ö†Ô∏è No TestReport files found in {{outputPath}}' -ForegroundColor Yellow; if ('{{skipTests}}' -eq 'true') { Write-Host '   Run without -skipTests to generate reports' -ForegroundColor Gray } } else { Write-Host \"Found $($testReports.Count) TestReport files:\" -ForegroundColor Green; $requiredFields = @('TestType', 'Timestamp', 'TotalCount', 'PassedCount', 'FailedCount', 'TestResults'); foreach ($report in $testReports) { Write-Host \"  üìÑ $($report.Name)\" -ForegroundColor Cyan; try { $reportData = Get-Content $report.FullName -Raw | ConvertFrom-Json; $missingFields = @(); foreach ($field in $requiredFields) { if (-not $reportData.PSObject.Properties[$field]) { $missingFields += $field } }; if ($missingFields.Count -eq 0) { Write-Host '     ‚úÖ Valid format' -ForegroundColor Green; Write-Host \"     - Type: $($reportData.TestType)\" -ForegroundColor Gray; Write-Host \"     - Tests: $($reportData.TotalCount) ($($reportData.PassedCount) passed, $($reportData.FailedCount) failed)\" -ForegroundColor Gray; if ('{{showReports}}' -eq 'true') { $reportData | ConvertTo-Json -Depth 3 | Write-Host -ForegroundColor Gray } } else { Write-Host \"     ‚ùå Missing fields: $($missingFields -join ', ')\" -ForegroundColor Red } } catch { Write-Host \"     ‚ùå Failed to parse: $_\" -ForegroundColor Red } } }",
      "continueOnError": true
    },
    {
      "name": "Dashboard Compatibility Check",
      "description": "Verify dashboard can discover reports",
      "script": "Write-Host 'üé® Checking dashboard compatibility...' -ForegroundColor Cyan; $dashboardScript = './automation-scripts/0512_Generate-Dashboard.ps1'; if (Test-Path $dashboardScript) { Write-Host '‚úÖ Dashboard script exists' -ForegroundColor Green; $discoveredReports = Get-ChildItem -Path '{{reportsPath}}' -Filter 'TestReport-*.json' -ErrorAction SilentlyContinue; Write-Host \"‚úÖ Dashboard would discover $($discoveredReports.Count) reports in {{reportsPath}}\" -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è Dashboard script not found' -ForegroundColor Yellow }",
      "continueOnError": true
    },
    {
      "name": "Summary",
      "description": "Display validation summary",
      "script": "Write-Host '`n========================================' -ForegroundColor Cyan; Write-Host 'üìä Phase 1 Validation Summary' -ForegroundColor Cyan; Write-Host '========================================' -ForegroundColor Cyan; Write-Host '`n‚úÖ Test discovery validated' -ForegroundColor Green; Write-Host '‚úÖ Report format validated' -ForegroundColor Green; Write-Host '‚úÖ Dashboard compatibility confirmed' -ForegroundColor Green; Write-Host '`nüéØ Next Steps:' -ForegroundColor Yellow; Write-Host '  1. Trigger CI workflow to execute all tests' -ForegroundColor White; Write-Host '  2. Verify aggregated report in workflow artifacts' -ForegroundColor White; Write-Host '  3. Check GitHub Pages for published reports' -ForegroundColor White; Write-Host '  4. Validate dashboard displays all results' -ForegroundColor White; Write-Host '`n‚ú® Phase 1 validation complete!' -ForegroundColor Green",
      "continueOnError": false
    }
  ]
}
