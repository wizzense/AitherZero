{
  "name": "test-phase1-production",
  "description": "Phase 1: Production-ready comprehensive test execution and reporting",
  "version": "1.0.0",
  "author": "AitherZero Testing Framework - Phase 1 Production",
  "tags": ["testing", "phase1", "production", "ci-cd", "reporting", "dashboard"],
  "requirements": {
    "modules": ["Pester", "PSScriptAnalyzer"],
    "minimumVersion": "7.0",
    "estimatedDuration": "15-30 minutes"
  },
  "variables": {
    "testPath": "./tests",
    "outputPath": "./tests/results",
    "reportsPath": "./reports",
    "minimumCoverage": 70,
    "failOnTestFailure": true,
    "failOnCoverageBelow": false,
    "generateDashboard": true,
    "publishToPages": false,
    "parallelExecution": false,
    "continueOnError": false
  },
  "stages": [
    {
      "name": "Pre-Flight Checks",
      "description": "Validate environment is ready for production test execution",
      "script": "Write-Host 'üöÄ Phase 1 Production Test Execution' -ForegroundColor Cyan; Write-Host '=' -repeat 70 -ForegroundColor Cyan; Write-Host '`n‚úì Validating environment...' -ForegroundColor Yellow; if ($env:CI -or $env:GITHUB_ACTIONS) { Write-Host '‚úÖ Running in CI/CD environment' -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è Running in local environment' -ForegroundColor Yellow }; $psVersion = $PSVersionTable.PSVersion; Write-Host \"‚úÖ PowerShell Version: $psVersion\" -ForegroundColor Green; if ($psVersion.Major -lt 7) { Write-Host '‚ùå PowerShell 7+ required' -ForegroundColor Red; exit 1 }",
      "continueOnError": false
    },
    {
      "name": "Clean Previous Results",
      "description": "Remove previous test results to ensure clean state",
      "script": "Write-Host '`nüßπ Cleaning previous results...' -ForegroundColor Cyan; $paths = @('{{outputPath}}', '{{reportsPath}}'); foreach ($path in $paths) { if (Test-Path $path) { Get-ChildItem -Path $path -Filter '*.xml' -ErrorAction SilentlyContinue | Remove-Item -Force; Get-ChildItem -Path $path -Filter 'TestReport-*.json' -ErrorAction SilentlyContinue | Remove-Item -Force; Write-Host \"‚úÖ Cleaned: $path\" -ForegroundColor Green } else { New-Item -ItemType Directory -Path $path -Force | Out-Null; Write-Host \"‚úÖ Created: $path\" -ForegroundColor Green } }",
      "continueOnError": false
    },
    {
      "name": "Test Discovery",
      "description": "Discover and count all test files",
      "script": "Write-Host '`nüìã Discovering test files...' -ForegroundColor Cyan; $unitTests = @(Get-ChildItem -Path './tests/unit' -Filter '*.Tests.ps1' -Recurse -ErrorAction SilentlyContinue); $integrationTests = @(Get-ChildItem -Path './tests/integration' -Filter '*.Tests.ps1' -Recurse -ErrorAction SilentlyContinue); $total = $unitTests.Count + $integrationTests.Count; Write-Host \"  Unit Tests: $($unitTests.Count)\" -ForegroundColor White; Write-Host \"  Integration Tests: $($integrationTests.Count)\" -ForegroundColor White; Write-Host \"  Total: $total\" -ForegroundColor White; if ($total -eq 0) { Write-Host '‚ùå No test files found!' -ForegroundColor Red; exit 1 }; if ($total -lt 200) { Write-Host '‚ö†Ô∏è Warning: Expected ~290 test files, found ' + $total -ForegroundColor Yellow }; Write-Host \"‚úÖ Discovered $total test files\" -ForegroundColor Green",
      "continueOnError": false
    },
    {
      "name": "Install Testing Tools",
      "description": "Ensure all required testing tools are installed",
      "sequence": ["0400"],
      "continueOnError": false
    },
    {
      "name": "Syntax Validation",
      "description": "Validate PowerShell syntax before running tests",
      "sequence": ["0407"],
      "variables": {
        "All": true,
        "ExcludePaths": ["legacy-to-migrate", ".archive"]
      },
      "continueOnError": false
    },
    {
      "name": "Execute Unit Tests",
      "description": "Run all unit tests with coverage reporting",
      "sequence": ["0402"],
      "variables": {
        "OutputPath": "{{outputPath}}",
        "NoCoverage": false,
        "PassThru": true,
        "CI": true
      },
      "continueOnError": "{{continueOnError:=false}}"
    },
    {
      "name": "Execute Integration Tests",
      "description": "Run all integration tests",
      "sequence": ["0403"],
      "variables": {
        "OutputPath": "{{outputPath}}",
        "PassThru": true,
        "IncludeE2E": false
      },
      "continueOnError": "{{continueOnError:=false}}"
    },
    {
      "name": "Code Quality Analysis",
      "description": "Run PSScriptAnalyzer for code quality checks",
      "sequence": ["0404"],
      "variables": {
        "OutputPath": "{{outputPath}}",
        "ExcludePaths": ["tests", "legacy-to-migrate", ".archive", "examples"]
      },
      "continueOnError": true
    },
    {
      "name": "Aggregate Test Results",
      "description": "Combine all test results into unified report",
      "script": "Write-Host '`nüìä Aggregating test results...' -ForegroundColor Cyan; $outputPath = '{{outputPath}}'; $reportsPath = '{{reportsPath}}'; $testReports = Get-ChildItem -Path $outputPath -Filter 'TestReport-*.json' -ErrorAction SilentlyContinue; if ($testReports.Count -eq 0) { Write-Host '‚ö†Ô∏è No TestReport files found' -ForegroundColor Yellow; exit 0 }; $aggregated = @{ Timestamp = (Get-Date).ToString('o'); TestResults = @{ Summary = @{ Total = 0; Passed = 0; Failed = 0; Skipped = 0 }; ByType = @{ Unit = @{ Total = 0; Passed = 0; Failed = 0; Skipped = 0 }; Integration = @{ Total = 0; Passed = 0; Failed = 0; Skipped = 0 } } }; Workflow = @{ Environment = if ($env:GITHUB_ACTIONS) { 'GitHub Actions' } elseif ($env:CI) { 'CI' } else { 'Local' }; Timestamp = (Get-Date).ToString('o') } }; foreach ($file in $testReports) { try { $report = Get-Content $file.FullName -Raw | ConvertFrom-Json; $testType = $report.TestType; if ($testType -and $report.TotalCount) { $aggregated.TestResults.Summary.Total += $report.TotalCount; $aggregated.TestResults.Summary.Passed += $report.PassedCount; $aggregated.TestResults.Summary.Failed += $report.FailedCount; $aggregated.TestResults.Summary.Skipped += $report.SkippedCount; if ($aggregated.TestResults.ByType.$testType) { $aggregated.TestResults.ByType.$testType.Total += $report.TotalCount; $aggregated.TestResults.ByType.$testType.Passed += $report.PassedCount; $aggregated.TestResults.ByType.$testType.Failed += $report.FailedCount; $aggregated.TestResults.ByType.$testType.Skipped += $report.SkippedCount } } } catch { Write-Warning \"Failed to parse: $($file.Name)\" } }; $timestamp = Get-Date -Format 'yyyyMMdd-HHmmss'; $aggregatedPath = Join-Path $reportsPath \"TestReport-Aggregated-$timestamp.json\"; if (-not (Test-Path $reportsPath)) { New-Item -ItemType Directory -Path $reportsPath -Force | Out-Null }; $aggregated | ConvertTo-Json -Depth 10 | Set-Content -Path $aggregatedPath; Write-Host \"‚úÖ Aggregated report saved: $aggregatedPath\" -ForegroundColor Green; Write-Host \"`nüìà Results:\" -ForegroundColor Cyan; Write-Host \"  Total Tests: $($aggregated.TestResults.Summary.Total)\" -ForegroundColor White; Write-Host \"  ‚úÖ Passed: $($aggregated.TestResults.Summary.Passed)\" -ForegroundColor Green; Write-Host \"  ‚ùå Failed: $($aggregated.TestResults.Summary.Failed)\" -ForegroundColor $(if ($aggregated.TestResults.Summary.Failed -gt 0) { 'Red' } else { 'Green' }); Write-Host \"  ‚è≠Ô∏è Skipped: $($aggregated.TestResults.Summary.Skipped)\" -ForegroundColor Yellow; if ('{{failOnTestFailure}}' -eq 'true' -and $aggregated.TestResults.Summary.Failed -gt 0) { Write-Host \"`n‚ùå Tests failed - exiting with error\" -ForegroundColor Red; exit 1 }",
      "continueOnError": false
    },
    {
      "name": "Generate Dashboard",
      "description": "Generate comprehensive test dashboard",
      "sequence": ["0512"],
      "variables": {
        "ReportsPath": "{{reportsPath}}",
        "OutputFormat": "HTML,JSON"
      },
      "continueOnError": true,
      "condition": "{{generateDashboard:=true}} -eq $true"
    },
    {
      "name": "Coverage Analysis",
      "description": "Analyze code coverage metrics",
      "script": "Write-Host '`nüìä Coverage Analysis...' -ForegroundColor Cyan; $coverageFiles = Get-ChildItem -Path '{{outputPath}}' -Filter 'Coverage-*.xml' -ErrorAction SilentlyContinue; if ($coverageFiles.Count -gt 0) { Write-Host \"‚úÖ Found $($coverageFiles.Count) coverage reports\" -ForegroundColor Green; $minimumCoverage = [int]'{{minimumCoverage}}'; Write-Host \"  Minimum required: $minimumCoverage%\" -ForegroundColor White } else { Write-Host '‚ö†Ô∏è No coverage reports found' -ForegroundColor Yellow }",
      "continueOnError": true
    },
    {
      "name": "Production Summary",
      "description": "Display comprehensive production test summary",
      "script": "Write-Host '`n' + ('=' -repeat 70) -ForegroundColor Cyan; Write-Host 'üìä PHASE 1 PRODUCTION TEST SUMMARY' -ForegroundColor Cyan; Write-Host ('=' -repeat 70) -ForegroundColor Cyan; $aggregatedFiles = Get-ChildItem -Path '{{reportsPath}}' -Filter 'TestReport-Aggregated-*.json' -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1; if ($aggregatedFiles) { $report = Get-Content $aggregatedFiles.FullName -Raw | ConvertFrom-Json; Write-Host '`n‚úÖ Test Execution Complete' -ForegroundColor Green; Write-Host '`nüìà Overall Results:' -ForegroundColor White; Write-Host \"  Total Tests Executed: $($report.TestResults.Summary.Total)\" -ForegroundColor White; $passRate = if ($report.TestResults.Summary.Total -gt 0) { [math]::Round(($report.TestResults.Summary.Passed / $report.TestResults.Summary.Total) * 100, 2) } else { 0 }; Write-Host \"  Pass Rate: $passRate%\" -ForegroundColor $(if ($passRate -ge 90) { 'Green' } elseif ($passRate -ge 70) { 'Yellow' } else { 'Red' }); Write-Host \"  ‚úÖ Passed: $($report.TestResults.Summary.Passed)\" -ForegroundColor Green; Write-Host \"  ‚ùå Failed: $($report.TestResults.Summary.Failed)\" -ForegroundColor $(if ($report.TestResults.Summary.Failed -gt 0) { 'Red' } else { 'Green' }); Write-Host \"  ‚è≠Ô∏è Skipped: $($report.TestResults.Summary.Skipped)\" -ForegroundColor Yellow; Write-Host '`nüìã By Test Type:' -ForegroundColor White; Write-Host \"  Unit Tests: $($report.TestResults.ByType.Unit.Total) ($($report.TestResults.ByType.Unit.Passed) passed)\" -ForegroundColor White; Write-Host \"  Integration Tests: $($report.TestResults.ByType.Integration.Total) ($($report.TestResults.ByType.Integration.Passed) passed)\" -ForegroundColor White; Write-Host '`nüìÅ Artifacts Generated:' -ForegroundColor White; Write-Host \"  Test Results: {{outputPath}}\" -ForegroundColor Gray; Write-Host \"  Reports: {{reportsPath}}\" -ForegroundColor Gray; Write-Host \"  Aggregated Report: $($aggregatedFiles.Name)\" -ForegroundColor Gray; if ($report.TestResults.Summary.Failed -eq 0) { Write-Host '`nüéâ All tests passed! Production ready.' -ForegroundColor Green } else { Write-Host '`n‚ö†Ô∏è Some tests failed. Review failures before deployment.' -ForegroundColor Yellow }; Write-Host '`n' + ('=' -repeat 70) -ForegroundColor Cyan } else { Write-Host '`n‚ö†Ô∏è No aggregated report found' -ForegroundColor Yellow }",
      "continueOnError": false
    }
  ]
}
