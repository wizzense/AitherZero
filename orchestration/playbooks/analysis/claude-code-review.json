{
  "Name": "claude-code-review",
  "Description": "AI-powered comprehensive code review and quality assurance",
  "Version": "1.0",
  "Created": "2025-01-08T00:00:00Z",
  "Tags": ["claude-code", "review", "quality", "security", "ai-assisted"],
  "Triggers": {
    "claude_hooks": ["post-tool-use"],
    "file_events": ["code_modified", "commit_made"],
    "git_events": ["pre_commit", "pre_push"]
  },
  "Stages": [
    {
      "Name": "Syntax and Style Validation",
      "Description": "Validate PowerShell syntax and coding standards",
      "Sequence": ["0407", "0404"],
      "ContinueOnError": false,
      "Variables": {
        "StrictMode": true,
        "OutputFormat": "JSON,SARIF",
        "FailOnWarnings": false
      },
      "SuccessCriteria": {
        "MaxErrors": 0,
        "MaxWarnings": 10
      }
    },
    {
      "Name": "Security Analysis",
      "Description": "Scan for security vulnerabilities and compliance issues",
      "Sequence": ["0523"],
      "Variables": {
        "DeepScan": true,
        "ComplianceChecks": true,
        "OutputFormat": "JSON"
      },
      "SuccessCriteria": {
        "MaxCriticalIssues": 0,
        "MaxHighIssues": 2
      }
    },
    {
      "Name": "Code Quality Assessment",
      "Description": "Analyze code complexity, maintainability, and tech debt",
      "Sequence": ["0522"],
      "Variables": {
        "ComplexityThreshold": 10,
        "MaintainabilityIndex": 70,
        "TechDebtScore": 80
      }
    },
    {
      "Name": "Test Coverage Analysis",
      "Description": "Ensure adequate test coverage for modified code",
      "Sequence": ["0402", "0408"],
      "Conditional": "$(TestsAvailable) -eq $true",
      "Variables": {
        "MinCoveragePercent": 80,
        "CoverageFormat": "Cobertura,JaCoCo",
        "FailOnLowCoverage": false
      }
    },
    {
      "Name": "Documentation Review",
      "Description": "Validate documentation completeness and accuracy",
      "Sequence": ["0521"],
      "Variables": {
        "CheckCommentBasedHelp": true,
        "ValidateExamples": true,
        "DocumentationCoverage": 90
      }
    },
    {
      "Name": "Performance Impact Analysis",
      "Description": "Assess performance implications of code changes",
      "Sequence": ["0405"],
      "Conditional": "$(PerformanceTestsEnabled) -eq $true",
      "ContinueOnError": true,
      "Variables": {
        "BenchmarkComparison": true,
        "MemoryProfiler": true,
        "PerformanceBudgets": true
      }
    }
  ],
  "PostExecution": {
    "Notifications": [
      {
        "Type": "console",
        "Message": "Code review completed. Check reports for detailed findings.",
        "Conditional": "$(OverallSuccess) -eq $true"
      },
      {
        "Type": "console", 
        "Message": "Code review found issues requiring attention. Review the reports.",
        "Level": "Warning",
        "Conditional": "$(CriticalIssues) -gt 0"
      }
    ],
    "TriggerScripts": ["0501"],
    "GenerateReports": {
      "Format": ["HTML", "JSON", "Markdown"],
      "IncludeTrends": true,
      "CompareToPrevious": true
    },
    "SetVariables": {
      "LAST_REVIEW_SCORE": "$(OverallScore)",
      "REVIEW_TIMESTAMP": "$(ExecutionTime)"
    }
  },
  "AIAssistance": {
    "EnabledFor": [
      "code_analysis",
      "security_review", 
      "documentation_check",
      "best_practices"
    ],
    "PromptTemplates": {
      "security_review": "Analyze this PowerShell code for security vulnerabilities, focusing on credential handling, input validation, and execution safety.",
      "code_quality": "Review this code for PowerShell best practices, maintainability, and performance considerations.",
      "documentation": "Evaluate the completeness and accuracy of this code's documentation and suggest improvements."
    }
  },
  "Profile": "Standard",
  "Prerequisites": {
    "MinPowerShellVersion": "7.0",
    "RequiredModules": ["Pester", "PSScriptAnalyzer"],
    "RequiredSpace": "1GB"
  },
  "SuccessCriteria": {
    "OverallScore": 85,
    "MaxCriticalIssues": 0,
    "MaxHighIssues": 3,
    "MinTestCoverage": 75,
    "MinDocumentationCoverage": 80
  },
  "OnError": {
    "Rollback": false,
    "ContinueWithWarnings": true,
    "LogLevel": "Detailed",
    "CreateIssue": true,
    "NotifyUser": true
  },
  "Integrations": {
    "GitHub": {
      "CreatePRComment": true,
      "UpdateChecks": true,
      "RequireApproval": "$(CriticalIssues) -eq 0"
    },
    "Slack": {
      "NotifyChannel": "#code-review",
      "Conditional": "$(CriticalIssues) -gt 0"
    }
  }
}