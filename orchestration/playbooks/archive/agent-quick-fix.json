{
  "name": "agent-quick-fix",
  "description": "Rapid fix and validation workflow for hotfixes and minor changes",
  "version": "1.0.0",
  "author": "AitherZero AI Optimization",
  "tags": ["hotfix", "quick", "minimal", "ai-optimized"],
  "requirements": {
    "modules": ["TestCacheManager"],
    "minimumVersion": "7.0",
    "estimatedDuration": "30-60 seconds"
  },
  "variables": {
    "validateOnly": false,
    "skipTests": false,
    "useCache": true,
    "minimalOutput": true
  },
  "stages": [
    {
      "name": "Quick Syntax Check",
      "description": "Validate PowerShell syntax only",
      "inline": {
        "script": "$files = Get-ChildItem -Path . -Include '*.ps1','*.psm1' -Recurse | Where-Object { $_.LastWriteTime -gt (Get-Date).AddMinutes(-10) }; $errors = 0; foreach ($file in $files) { $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $file.FullName -Raw), [ref]$null); if ($?) { Write-Host \"‚úÖ $($file.Name)\" } else { Write-Host \"‚ùå $($file.Name)\"; $errors++ } }; if ($errors -eq 0) { Write-Host \"`n‚úÖ All files valid\" } else { throw \"$errors files have syntax errors\" }"
      },
      "continueOnError": false
    },
    {
      "name": "Cached Test Check",
      "description": "Check if recent tests passed",
      "inline": {
        "script": "$cache = Get-ChildItem ./tests/results -Filter '*Summary*.json' -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1; if ($cache -and $cache.LastWriteTime -gt (Get-Date).AddMinutes(-5)) { $result = Get-Content $cache.FullName | ConvertFrom-Json; Write-Host \"üíæ Recent test results: Passed=$($result.Passed), Failed=$($result.Failed)\"; if ($result.Failed -eq 0) { Write-Host '‚úÖ Tests passed recently' } else { Write-Warning 'Recent test failures detected' } } else { Write-Host '‚ö†Ô∏è No recent test results' }"
      },
      "continueOnError": true,
      "runIf": "$(SkipTests) -ne $true"
    },
    {
      "name": "Targeted Test",
      "description": "Run only affected tests if needed",
      "sequence": ["0411"],
      "variables": {
        "UseCache": true,
        "Incremental": true,
        "AIOutput": true,
        "CacheMinutes": 10
      },
      "continueOnError": false,
      "runIf": "$(SkipTests) -ne $true -and $(TestsNeeded) -eq $true"
    },
    {
      "name": "Quick Summary",
      "description": "Display validation status",
      "inline": {
        "script": "Write-Host \"`n‚ö° Quick Fix Validation:\"; Write-Host \"  Syntax: ‚úÖ\"; Write-Host \"  Tests: $(if ($SkipTests) { '‚è≠Ô∏è Skipped' } elseif ($TestsFromCache) { '‚úÖ Cached' } else { '‚úÖ Passed' })\"; Write-Host \"  Ready: ‚úÖ\""
      }
    }
  ],
  "optimization": {
    "fastMode": true,
    "skipNonCritical": true,
    "cacheFirst": true,
    "timeout": 60
  }
}