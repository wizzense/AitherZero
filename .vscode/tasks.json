{
    "version": "2.0.0",
    "tasks": [
        // ========================================
        // Core Testing (5 tasks)
        // ========================================
        {
            "label": "üöÄ Quick Tests - Core Functionality",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "tests/Run-Tests.ps1"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üî• Setup Tests - Installation Validation",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "tests/Run-Tests.ps1", "-Setup"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üéØ All Tests - Comprehensive Validation",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "tests/Run-Tests.ps1", "-All"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üîß CI Tests - Automated Mode",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "tests/Run-Tests.ps1", "-All", "-CI"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üßπ Clean Test Results",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Remove-Item -Path 'tests/results/*', 'logs/test-*' -Force -Recurse -ErrorAction SilentlyContinue; Write-Host 'üßπ Test results cleaned' -ForegroundColor Green"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },

        // ========================================
        // PatchManager v3.0 (4 tasks)
        // ========================================
        {
            "label": "üõ†Ô∏è PatchManager: Quick Fix",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/PatchManager -Force; New-QuickFix -Description '${input:patchDescription}' -Changes { ${input:patchOperation} }"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üöÄ PatchManager: Create Feature",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/PatchManager -Force; New-Feature -Description '${input:patchDescription}' -Changes { ${input:patchOperation} }"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üö® PatchManager: Emergency Hotfix",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/PatchManager -Force; New-Hotfix -Description '${input:patchDescription}' -Changes { ${input:patchOperation} }"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üß† PatchManager: Smart Patch",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/PatchManager -Force; New-Patch -Description '${input:patchDescription}' -Changes { ${input:patchOperation} }"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },

        // ========================================
        // Development Environment (3 tasks)
        // ========================================
        {
            "label": "üîß Setup Development Environment",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./Start-AitherZero.ps1", "-Setup"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üì¶ Import All Modules",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                ". ./aither-core/shared/Find-ProjectRoot.ps1; $projectRoot = Find-ProjectRoot; Get-ChildItem '$projectRoot/aither-core/modules' -Directory | ForEach-Object { Import-Module $_.FullName -Force; Write-Host \"‚úÖ Loaded: $($_.Name)\" -ForegroundColor Green }"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üîç System Diagnostics",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host 'üîç System Information:' -ForegroundColor Cyan; Write-Host \"PowerShell: $($PSVersionTable.PSVersion)\" -ForegroundColor White; Write-Host \"OS: $($PSVersionTable.OS)\" -ForegroundColor White; Write-Host \"Platform: $($PSVersionTable.Platform)\" -ForegroundColor White; . ./aither-core/shared/Find-ProjectRoot.ps1; $projectRoot = Find-ProjectRoot; Write-Host \"Project Root: $projectRoot\" -ForegroundColor White; Write-Host 'üì¶ Module Status:' -ForegroundColor Yellow; Get-ChildItem '$projectRoot/aither-core/modules' -Directory | ForEach-Object { try { Import-Module $_.FullName -Force; Write-Host \"‚úÖ $($_.Name): OK\" -ForegroundColor Green } catch { Write-Host \"‚ùå $($_.Name): Failed\" -ForegroundColor Red } }"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },

        // ========================================
        // Build & Release (4 tasks)
        // ========================================
        {
            "label": "üì¶ Build Windows Package",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./build/Build-Package.ps1", "-Platform", "windows"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üêß Build Linux Package",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./build/Build-Package.ps1", "-Platform", "linux"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üçé Build macOS Package",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./build/Build-Package.ps1", "-Platform", "macos"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üöÄ Create Release",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./release.ps1"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },

        // ========================================
        // OpenTofu Infrastructure (2 tasks)
        // ========================================
        {
            "label": "üó∫Ô∏è OpenTofu Plan",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/OpenTofuProvider -Force; Invoke-OpenTofuPlan"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üèóÔ∏è OpenTofu Apply",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/OpenTofuProvider -Force; Invoke-OpenTofuApply"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },

        // ========================================
        // Code Quality & Analysis (8 tasks)
        // ========================================
        {
            "label": "üîç Code Quality - Full Analysis",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/PSScriptAnalyzerIntegration -Force; Start-DirectoryAudit -Path . -Recurse -UpdateDocumentation"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "PSScriptAnalyzer",
                    "fileLocation": ["relative", "${workspaceFolder}"],
                    "pattern": {
                        "regexp": "^(.*):(\\d+):(\\d+):\\s+(Error|Warning|Information)\\s+(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "severity": 4,
                        "message": 5
                    }
                }
            ],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "‚ö° Code Quality - Changed Files Only",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/PSScriptAnalyzerIntegration -Force; $changedFiles = git diff --name-only HEAD~1 HEAD | Where-Object { $_ -match '\\.(ps1|psm1|psd1)$' }; if ($changedFiles) { $dirs = $changedFiles | ForEach-Object { Split-Path $_ -Parent } | Select-Object -Unique; foreach ($dir in $dirs) { if (Test-Path $dir) { Start-DirectoryAudit -Path $dir -Recurse:$false } } } else { Write-Host 'üìù No PowerShell files changed' -ForegroundColor Yellow }"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "PSScriptAnalyzer",
                    "fileLocation": ["relative", "${workspaceFolder}"],
                    "pattern": {
                        "regexp": "^(.*):(\\d+):(\\d+):\\s+(Error|Warning|Information)\\s+(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "severity": 4,
                        "message": 5
                    }
                }
            ],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üìä Code Quality - Status Overview",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/PSScriptAnalyzerIntegration -Force; Get-AnalysisStatus -Path . -Rollup -Format Summary"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üî¥ Code Quality - Critical Issues Only",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/PSScriptAnalyzerIntegration -Force; Get-AnalysisStatus -Path . -StatusFilter critical -ShowDetails"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üîß Code Quality - Auto Remediation",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/PSScriptAnalyzerIntegration -Force; if (Get-Command 'Invoke-RemediationWorkflow' -ErrorAction SilentlyContinue) { Invoke-RemediationWorkflow -Path . -AutoFix -SafeRulesOnly } else { Write-Host '‚ö†Ô∏è  Remediation workflow not available yet' -ForegroundColor Yellow }"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üéØ Code Quality - Current Module",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/PSScriptAnalyzerIntegration -Force; $currentFile = '${file}'; if ($currentFile -match 'aither-core[/\\\\]modules[/\\\\]([^/\\\\]+)') { $moduleName = $matches[1]; $modulePath = \"./aither-core/modules/$moduleName\"; if (Test-Path $modulePath) { Start-DirectoryAudit -Path $modulePath -ModuleName $moduleName } else { Write-Host \"‚ùå Module path not found: $modulePath\" -ForegroundColor Red } } else { Write-Host '‚ö†Ô∏è  Current file is not in a module directory' -ForegroundColor Yellow }"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "PSScriptAnalyzer",
                    "fileLocation": ["relative", "${workspaceFolder}"],
                    "pattern": {
                        "regexp": "^(.*):(\\d+):(\\d+):\\s+(Error|Warning|Information)\\s+(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "severity": 4,
                        "message": 5
                    }
                }
            ],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üìà Code Quality - Generate Report",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/PSScriptAnalyzerIntegration -Force; $timestamp = Get-Date -Format 'yyyy-MM-dd-HHmm'; Start-DirectoryAudit -Path . -Recurse -ReportFormat HTML -ExportPath \"./quality-report-$timestamp.html\"; Write-Host \"üìÑ Report generated: quality-report-$timestamp.html\" -ForegroundColor Green"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üîç PSScriptAnalyzer - Basic Analysis",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "if (Test-Path './PSScriptAnalyzerSettings.psd1') { Invoke-ScriptAnalyzer -Path . -Recurse -Settings './PSScriptAnalyzerSettings.psd1' } else { Invoke-ScriptAnalyzer -Path . -Recurse -Severity Warning,Error }"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "PSScriptAnalyzer",
                    "fileLocation": ["relative", "${workspaceFolder}"],
                    "pattern": {
                        "regexp": "^(.*):(\\d+):(\\d+):\\s+(Error|Warning|Information)\\s+(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "severity": 4,
                        "message": 5
                    }
                }
            ],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üé´ Code Quality - Test GitHub Issues Integration",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module './aither-core/modules/PSScriptAnalyzerIntegration' -Force; Write-Host 'üß™ Testing GitHub Issues integration...' -ForegroundColor Cyan; $findings = Invoke-ScriptAnalyzer -Path './aither-core/modules/PSScriptAnalyzerIntegration' -Recurse -Settings './PSScriptAnalyzerSettings.psd1' | Select-Object -First 3; if ($findings.Count -gt 0) { Write-Host \"üìã Testing with $($findings.Count) sample findings\" -ForegroundColor White; $result = $findings | New-GitHubIssueFromFinding -DryRun; Write-Host \"‚úÖ Test completed: $($result.CreatedIssues.Count) issues would be created\" -ForegroundColor Green; $result.CreatedIssues | ForEach-Object { Write-Host \"  - $($_.Title)\" -ForegroundColor Gray; Write-Host \"    Labels: $($_.Labels -join ', ')\" -ForegroundColor DarkGray; Write-Host \"    Milestone: $($_.Milestone)\" -ForegroundColor DarkGray } } else { Write-Host '‚úÖ No findings to test with' -ForegroundColor Green }"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "‚úÖ Validate Module Manifests",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Get-ChildItem -Path './aither-core/modules' -Directory | ForEach-Object { $manifestPath = Join-Path $_.FullName \"$($_.Name).psd1\"; if (Test-Path $manifestPath) { Test-ModuleManifest -Path $manifestPath; Write-Host \"‚úÖ $($_.Name) manifest valid\" -ForegroundColor Green } else { Write-Host \"‚ö†Ô∏è $($_.Name) manifest not found\" -ForegroundColor Yellow } }"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üìä Code Coverage Analysis",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "if (Get-Module -Name Pester -ListAvailable) { Invoke-Pester -Path './tests' -CodeCoverage './aither-core/modules/**/*.ps*' -OutputFile './TestResults/coverage.xml' -OutputFormat 'JaCoCo' -PassThru } else { Write-Host '‚ùå Pester module required for coverage analysis' -ForegroundColor Red }"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üîß Pre-Build Validation",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host 'üîç Running pre-build validation...' -ForegroundColor Cyan; pwsh -File './tests/Run-Tests.ps1' -CI; Write-Host 'üì¶ Testing module imports...' -ForegroundColor Yellow; Get-ChildItem -Path './aither-core/modules' -Directory | ForEach-Object { Import-Module $_.FullName -Force -ErrorAction Stop; Write-Host \"‚úì Module $($_.Name) imports successfully\" -ForegroundColor Green }; Write-Host '‚úÖ Pre-build validation completed!' -ForegroundColor Green"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },

        // ========================================
        // Core Utilities (4 tasks)
        // ========================================
        {
            "label": "üöÄ Run AitherZero - Interactive",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./Start-AitherZero.ps1"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "ü§ñ Run AitherZero - Automated",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./Start-AitherZero.ps1", "-Auto"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üëÅÔ∏è Run AitherZero - Preview Mode",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./Start-AitherZero.ps1", "-WhatIf"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üßπ Clean Build Artifacts",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Remove-Item -Path 'build/output/*', 'local-build', 'AitherZero-*-local.*' -Force -Recurse -ErrorAction SilentlyContinue; Write-Host 'üßπ Build artifacts cleaned' -ForegroundColor Green"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },

        // ========================================
        // Comprehensive Validation (10 tasks)
        // ========================================
        {
            "label": "üõ°Ô∏è Validate Everything - Comprehensive Check",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./scripts/validation/Run-ComprehensiveValidation.ps1", "-Scope", "All", "-Pipeline", "CI", "-GenerateReport"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "‚ö° Validate Changed Files - Quick Check",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./scripts/validation/Run-ComprehensiveValidation.ps1", "-Scope", "ChangedFiles", "-AutoFix"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üîß Validate & Fix - Auto-remediation",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./scripts/validation/Run-ComprehensiveValidation.ps1", "-AutoFix", "-GenerateReport"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üéØ Validate Current Module",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "$currentFile = '${file}'; if ($currentFile -match 'aither-core[/\\\\]modules[/\\\\]([^/\\\\]+)') { $moduleName = $matches[1]; & ./scripts/validation/Run-ComprehensiveValidation.ps1 -Scope Module -Target $moduleName } else { Write-Host '‚ö†Ô∏è  Current file is not in a module directory' -ForegroundColor Yellow }"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üìä Generate Validation Dashboard",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./scripts/reporting/Generate-ValidationDashboard.ps1", "-IncludeHistory"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üö® Create Issue from Validation Failures",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./scripts/validation/Run-ComprehensiveValidation.ps1", "-CreateIssues"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üîç Pre-commit Validation",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./.githooks/pre-commit"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üèÉ Quick Validation - CI Pipeline",
            "type": "shell",
            "command": "pwsh",
            "args": ["-File", "./scripts/validation/Run-ComprehensiveValidation.ps1", "-Pipeline", "QuickFix", "-FailFast"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üìà Issue Metrics Report",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/IssueLifecycleManager -Force; Get-IssueMetrics | Format-List"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üîÑ Check & Close Resolved Issues",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module ./aither-core/modules/IssueLifecycleManager -Force; Invoke-IssueResolutionCheck"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },

        // ========================================
        // Comprehensive Validation (7 tasks)
        // ========================================
        {
            "label": "üîç MEGA VALIDATION - All Checks & Fixes",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File", 
                "scripts/validation/Run-ComprehensiveValidation.ps1",
                "-IncludeTests",
                "-GenerateReport",
                "-FixIssues"
            ],
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "‚ö° Quick Validation - Syntax Only",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File", 
                "scripts/validation/Run-ComprehensiveValidation.ps1"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üîß Validate & Fix Issues",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File", 
                "scripts/validation/Run-ComprehensiveValidation.ps1",
                "-FixIssues"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üìã Validate GitHub Actions YAML",
            "type": "shell",
            "command": "yamllint",
            "args": [
                ".github/workflows/*.yml"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üõ°Ô∏è PSScriptAnalyzer - Full Scan",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module PSScriptAnalyzer -Force; Invoke-ScriptAnalyzer -Path . -Recurse -ReportSummary | Format-Table -AutoSize"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üìä Generate Validation Report",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File", 
                "scripts/validation/Run-ComprehensiveValidation.ps1",
                "-GenerateReport"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        },
        {
            "label": "üö¶ Pre-Commit Validation Test",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                ".githooks/pre-commit"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {"cwd": "${workspaceFolder}"}
        }
    ],
    "inputs": [
        {
            "id": "patchDescription",
            "description": "Enter a description for your patch",
            "default": "Update functionality",
            "type": "promptString"
        },
        {
            "id": "patchOperation",
            "description": "Enter PowerShell commands to execute",
            "default": "Write-Host 'Patch operation executed'",
            "type": "promptString"
        }
    ]
}