{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run All Pester Tests",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Invoke-Pester -Configuration (Import-PowerShellDataFile -Path 'tests/config/PesterConfiguration.psd1')"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "Run Specific Module Tests",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "param($ModuleName); Invoke-Pester -Path \"tests/unit/modules/$ModuleName\" -Output Detailed"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "PowerShell Script Analysis",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Invoke-ScriptAnalyzer -Path '${file}' -Settings 'pwsh/PSScriptAnalyzerSettings.psd1' -Recurse"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },        {
            "label": "Setup Development Environment",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "& ./core-runner/setup-test-env.ps1"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "Import All Modules",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Get-ChildItem -Path 'aither-core/modules' -Directory | ForEach-Object { Import-Module $_.FullName -Force -Verbose }"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "OpenTofu Plan",
            "type": "shell",
            "command": "tofu",
            "args": [
                "plan",
                "-out=tfplan"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/opentofu/infrastructure"
            }
        },
        {
            "label": "OpenTofu Apply",
            "type": "shell",
            "command": "tofu",
            "args": [
                "apply",
                "tfplan"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/opentofu/infrastructure"
            }
        },
        {
            "label": "Generate Test Report",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "$config = Import-PowerShellDataFile -Path 'tests/config/PesterConfiguration.psd1'; $config.TestResult.Enabled = $true; Invoke-Pester -Configuration $config"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "Clean Test Results",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Remove-Item -Path 'tests/results/*' -Force -Recurse -ErrorAction SilentlyContinue; Write-Host 'Test results cleaned'"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }        },
        {
            "label": "Validate All Module Manifests",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Get-ChildItem -Path 'aither-core/modules' -Filter '*.psd1' -Recurse | ForEach-Object { Write-Host \"Validating $($_.Name)\"; Test-ModuleManifest $_.FullName }"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🚀 Bulletproof Validation - Quick",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                "tests/Run-BulletproofValidation.ps1",
                "-ValidationLevel",
                "Quick"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🔥 Bulletproof Validation - Standard",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                "tests/Run-BulletproofValidation.ps1",
                "-ValidationLevel",
                "Standard"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🎯 Bulletproof Validation - Complete",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                "tests/Run-BulletproofValidation.ps1",
                "-ValidationLevel",
                "Complete"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "⚡ Bulletproof Validation - Quick (Fail-Fast)",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                "tests/Run-BulletproofValidation.ps1",
                "-ValidationLevel",
                "Quick",
                "-FailFast"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🔧 Bulletproof Validation - CI Mode",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                "tests/Run-BulletproofValidation.ps1",
                "-ValidationLevel",
                "Standard",
                "-CI",
                "-FailFast"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "📊 Bulletproof Validation - Performance Focus",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                "tests/Run-BulletproofValidation.ps1",
                "-ValidationLevel",
                "Complete",
                "-MaxParallelJobs",
                "4"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🧹 Clean Bulletproof Validation Results",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Remove-Item -Path 'tests/results/bulletproof-validation/*', 'logs/bulletproof-validation/*' -Force -Recurse -ErrorAction SilentlyContinue; Write-Host '🧹 Bulletproof validation results cleaned' -ForegroundColor Green"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },        // ========================================
        // PatchManager Core Workflows (Consolidated v2.1 - IMPROVED)
        // ========================================
        {
            "label": "PatchManager: Create Feature Patch",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module '${workspaceFolder}/aither-core/modules/PatchManager/PatchManager.psm1' -Force; Invoke-PatchWorkflow -PatchDescription '${input:patchDescription}' -PatchOperation { ${input:patchOperation} } -CreatePR -DryRun"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "PatchManager: Quick Patch with Tests",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module '${workspaceFolder}/aither-core/modules/PatchManager/PatchManager.psm1' -Force; Invoke-PatchWorkflow -PatchDescription '${input:patchDescription}' -PatchOperation { ${input:patchOperation} } -TestCommands @('${input:testCommand}') -CreatePR"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "PatchManager: Create Issue Only",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module '${workspaceFolder}/aither-core/modules/PatchManager/PatchManager.psm1' -Force; New-PatchIssue -Description '${input:patchDescription}' -Priority '${input:priority}' -DryRun"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "PatchManager: Quick Local Fix (No Issue)",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module '${workspaceFolder}/aither-core/modules/PatchManager/PatchManager.psm1' -Force; Invoke-PatchWorkflow -PatchDescription '${input:patchDescription}' -PatchOperation { ${input:patchOperation} } -CreateIssue:$false"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "PatchManager: Emergency Rollback",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module '${workspaceFolder}/aither-core/modules/PatchManager/PatchManager.psm1' -Force; Invoke-PatchRollback -RollbackType 'LastCommit' -CreateBackup -DryRun"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "PatchManager: Validate All Modules",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module '${workspaceFolder}/aither-core/modules/PatchManager/PatchManager.psm1' -Force; Invoke-PatchWorkflow -PatchDescription 'Validate all modules' -PatchOperation { Get-ChildItem 'aither-core/modules' -Directory | ForEach-Object { Import-Module $_.FullName -Force -Verbose } } -TestCommands @('Get-Module | Where-Object { $_.Path -like \"*aither-core/modules*\" }') -DryRun"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        // ========================================
        // Testing Workflows
        // ========================================
        {
            "label": "Tests: Run Bulletproof Validation",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                "./tests/Run-BulletproofValidation.ps1",
                "-ValidationLevel",
                "${input:validationLevel}"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "Tests: Run Non-Interactive Validation",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                "./test-noninteractive-fix.ps1",
                "-TestMode",
                "All"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "Tests: Intelligent Test Discovery",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                "./tests/Invoke-IntelligentTests.ps1",
                "-TestType",
                "${input:testType}",
                "-Severity",
                "Standard"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        // ========================================
        // Core Runner Workflows
        // ========================================
        {
            "label": "CoreRunner: Non-Interactive with Scripts",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                "./aither-core/core-runner.ps1",
                "-NonInteractive",
                "-Scripts",
                "${input:scriptNames}",
                "-Verbosity",
                "detailed"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "CoreRunner: Auto Mode with WhatIf",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-File",
                "./aither-core/core-runner.ps1",
                "-NonInteractive",
                "-Auto",
                "-WhatIf",
                "-Verbosity",
                "detailed"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }        },
        // ========================================
        // Development Workflows (Updated for PatchManager v2.1 - IMPROVED)
        // ========================================
        {
            "label": "Dev: Git Operations (Legacy - Not Recommended)",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Warning 'This function has been archived. Use Invoke-PatchWorkflow instead.'; Write-Host 'Try: Invoke-PatchWorkflow -PatchDescription \"Your description\" -PatchOperation { # Your changes }'"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "Dev: Use New PatchManager Functions",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host 'NEW PATCHMANAGER CORE FUNCTIONS (v2.1 - IMPROVED):' -ForegroundColor Green; Write-Host '1. Invoke-PatchWorkflow - Main entry point (auto-commits, creates issues by default)' -ForegroundColor Cyan; Write-Host '2. New-PatchIssue - Create issues' -ForegroundColor Cyan; Write-Host '3. New-PatchPR - Create PRs' -ForegroundColor Cyan; Write-Host '4. Invoke-PatchRollback - Rollback operations' -ForegroundColor Cyan; Write-Host 'KEY IMPROVEMENTS: Auto-commit dirty trees, issue creation by default, single-step workflow' -ForegroundColor Yellow"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🔍 Test Copilot Instructions Setup",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host '🔍 Testing Copilot instruction file setup...' -ForegroundColor Cyan; $instructionFiles = @('.github/copilot-instructions.md', '.github/instructions/modules.instructions.md', '.github/instructions/testing-workflows.instructions.md', '.github/instructions/patchmanager-workflows.instructions.md'); foreach ($file in $instructionFiles) { if (Test-Path $file) { Write-Host \"✅ Found: $file\" -ForegroundColor Green } else { Write-Host \" FAILMissing: $file\" -ForegroundColor Red } }; $promptFiles = Get-ChildItem '.github/prompts' -Filter '*.prompt.md' -ErrorAction SilentlyContinue; if ($promptFiles) { Write-Host \"✅ Found $($promptFiles.Count) prompt files\" -ForegroundColor Green } else { Write-Host \" FAILNo prompt files found\" -ForegroundColor Red }"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        // ========================================
        // Unicode/Emoji Sanitization
        // ========================================
        {
            "label": "PatchManager: Sanitize Unicode/Emoji",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module '${workspaceFolder}/aither-core/modules/PatchManager/PatchManager.psm1' -Force; $result = Invoke-UnicodeSanitizer -DryRun; Write-Host 'Sanitization complete. Run without -DryRun to apply changes.' -ForegroundColor Green"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "PatchManager: Apply Unicode/Emoji Sanitization",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module '${workspaceFolder}/aither-core/modules/PatchManager/PatchManager.psm1' -Force; $result = Invoke-UnicodeSanitizer; Write-Host \"Sanitized $($result.FilesModified) files, removed $($result.CharactersRemoved) characters\" -ForegroundColor Green"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "📚 Documentation: Generate/Update All Docs",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host '📚 Generating comprehensive documentation...' -ForegroundColor Cyan; Import-Module './aither-core/modules/PatchManager/PatchManager.psm1' -Force; Update-RepositoryDocumentation; Write-Host '✅ Documentation updated successfully' -ForegroundColor Green"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🏗️ Architecture: Validate Complete System",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "$ErrorActionPreference = 'Stop'; Write-Host '🏗️ Validating complete system architecture...' -ForegroundColor Cyan; . './aither-core/shared/Find-ProjectRoot.ps1'; $projectRoot = Find-ProjectRoot; Write-Host \"✅ Project root: $projectRoot\" -ForegroundColor Green; Get-ChildItem '$projectRoot/aither-core/modules' -Directory | ForEach-Object { Write-Host \"📦 Validating module: $($_.Name)\" -ForegroundColor Yellow; Import-Module $_.FullName -Force -ErrorAction Stop; Write-Host \"✅ Module $($_.Name) loaded successfully\" -ForegroundColor Green }; Write-Host '🎯 All modules validated successfully!' -ForegroundColor Green"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🔧 Development: Setup Complete Environment",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host '🔧 Setting up complete development environment...' -ForegroundColor Cyan; . './aither-core/shared/Find-ProjectRoot.ps1'; $projectRoot = Find-ProjectRoot; $env:PROJECT_ROOT = $projectRoot; Write-Host \"✅ PROJECT_ROOT set to: $projectRoot\" -ForegroundColor Green; Write-Host '📦 Loading all modules...' -ForegroundColor Yellow; Get-ChildItem '$projectRoot/aither-core/modules' -Directory | ForEach-Object { Import-Module $_.FullName -Force; Write-Host \"✅ Loaded: $($_.Name)\" -ForegroundColor Green }; Write-Host '🧪 Running quick validation...' -ForegroundColor Yellow; pwsh -File './tests/Run-BulletproofValidation.ps1' -ValidationLevel 'Quick'; Write-Host '🎉 Development environment ready!' -ForegroundColor Green"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🌐 Repository: Update All Cross-Fork Configs",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host '🌐 Updating cross-fork repository configurations...' -ForegroundColor Cyan; Import-Module './aither-core/modules/PatchManager/PatchManager.psm1' -Force; $repoInfo = Get-GitRepositoryInfo; Write-Host \"📍 Current repository: $($repoInfo.GitHubRepo) ($($repoInfo.Type))\" -ForegroundColor Yellow; Write-Host \"🔗 Fork chain: $($repoInfo.ForkChain.Count) repositories\" -ForegroundColor Yellow; Update-RepositoryDocumentation; Write-Host '✅ All repository configurations updated!' -ForegroundColor Green"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🎯 Testing: Intelligent Discovery and Execution",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host '🎯 Running intelligent test discovery and execution...' -ForegroundColor Cyan; if (Test-Path './tests/Invoke-IntelligentTests.ps1') { pwsh -File './tests/Invoke-IntelligentTests.ps1' -TestType 'All' -Severity 'Standard' } else { Write-Host '⚠️ Intelligent test discovery not found, running standard tests...' -ForegroundColor Yellow; pwsh -File './tests/Run-BulletproofValidation.ps1' -ValidationLevel 'Standard' }; Write-Host '✅ Testing completed!' -ForegroundColor Green"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🚀 Release: Pre-Release Validation",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host '🚀 Running comprehensive pre-release validation...' -ForegroundColor Cyan; Write-Host '1️⃣ Architecture validation...' -ForegroundColor Yellow; . './aither-core/shared/Find-ProjectRoot.ps1'; $projectRoot = Find-ProjectRoot; Get-ChildItem '$projectRoot/aither-core/modules' -Directory | ForEach-Object { Import-Module $_.FullName -Force }; Write-Host '2️⃣ Complete test suite...' -ForegroundColor Yellow; pwsh -File './tests/Run-BulletproofValidation.ps1' -ValidationLevel 'Complete'; Write-Host '3️⃣ Documentation update...' -ForegroundColor Yellow; Import-Module './aither-core/modules/PatchManager/PatchManager.psm1' -Force; Update-RepositoryDocumentation; Write-Host '✅ Pre-release validation completed!' -ForegroundColor Green"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🔍 Debug: Comprehensive System Diagnostics",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "$ErrorActionPreference = 'Continue'; Write-Host '🔍 Running comprehensive system diagnostics...' -ForegroundColor Cyan; Write-Host '📊 System Information:' -ForegroundColor Yellow; Write-Host \"PowerShell Version: $($PSVersionTable.PSVersion)\" -ForegroundColor White; Write-Host \"OS: $($PSVersionTable.OS)\" -ForegroundColor White; Write-Host \"Platform: $($PSVersionTable.Platform)\" -ForegroundColor White; Write-Host '📁 Project Structure:' -ForegroundColor Yellow; . './aither-core/shared/Find-ProjectRoot.ps1'; $projectRoot = Find-ProjectRoot; Write-Host \"Project Root: $projectRoot\" -ForegroundColor White; Write-Host '📦 Module Status:' -ForegroundColor Yellow; Get-ChildItem '$projectRoot/aither-core/modules' -Directory | ForEach-Object { try { Import-Module $_.FullName -Force; Write-Host \"✅ $($_.Name): OK\" -ForegroundColor Green } catch { Write-Host \"❌ $($_.Name): $($_.Exception.Message)\" -ForegroundColor Red } }; Write-Host '🌐 Repository Information:' -ForegroundColor Yellow; try { Import-Module './aither-core/modules/PatchManager/PatchManager.psm1' -Force; $repoInfo = Get-GitRepositoryInfo; Write-Host \"Repository: $($repoInfo.GitHubRepo)\" -ForegroundColor White; Write-Host \"Type: $($repoInfo.Type)\" -ForegroundColor White; Write-Host \"Fork Chain: $($repoInfo.ForkChain.Count) repositories\" -ForegroundColor White } catch { Write-Host \"❌ Repository detection failed: $($_.Exception.Message)\" -ForegroundColor Red }; Write-Host '🔧 Diagnostics completed!' -ForegroundColor Green"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        }
    ],
    "inputs": [
        {
            "id": "patchDescription",
            "description": "Enter a description for the patch",
            "default": "Automated patch",
            "type": "promptString"
        },
        {
            "id": "patchOperation",
            "description": "Enter the PowerShell operation to perform",
            "default": "Write-Host 'Patch operation'",
            "type": "promptString"
        },
        {
            "id": "validationLevel",
            "description": "Select validation level",
            "default": "Standard",
            "type": "pickString",
            "options": [
                "Quick",
                "Standard",
                "Complete"
            ]
        },
        {
            "id": "testType",
            "description": "Select test type",
            "default": "Smoke",
            "type": "pickString",
            "options": [
                "All",
                "Unit",
                "Integration",
                "Smoke",
                "Module",
                "Script"
            ]
        },
        {
            "id": "scriptNames",
            "description": "Enter script names (comma-separated)",
            "default": "0200_Get-SystemInfo",
            "type": "promptString"
        },
        {
            "id": "taskName",
            "description": "Enter task name for monitoring",
            "default": "Development Task",
            "type": "promptString"
        },
        {
            "id": "scriptBlock",
            "description": "Enter PowerShell script block to execute",
            "default": "Get-Date",
            "type": "promptString"
        },        {
            "id": "functionName",
            "description": "Enter function name for error tracking",
            "default": "MyFunction",
            "type": "promptString"
        },
        {
            "id": "priority",
            "description": "Select priority level",
            "default": "Medium",
            "type": "pickString",
            "options": [
                "Low",
                "Medium",
                "High",
                "Critical"
            ]
        },
        {
            "id": "testCommand",
            "description": "Enter test command to validate changes",
            "default": "Get-Module",
            "type": "promptString"
        }
    ]
}
