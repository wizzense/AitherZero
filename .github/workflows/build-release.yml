name: Build and Release

on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  # Version determination (single job)
  version:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:GITHUB_OUTPUT
          echo "should-build=$shouldBuild" >> $env:GITHUB_OUTPUT

  # Pre-build validation (cross-platform matrix)
  validate:
    name: Pre-Build Validation (${{ matrix.os }})
    runs-on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:GITHUB_ENV

          # Ensure proper path separators for cross-platform compatibility
          if ($IsWindows) {
            $env:PATH_SEPARATOR = ";"
          } else {
            $env:PATH_SEPARATOR = ":"
          }

          Write-Host "‚úì Environment initialized for ${{ matrix.os }}" -ForegroundColor Green

      - name: Run cross-platform pre-build validation
        shell: pwsh
        run: |
          Write-Host "Running pre-build validation on ${{ matrix.os }}..." -ForegroundColor Cyan

          # Set error action preference for better error handling
          $ErrorActionPreference = 'Stop'

          try {
            # Quick validation before expensive build process
            if (Test-Path './tests/Run-BulletproofValidation.ps1') {
              Write-Host "Running bulletproof validation..." -ForegroundColor Yellow
              pwsh -File './tests/Run-BulletproofValidation.ps1' -ValidationLevel 'Quick' -CI -FailFast
            } else {
              Write-Host "No bulletproof validation found, running basic checks" -ForegroundColor Yellow

              # Basic module import test with cross-platform path handling
              if (Test-Path './aither-core/modules') {
                $modules = Get-ChildItem -Path './aither-core/modules' -Directory
                foreach ($module in $modules) {
                  try {
                    Write-Host "Testing module: $($module.Name)" -ForegroundColor Cyan
                    Import-Module $module.FullName -Force -ErrorAction Stop
                    Write-Host "‚úì Module $($module.Name) imports successfully" -ForegroundColor Green
                  } catch {
                    Write-Error "Module $($module.Name) failed to import: $($_.Exception.Message)"
                    exit 1
                  }
                }
              }
            }

            Write-Host "‚úì Pre-build validation completed successfully on ${{ matrix.os }}" -ForegroundColor Green

          } catch {
            Write-Error "Pre-build validation failed on ${{ matrix.os }}: $($_.Exception.Message)"
            exit 1
          }

  # Cross-platform build matrix
  build:
    name: Build (${{ matrix.os }})
    runs-on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version.outputs.version }}
          release_name: AitherZero v${{ needs.version.outputs.version }}
          body: |
            # AitherZero v${{ needs.version.outputs.version }}

            ## üöÄ Cross-Platform Infrastructure Automation Framework

            This release includes pre-built packages for Windows, Linux, and macOS.

            ### üì¶ Installation

            1. Download the appropriate package for your platform:
               - **Windows**: `AitherZero-${{ needs.version.outputs.version }}-windows.zip`
               - **Linux**: `AitherZero-${{ needs.version.outputs.version }}-linux.tar.gz`
               - **macOS**: `AitherZero-${{ needs.version.outputs.version }}-macos.tar.gz`

            2. Extract the package to your desired directory

            3. Run the startup script:
               - **Windows**: Double-click `AitherZero.bat` or run from PowerShell
               - **Linux/macOS**: Run `./aitherzero.sh` from terminal

            ### ‚úÖ Requirements

            - PowerShell 7.0 or later
            - Git (for lab automation features)
            - OpenTofu/Terraform (for infrastructure features)

            ### üîê Security

            All packages include SHA256 checksums for verification. Download the checksums file and verify your package:

            ```bash
            # Windows (PowerShell)
            Get-FileHash AitherZero-${{ needs.version.outputs.version }}-windows.zip -Algorithm SHA256

            # Linux/macOS
            sha256sum AitherZero-${{ needs.version.outputs.version }}-linux.tar.gz
            ```

            ### üìã What's Included

            - Complete PowerShell-based automation framework
            - Cross-platform lab automation tools
            - OpenTofu/Terraform infrastructure templates
            - Comprehensive testing and validation framework
            - Modular architecture with extensible components

            ### üõ†Ô∏è Quick Start

            After installation, run the startup script to access the interactive menu or use non-interactive mode:

            ```bash
            # Interactive mode
            ./aitherzero.sh

            # Non-interactive with specific scripts
            ./aitherzero.sh -NonInteractive -Scripts "script1,script2" -Auto
            ```

            For detailed documentation, see the [project repository](https://github.com/wizzense/AitherZero).

            ---

            **Build Information:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-release validation
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: [version, validate, build, release]
    if: needs.release.result == 'success' && needs.version.outputs.version != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate release
        shell: pwsh
        run: |
          $version = "${{ needs.version.outputs.version }}"
          
          # Validate version is not empty
          if (-not $version -or $version -eq "") {
            Write-Error "Version is empty or null. Cannot validate release."
            exit 1
          }
          
          Write-Host "Validating release v$version..." -ForegroundColor Cyan

          try {
            # Check if release exists
            $release = gh release view "v$version" --json tagName,assets
            if (-not $release) {
              Write-Error "Release v$version not found"
              exit 1
            }
            
            $releaseData = $release | ConvertFrom-Json

            Write-Host "‚úì Release v$($releaseData.tagName) exists" -ForegroundColor Green
            Write-Host "Assets found: $($releaseData.assets.Count)" -ForegroundColor Cyan

            foreach ($asset in $releaseData.assets) {
              $sizeInMB = [math]::Round($asset.size/1MB, 2)
              Write-Host "  - $($asset.name) ($sizeInMB MB)" -ForegroundColor White
            }

            # Validate expected assets exist
            $expectedPlatforms = @('windows', 'linux', 'macos')
            $expectedAssets = @()

            foreach ($platform in $expectedPlatforms) {
              $extension = if ($platform -eq 'windows') { '.zip' } else { '.tar.gz' }
              $expectedAssets += "AitherZero-$version-$platform$extension"
              $expectedAssets += "AitherZero-$version-$platform$extension.sha256"
            }
            $expectedAssets += "AitherZero-$version-checksums.txt"

            $missingAssets = @()
            foreach ($expected in $expectedAssets) {
              if (-not ($releaseData.assets | Where-Object { name: Build and Release

on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  # Version determination (single job)
  version:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:GITHUB_OUTPUT
          echo "should-build=$shouldBuild" >> $env:GITHUB_OUTPUT

  # Pre-build validation (cross-platform matrix)
  validate:
    name: Pre-Build Validation (${{ matrix.os }})
    runs-on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:GITHUB_ENV

          # Ensure proper path separators for cross-platform compatibility
          if ($IsWindows) {
            $env:PATH_SEPARATOR = ";"
          } else {
            $env:PATH_SEPARATOR = ":"
          }

          Write-Host "‚úì Environment initialized for ${{ matrix.os }}" -ForegroundColor Green

      - name: Run cross-platform pre-build validation
        shell: pwsh
        run: |
          Write-Host "Running pre-build validation on ${{ matrix.os }}..." -ForegroundColor Cyan

          # Set error action preference for better error handling
          $ErrorActionPreference = 'Stop'

          try {
            # Quick validation before expensive build process
            if (Test-Path './tests/Run-BulletproofValidation.ps1') {
              Write-Host "Running bulletproof validation..." -ForegroundColor Yellow
              pwsh -File './tests/Run-BulletproofValidation.ps1' -ValidationLevel 'Quick' -CI -FailFast
            } else {
              Write-Host "No bulletproof validation found, running basic checks" -ForegroundColor Yellow

              # Basic module import test with cross-platform path handling
              if (Test-Path './aither-core/modules') {
                $modules = Get-ChildItem -Path './aither-core/modules' -Directory
                foreach ($module in $modules) {
                  try {
                    Write-Host "Testing module: $($module.Name)" -ForegroundColor Cyan
                    Import-Module $module.FullName -Force -ErrorAction Stop
                    Write-Host "‚úì Module $($module.Name) imports successfully" -ForegroundColor Green
                  } catch {
                    Write-Error "Module $($module.Name) failed to import: $($_.Exception.Message)"
                    exit 1
                  }
                }
              }
            }

            Write-Host "‚úì Pre-build validation completed successfully on ${{ matrix.os }}" -ForegroundColor Green

          } catch {
            Write-Error "Pre-build validation failed on ${{ matrix.os }}: $($_.Exception.Message)"
            exit 1
          }

  # Cross-platform build matrix
  build:
    name: Build (${{ matrix.os }})
    runs-on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version.outputs.version }}
          release_name: AitherZero v${{ needs.version.outputs.version }}
          body: |
            # AitherZero v${{ needs.version.outputs.version }}

            ## üöÄ Cross-Platform Infrastructure Automation Framework

            This release includes pre-built packages for Windows, Linux, and macOS.

            ### üì¶ Installation

            1. Download the appropriate package for your platform:
               - **Windows**: `AitherZero-${{ needs.version.outputs.version }}-windows.zip`
               - **Linux**: `AitherZero-${{ needs.version.outputs.version }}-linux.tar.gz`
               - **macOS**: `AitherZero-${{ needs.version.outputs.version }}-macos.tar.gz`

            2. Extract the package to your desired directory

            3. Run the startup script:
               - **Windows**: Double-click `AitherZero.bat` or run from PowerShell
               - **Linux/macOS**: Run `./aitherzero.sh` from terminal

            ### ‚úÖ Requirements

            - PowerShell 7.0 or later
            - Git (for lab automation features)
            - OpenTofu/Terraform (for infrastructure features)

            ### üîê Security

            All packages include SHA256 checksums for verification. Download the checksums file and verify your package:

            ```bash
            # Windows (PowerShell)
            Get-FileHash AitherZero-${{ needs.version.outputs.version }}-windows.zip -Algorithm SHA256

            # Linux/macOS
            sha256sum AitherZero-${{ needs.version.outputs.version }}-linux.tar.gz
            ```

            ### üìã What's Included

            - Complete PowerShell-based automation framework
            - Cross-platform lab automation tools
            - OpenTofu/Terraform infrastructure templates
            - Comprehensive testing and validation framework
            - Modular architecture with extensible components

            ### üõ†Ô∏è Quick Start

            After installation, run the startup script to access the interactive menu or use non-interactive mode:

            ```bash
            # Interactive mode
            ./aitherzero.sh

            # Non-interactive with specific scripts
            ./aitherzero.sh -NonInteractive -Scripts "script1,script2" -Auto
            ```

            For detailed documentation, see the [project repository](https://github.com/wizzense/AitherZero).

            ---

            **Build Information:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-release validation
  validate-release:
    name: Validate Release
    runs-on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
.name -eq $expected })) {
                $missingAssets += $expected
              }
            }

            if ($missingAssets.Count -gt 0) {
              Write-Warning "Missing assets:"
              foreach ($missing in $missingAssets) {
                Write-Warning "  - $missing"
              }
              Write-Error "Release validation failed: missing assets"
              exit 1
            } else {
              Write-Host "‚úÖ All expected assets are present" -ForegroundColor Green
            }

            Write-Host "‚úÖ Release validation completed successfully" -ForegroundColor Green

          } catch {
            Write-Error "Release validation failed: $(name: Build and Release

on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  # Version determination (single job)
  version:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:GITHUB_OUTPUT
          echo "should-build=$shouldBuild" >> $env:GITHUB_OUTPUT

  # Pre-build validation (cross-platform matrix)
  validate:
    name: Pre-Build Validation (${{ matrix.os }})
    runs-on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:GITHUB_ENV

          # Ensure proper path separators for cross-platform compatibility
          if ($IsWindows) {
            $env:PATH_SEPARATOR = ";"
          } else {
            $env:PATH_SEPARATOR = ":"
          }

          Write-Host "‚úì Environment initialized for ${{ matrix.os }}" -ForegroundColor Green

      - name: Run cross-platform pre-build validation
        shell: pwsh
        run: |
          Write-Host "Running pre-build validation on ${{ matrix.os }}..." -ForegroundColor Cyan

          # Set error action preference for better error handling
          $ErrorActionPreference = 'Stop'

          try {
            # Quick validation before expensive build process
            if (Test-Path './tests/Run-BulletproofValidation.ps1') {
              Write-Host "Running bulletproof validation..." -ForegroundColor Yellow
              pwsh -File './tests/Run-BulletproofValidation.ps1' -ValidationLevel 'Quick' -CI -FailFast
            } else {
              Write-Host "No bulletproof validation found, running basic checks" -ForegroundColor Yellow

              # Basic module import test with cross-platform path handling
              if (Test-Path './aither-core/modules') {
                $modules = Get-ChildItem -Path './aither-core/modules' -Directory
                foreach ($module in $modules) {
                  try {
                    Write-Host "Testing module: $($module.Name)" -ForegroundColor Cyan
                    Import-Module $module.FullName -Force -ErrorAction Stop
                    Write-Host "‚úì Module $($module.Name) imports successfully" -ForegroundColor Green
                  } catch {
                    Write-Error "Module $($module.Name) failed to import: $($_.Exception.Message)"
                    exit 1
                  }
                }
              }
            }

            Write-Host "‚úì Pre-build validation completed successfully on ${{ matrix.os }}" -ForegroundColor Green

          } catch {
            Write-Error "Pre-build validation failed on ${{ matrix.os }}: $($_.Exception.Message)"
            exit 1
          }

  # Cross-platform build matrix
  build:
    name: Build (${{ matrix.os }})
    runs-on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version.outputs.version }}
          release_name: AitherZero v${{ needs.version.outputs.version }}
          body: |
            # AitherZero v${{ needs.version.outputs.version }}

            ## üöÄ Cross-Platform Infrastructure Automation Framework

            This release includes pre-built packages for Windows, Linux, and macOS.

            ### üì¶ Installation

            1. Download the appropriate package for your platform:
               - **Windows**: `AitherZero-${{ needs.version.outputs.version }}-windows.zip`
               - **Linux**: `AitherZero-${{ needs.version.outputs.version }}-linux.tar.gz`
               - **macOS**: `AitherZero-${{ needs.version.outputs.version }}-macos.tar.gz`

            2. Extract the package to your desired directory

            3. Run the startup script:
               - **Windows**: Double-click `AitherZero.bat` or run from PowerShell
               - **Linux/macOS**: Run `./aitherzero.sh` from terminal

            ### ‚úÖ Requirements

            - PowerShell 7.0 or later
            - Git (for lab automation features)
            - OpenTofu/Terraform (for infrastructure features)

            ### üîê Security

            All packages include SHA256 checksums for verification. Download the checksums file and verify your package:

            ```bash
            # Windows (PowerShell)
            Get-FileHash AitherZero-${{ needs.version.outputs.version }}-windows.zip -Algorithm SHA256

            # Linux/macOS
            sha256sum AitherZero-${{ needs.version.outputs.version }}-linux.tar.gz
            ```

            ### üìã What's Included

            - Complete PowerShell-based automation framework
            - Cross-platform lab automation tools
            - OpenTofu/Terraform infrastructure templates
            - Comprehensive testing and validation framework
            - Modular architecture with extensible components

            ### üõ†Ô∏è Quick Start

            After installation, run the startup script to access the interactive menu or use non-interactive mode:

            ```bash
            # Interactive mode
            ./aitherzero.sh

            # Non-interactive with specific scripts
            ./aitherzero.sh -NonInteractive -Scripts "script1,script2" -Auto
            ```

            For detailed documentation, see the [project repository](https://github.com/wizzense/AitherZero).

            ---

            **Build Information:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-release validation
  validate-release:
    name: Validate Release
    runs-on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
.Exception.Message)"
            Write-Host "Error details: $(name: Build and Release

on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  # Version determination (single job)
  version:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:GITHUB_OUTPUT
          echo "should-build=$shouldBuild" >> $env:GITHUB_OUTPUT

  # Pre-build validation (cross-platform matrix)
  validate:
    name: Pre-Build Validation (${{ matrix.os }})
    runs-on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:GITHUB_ENV

          # Ensure proper path separators for cross-platform compatibility
          if ($IsWindows) {
            $env:PATH_SEPARATOR = ";"
          } else {
            $env:PATH_SEPARATOR = ":"
          }

          Write-Host "‚úì Environment initialized for ${{ matrix.os }}" -ForegroundColor Green

      - name: Run cross-platform pre-build validation
        shell: pwsh
        run: |
          Write-Host "Running pre-build validation on ${{ matrix.os }}..." -ForegroundColor Cyan

          # Set error action preference for better error handling
          $ErrorActionPreference = 'Stop'

          try {
            # Quick validation before expensive build process
            if (Test-Path './tests/Run-BulletproofValidation.ps1') {
              Write-Host "Running bulletproof validation..." -ForegroundColor Yellow
              pwsh -File './tests/Run-BulletproofValidation.ps1' -ValidationLevel 'Quick' -CI -FailFast
            } else {
              Write-Host "No bulletproof validation found, running basic checks" -ForegroundColor Yellow

              # Basic module import test with cross-platform path handling
              if (Test-Path './aither-core/modules') {
                $modules = Get-ChildItem -Path './aither-core/modules' -Directory
                foreach ($module in $modules) {
                  try {
                    Write-Host "Testing module: $($module.Name)" -ForegroundColor Cyan
                    Import-Module $module.FullName -Force -ErrorAction Stop
                    Write-Host "‚úì Module $($module.Name) imports successfully" -ForegroundColor Green
                  } catch {
                    Write-Error "Module $($module.Name) failed to import: $($_.Exception.Message)"
                    exit 1
                  }
                }
              }
            }

            Write-Host "‚úì Pre-build validation completed successfully on ${{ matrix.os }}" -ForegroundColor Green

          } catch {
            Write-Error "Pre-build validation failed on ${{ matrix.os }}: $($_.Exception.Message)"
            exit 1
          }

  # Cross-platform build matrix
  build:
    name: Build (${{ matrix.os }})
    runs-on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version.outputs.version }}
          release_name: AitherZero v${{ needs.version.outputs.version }}
          body: |
            # AitherZero v${{ needs.version.outputs.version }}

            ## üöÄ Cross-Platform Infrastructure Automation Framework

            This release includes pre-built packages for Windows, Linux, and macOS.

            ### üì¶ Installation

            1. Download the appropriate package for your platform:
               - **Windows**: `AitherZero-${{ needs.version.outputs.version }}-windows.zip`
               - **Linux**: `AitherZero-${{ needs.version.outputs.version }}-linux.tar.gz`
               - **macOS**: `AitherZero-${{ needs.version.outputs.version }}-macos.tar.gz`

            2. Extract the package to your desired directory

            3. Run the startup script:
               - **Windows**: Double-click `AitherZero.bat` or run from PowerShell
               - **Linux/macOS**: Run `./aitherzero.sh` from terminal

            ### ‚úÖ Requirements

            - PowerShell 7.0 or later
            - Git (for lab automation features)
            - OpenTofu/Terraform (for infrastructure features)

            ### üîê Security

            All packages include SHA256 checksums for verification. Download the checksums file and verify your package:

            ```bash
            # Windows (PowerShell)
            Get-FileHash AitherZero-${{ needs.version.outputs.version }}-windows.zip -Algorithm SHA256

            # Linux/macOS
            sha256sum AitherZero-${{ needs.version.outputs.version }}-linux.tar.gz
            ```

            ### üìã What's Included

            - Complete PowerShell-based automation framework
            - Cross-platform lab automation tools
            - OpenTofu/Terraform infrastructure templates
            - Comprehensive testing and validation framework
            - Modular architecture with extensible components

            ### üõ†Ô∏è Quick Start

            After installation, run the startup script to access the interactive menu or use non-interactive mode:

            ```bash
            # Interactive mode
            ./aitherzero.sh

            # Non-interactive with specific scripts
            ./aitherzero.sh -NonInteractive -Scripts "script1,script2" -Auto
            ```

            For detailed documentation, see the [project repository](https://github.com/wizzense/AitherZero).

            ---

            **Build Information:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-release validation
  validate-release:
    name: Validate Release
    runs-on:
  release:
    types: [published]
  push:
    tags: ['v*']
    branches: [main, master]  # Add branch triggers for automated release on merge
  pull_request:
    branches: [main, master]
    types: [closed]  # Trigger on PR merge
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
.Exception)" -ForegroundColor Red
            exit 1
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
