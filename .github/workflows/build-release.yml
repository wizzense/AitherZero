name: üì¶ Build & Release Pipeline
run-name: üì¶ Build & Release - ${{ github.event_name }} on ${{ github.ref_name }} by @${{ github.actor }}

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor  
          - patch
          - prerelease
      profiles:
        description: 'Build profiles (comma-separated: minimal,standard,full)'
        required: false
        default: 'minimal,standard,full'
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

# Prevent concurrent release builds
concurrency:
  group: build-release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

jobs:
  build-matrix:
    name: üî® Build Matrix
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        profile: [minimal, standard, full]
      fail-fast: false
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version calculation
      
      - name: Install PowerShell 7 (Linux)
        if: runner.os == 'Linux'
        run: |
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.1/powershell_7.4.1-1.deb_amd64.deb
          sudo dpkg -i powershell_7.4.1-1.deb_amd64.deb
          sudo apt-get install -f -y
      
      - name: Install PowerShell 7 (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install --cask powershell
      
      - name: Verify PowerShell Installation
        shell: pwsh
        run: |
          Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Green
          Write-Host "Platform: $($PSVersionTable.Platform)" -ForegroundColor Green
          
          if ($PSVersionTable.PSVersion.Major -lt 7) {
            throw "PowerShell 7 is required"
          }
      
      - name: Cache Build Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/Documents/PowerShell/Modules
            /Users/runner/.local/share/powershell/Modules
          key: build-deps-${{ runner.os }}-${{ hashFiles('**/*.psd1') }}
      
      - name: Build Package
        shell: pwsh
        run: |
          Write-Host "üî® Building AitherZero package..." -ForegroundColor Yellow
          Write-Host "Platform: $($PSVersionTable.Platform)" -ForegroundColor Cyan
          Write-Host "Profile: ${{ matrix.profile }}" -ForegroundColor Cyan
          
          # Set build parameters
          $buildParams = @{
            Profile = '${{ matrix.profile }}'
            Platform = '${{ runner.os }}'
            OutputPath = 'dist'
            IncludeTests = $false
            Compress = $true
          }
          
          try {
            # Check if custom build script exists
            if (Test-Path "./scripts/Build-Package.ps1") {
              Write-Host "Using custom build script..." -ForegroundColor Green
              ./scripts/Build-Package.ps1 @buildParams
            } else {
              Write-Host "Using default build process..." -ForegroundColor Yellow
              
              # Create output directory
              $outputDir = "dist/aitherzero-${{ matrix.profile }}-${{ runner.os }}"
              New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
              
              # Copy core files based on profile
              $coreFiles = @(
                "Start-AitherZero.ps1",
                "aither-core/",
                "configs/",
                "README.md",
                "LICENSE"
              )
              
              foreach ($file in $coreFiles) {
                if (Test-Path $file) {
                  if (Test-Path $file -PathType Container) {
                    Copy-Item $file -Destination $outputDir -Recurse -Force
                  } else {
                    Copy-Item $file -Destination $outputDir -Force
                  }
                  Write-Host "  ‚úÖ Copied $file" -ForegroundColor Green
                }
              }
              
              # Profile-specific inclusions
              switch ('${{ matrix.profile }}') {
                'minimal' {
                  Write-Host "Building minimal profile..." -ForegroundColor Cyan
                  # Include only essential modules
                }
                'standard' {
                  Write-Host "Building standard profile..." -ForegroundColor Cyan
                  # Include standard modules and tools
                  if (Test-Path "tools/") {
                    Copy-Item "tools/" -Destination $outputDir -Recurse -Force
                  }
                }
                'full' {
                  Write-Host "Building full profile..." -ForegroundColor Cyan
                  # Include everything
                  $additionalItems = @("tools/", "docs/", "examples/")
                  foreach ($item in $additionalItems) {
                    if (Test-Path $item) {
                      Copy-Item $item -Destination $outputDir -Recurse -Force
                      Write-Host "  ‚úÖ Added $item for full profile" -ForegroundColor Green
                    }
                  }
                }
              }
              
              # Create version info
              $versionInfo = @{
                Version = if ($env:GITHUB_REF -match 'refs/tags/v(.+)') { $matches[1] } else { "dev-$($env:GITHUB_SHA.Substring(0,7))" }
                Profile = '${{ matrix.profile }}'
                Platform = '${{ runner.os }}'
                BuildDate = (Get-Date).ToString('yyyy-MM-dd HH:mm:ss UTC')
                Commit = $env:GITHUB_SHA
              } | ConvertTo-Json -Depth 2
              
              $versionInfo | Out-File "$outputDir/build-info.json" -Encoding UTF8
              
              Write-Host "‚úÖ Package built successfully" -ForegroundColor Green
            }
            
            # Validate package integrity
            $packagePath = "dist/aitherzero-${{ matrix.profile }}-${{ runner.os }}"
            if (-not (Test-Path "$packagePath/Start-AitherZero.ps1")) {
              throw "Package validation failed: Main script not found"
            }
            
            Write-Host "‚úÖ Package validation successful" -ForegroundColor Green
            
          } catch {
            Write-Host "‚ùå Build failed: $_" -ForegroundColor Red
            throw
          }
      
      - name: Create Package Archive
        shell: pwsh
        run: |
          Write-Host "üì¶ Creating package archive..." -ForegroundColor Yellow
          
          $packageDir = "dist/aitherzero-${{ matrix.profile }}-${{ runner.os }}"
          $archiveName = "aitherzero-${{ matrix.profile }}-${{ runner.os }}"
          
          if ($IsWindows) {
            $archivePath = "$archiveName.zip"
            Compress-Archive -Path $packageDir -DestinationPath $archivePath -Force
          } else {
            $archivePath = "$archiveName.tar.gz"
            tar -czf $archivePath -C dist "aitherzero-${{ matrix.profile }}-${{ runner.os }}"
          }
          
          # Verify archive was created
          if (Test-Path $archivePath) {
            $size = (Get-Item $archivePath).Length
            Write-Host "‚úÖ Archive created: $archivePath ($([math]::Round($size/1MB, 2)) MB)" -ForegroundColor Green
          } else {
            throw "Failed to create package archive"
          }
      
      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: aitherzero-${{ matrix.profile }}-${{ matrix.os }}
          path: |
            aitherzero-${{ matrix.profile }}-${{ matrix.os }}.*
            dist/aitherzero-${{ matrix.profile }}-${{ matrix.os }}/build-info.json
          retention-days: 90

  create-release:
    name: üöÄ Create Release
    needs: build-matrix
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release != 'false'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download All Package Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: aitherzero-*
          merge-multiple: false
      
      - name: Organize Release Assets
        run: |
          echo "üìÅ Organizing release assets..."
          
          # Create release directory
          mkdir -p release-assets
          
          # Move and organize artifacts
          for profile in minimal standard full; do
            for os in windows-latest ubuntu-latest macos-latest; do
              artifact_dir="aitherzero-$profile-$os"
              if [ -d "$artifact_dir" ]; then
                echo "Processing $artifact_dir..."
                
                # Find the archive file
                if [ -f "$artifact_dir/aitherzero-$profile-$os.zip" ]; then
                  mv "$artifact_dir/aitherzero-$profile-$os.zip" "release-assets/"
                elif [ -f "$artifact_dir/aitherzero-$profile-$os.tar.gz" ]; then
                  mv "$artifact_dir/aitherzero-$profile-$os.tar.gz" "release-assets/"
                fi
              fi
            done
          done
          
          # List final assets
          echo "üì¶ Release assets:"
          ls -la release-assets/
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "üìù Generating release notes..."
          
          # Get version from tag or input
          if [[ "${{ github.ref }}" =~ refs/tags/v(.+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            VERSION="dev-$(echo ${{ github.sha }} | cut -c1-7)"
          fi
          
          # Generate release notes
          cat << EOF > release-notes.md
          # AitherZero v${VERSION}
          
          ## üì¶ Package Variants
          
          This release includes three installation profiles across all supported platforms:
          
          ### üéØ Installation Profiles
          - **Minimal**: Core functionality only (fastest installation)
          - **Standard**: Standard deployment features (recommended)
          - **Full**: All modules and capabilities (complete experience)
          
          ### üñ•Ô∏è Platform Support
          - **Windows**: PowerShell 7.0+ required
          - **Linux**: PowerShell 7.0+ (automatically installs if needed)
          - **macOS**: PowerShell 7.0+ (automatically installs if needed)
          
          ## üìã Installation
          
          1. Download the appropriate package for your platform and preferred profile
          2. Extract the archive to your desired location
          3. Run \`./Start-AitherZero.ps1 -Setup\` for first-time setup
          4. Follow the interactive setup wizard
          
          ## üîß Quick Start
          
          \`\`\`powershell
          # Interactive mode (recommended for first use)
          ./Start-AitherZero.ps1
          
          # Automated mode
          ./Start-AitherZero.ps1 -Auto
          
          # Setup with specific profile
          ./Start-AitherZero.ps1 -Setup -InstallationProfile standard
          \`\`\`
          
          ## üìä Build Information
          
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit**: ${{ github.sha }}
          - **Workflow**: ${{ github.run_number }}
          - **Profiles**: Minimal, Standard, Full
          - **Platforms**: Windows, Linux, macOS
          
          ---
          
          **Need help?** Check out the [documentation](https://github.com/${{ github.repository }}/blob/main/README.md) or open an [issue](https://github.com/${{ github.repository }}/issues).
          EOF
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "AitherZero v${{ steps.release_notes.outputs.version }}"
          body_path: release-notes.md
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'pre') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Release Summary
        run: |
          echo "üéâ Release created successfully!"
          echo "üìä Release Statistics:"
          echo "  - Version: ${{ steps.release_notes.outputs.version }}"
          echo "  - Profiles: 3 (minimal, standard, full)"
          echo "  - Platforms: 3 (Windows, Linux, macOS)"
          echo "  - Total Packages: $(ls release-assets/ | wc -l)"
          echo "  - Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"