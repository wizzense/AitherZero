name: üì¶ Build & Release Pipeline
run-name: üì¶ Build & Release - ${{ github.event_name }} on ${{ github.ref_name }} by @${{ github.actor }}

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor  
          - patch
          - prerelease
      profiles:
        description: 'Build profiles (comma-separated: minimal,standard,full)'
        required: false
        default: 'minimal,standard,full'
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

# Prevent concurrent release builds
concurrency:
  group: build-release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

jobs:
  build-matrix:
    name: üî® Build Matrix
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        profile: [minimal, standard, full]
      fail-fast: false
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version calculation
      
      - name: Install PowerShell 7 (Linux)
        if: runner.os == 'Linux'
        run: |
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.1/powershell_7.4.1-1.deb_amd64.deb
          sudo dpkg -i powershell_7.4.1-1.deb_amd64.deb
          sudo apt-get install -f -y
      
      - name: Install PowerShell 7 (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install --cask powershell
      
      - name: Verify PowerShell Installation
        shell: pwsh
        run: |
          Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Green
          Write-Host "Platform: $($PSVersionTable.Platform)" -ForegroundColor Green
          
          if ($PSVersionTable.PSVersion.Major -lt 7) {
            throw "PowerShell 7 is required"
          }
      
      - name: Cache Build Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/Documents/PowerShell/Modules
            /Users/runner/.local/share/powershell/Modules
          key: build-deps-${{ runner.os }}-${{ hashFiles('**/*.psd1') }}
      
      - name: Build Package
        shell: pwsh
        run: |
          Write-Host "üî® Building AitherZero package..." -ForegroundColor Yellow
          Write-Host "Platform: $($PSVersionTable.Platform)" -ForegroundColor Cyan
          Write-Host "Profile: ${{ matrix.profile }}" -ForegroundColor Cyan
          
          # Set build parameters for Build-Package.ps1
          $platformMap = @{
            'windows-latest' = 'windows'
            'ubuntu-latest' = 'linux'
            'macos-latest' = 'macos'
          }
          
          $extensionMap = @{
            'windows' = 'zip'
            'linux' = 'tar.gz'
            'macos' = 'tar.gz'
          }
          
          $platform = $platformMap['${{ matrix.os }}']
          $extension = $extensionMap[$platform]
          
          # Get version from tag or use dev version
          $version = if ($env:GITHUB_REF -match 'refs/tags/v(.+)') { 
            $matches[1] 
          } else { 
            "dev-$($env:GITHUB_SHA.Substring(0,7))" 
          }
          
          $buildParams = @{
            Platform = $platform
            Version = $version
            ArtifactExtension = $extension
            PackageProfile = '${{ matrix.profile }}'
            NoProgress = $true  # Disable progress for CI
          }
          
          try {
            # Check if custom build script exists
            if (Test-Path "./build/Build-Package.ps1") {
              Write-Host "Using custom build script..." -ForegroundColor Green
              ./build/Build-Package.ps1 @buildParams
              
              # Custom build script creates packages in build-output/{platform}/ directory
              $customPackagePath = "build-output/$platform/AitherZero-$version-$platform-${{ matrix.profile }}"
              
              # Validate custom build output
              if (Test-Path $customPackagePath) {
                Write-Host "‚úÖ Custom build package found: $customPackagePath" -ForegroundColor Green
                
                # Check for main script in custom package
                if (Test-Path "$customPackagePath/Start-AitherZero.ps1") {
                  Write-Host "‚úÖ Main script validated in custom package" -ForegroundColor Green
                } else {
                  throw "Package validation failed: Main script not found in $customPackagePath"
                }
                
                # Create compatibility directory structure for archive step
                $expectedPath = "dist/aitherzero-${{ matrix.profile }}-${{ matrix.os }}"
                New-Item -ItemType Directory -Path "dist" -Force | Out-Null
                
                # Copy custom package to expected location for archive step
                Copy-Item $customPackagePath -Destination $expectedPath -Recurse -Force
                Write-Host "‚úÖ Package copied to expected location: $expectedPath" -ForegroundColor Green
              } else {
                throw "Custom build failed: Package directory not found: $customPackagePath"
              }
              
            } else {
              Write-Host "Using default build process..." -ForegroundColor Yellow
              
              # Create output directory
              $outputDir = "dist/aitherzero-${{ matrix.profile }}-${{ matrix.os }}"
              New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
              
              # Copy core files based on profile
              $coreFiles = @(
                "Start-AitherZero.ps1",
                "aither-core/",
                "configs/",
                "README.md",
                "LICENSE"
              )
              
              foreach ($file in $coreFiles) {
                if (Test-Path $file) {
                  if (Test-Path $file -PathType Container) {
                    Copy-Item $file -Destination $outputDir -Recurse -Force
                  } else {
                    Copy-Item $file -Destination $outputDir -Force
                  }
                  Write-Host "  ‚úÖ Copied $file" -ForegroundColor Green
                }
              }
              
              # Profile-specific inclusions
              switch ('${{ matrix.profile }}') {
                'minimal' {
                  Write-Host "Building minimal profile..." -ForegroundColor Cyan
                  # Include only essential modules
                }
                'standard' {
                  Write-Host "Building standard profile..." -ForegroundColor Cyan
                  # Include standard modules and tools
                  if (Test-Path "tools/") {
                    Copy-Item "tools/" -Destination $outputDir -Recurse -Force
                  }
                }
                'full' {
                  Write-Host "Building full profile..." -ForegroundColor Cyan
                  # Include everything
                  $additionalItems = @("tools/", "docs/", "examples/")
                  foreach ($item in $additionalItems) {
                    if (Test-Path $item) {
                      Copy-Item $item -Destination $outputDir -Recurse -Force
                      Write-Host "  ‚úÖ Added $item for full profile" -ForegroundColor Green
                    }
                  }
                }
              }
              
              # Create version info
              $versionInfo = @{
                Version = if ($env:GITHUB_REF -match 'refs/tags/v(.+)') { $matches[1] } else { "dev-$($env:GITHUB_SHA.Substring(0,7))" }
                Profile = '${{ matrix.profile }}'
                Platform = '${{ matrix.os }}'
                BuildDate = (Get-Date).ToString('yyyy-MM-dd HH:mm:ss UTC')
                Commit = $env:GITHUB_SHA
              } | ConvertTo-Json -Depth 2
              
              $versionInfo | Out-File "$outputDir/build-info.json" -Encoding UTF8
              
              Write-Host "‚úÖ Package built successfully" -ForegroundColor Green
              
              # Validate default build package integrity
              $packagePath = "dist/aitherzero-${{ matrix.profile }}-${{ matrix.os }}"
              if (-not (Test-Path "$packagePath/Start-AitherZero.ps1")) {
                throw "Package validation failed: Main script not found"
              }
              
              Write-Host "‚úÖ Package validation successful" -ForegroundColor Green
            }
            
          } catch {
            Write-Host "‚ùå Build failed: $_" -ForegroundColor Red
            throw
          }
      
      - name: Create Package Archive
        shell: pwsh
        run: |
          Write-Host "üì¶ Creating package archive..." -ForegroundColor Yellow
          
          # Use consistent platform naming
          $platformName = "${{ matrix.os }}"
          $packageDir = "dist/aitherzero-${{ matrix.profile }}-$platformName"
          $archiveName = "aitherzero-${{ matrix.profile }}-$platformName"
          
          # Check if package directory exists
          if (-not (Test-Path $packageDir)) {
            throw "Package directory not found: $packageDir"
          }
          
          Write-Host "Package directory contents:" -ForegroundColor Cyan
          Get-ChildItem $packageDir -Recurse | Select-Object FullName, Length | Format-Table -AutoSize
          
          if ($IsWindows) {
            $archivePath = "$archiveName.zip"
            Write-Host "Creating Windows ZIP archive: $archivePath" -ForegroundColor Cyan
            # Change to package directory to avoid nested folder structure
            $currentDir = Get-Location
            Set-Location $packageDir
            try {
              $destinationPath = Join-Path $currentDir $archivePath
              Compress-Archive -Path "*" -DestinationPath $destinationPath -Force
            } finally {
              Set-Location $currentDir
            }
          } else {
            $archivePath = "$archiveName.tar.gz"
            Write-Host "Creating Unix TAR.GZ archive: $archivePath" -ForegroundColor Cyan
            
            # Use cross-platform approach that works on both Linux and macOS
            # Change to package directory to avoid nested folder structure
            $currentDir = Get-Location
            Set-Location $packageDir
            try {
              $destinationPath = Join-Path $currentDir $archivePath
              # Create archive with all files in current directory
              tar -czf $destinationPath *
              Write-Host "Archive created successfully using cross-platform approach" -ForegroundColor Green
            } finally {
              Set-Location $currentDir
            }
          }
          
          # Verify archive was created and show details
          if (Test-Path $archivePath) {
            $size = (Get-Item $archivePath).Length
            Write-Host "‚úÖ Archive created: $archivePath ($([math]::Round($size/1MB, 2)) MB)" -ForegroundColor Green
            
            # List created files for upload step
            Write-Host "üìã Files created for upload:" -ForegroundColor Yellow
            Get-ChildItem -Path . -Filter "$archiveName.*" | ForEach-Object {
              Write-Host "  - $($_.Name)" -ForegroundColor Green
            }
          } else {
            throw "Failed to create package archive: $archivePath"
          }
      
      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: aitherzero-${{ matrix.profile }}-${{ matrix.os }}
          path: |
            aitherzero-${{ matrix.profile }}-${{ matrix.os }}.*
            dist/aitherzero-${{ matrix.profile }}-${{ matrix.os }}/build-info.json
          retention-days: 90

  create-release:
    name: üöÄ Create Release
    needs: build-matrix
    runs-on: ubuntu-latest
    if: always() && needs.build-matrix.result == 'success' && ((startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && inputs.create_release == 'true'))
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download All Package Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: aitherzero-*
          path: .
          merge-multiple: false
      
      - name: Organize Release Assets
        run: |
          echo "üìÅ Organizing release assets..."
          
          # Create release directory
          mkdir -p release-assets
          
          # Move and organize artifacts
          for profile in minimal standard full; do
            for os in windows-latest ubuntu-latest macos-latest; do
              artifact_dir="aitherzero-$profile-$os"
              if [ -d "$artifact_dir" ]; then
                echo "Processing $artifact_dir..."
                
                # Find the archive file
                if [ -f "$artifact_dir/aitherzero-$profile-$os.zip" ]; then
                  mv "$artifact_dir/aitherzero-$profile-$os.zip" "release-assets/"
                elif [ -f "$artifact_dir/aitherzero-$profile-$os.tar.gz" ]; then
                  mv "$artifact_dir/aitherzero-$profile-$os.tar.gz" "release-assets/"
                fi
              fi
            done
          done
          
          # List final assets
          echo "üì¶ Release assets:"
          ls -la release-assets/
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "üìù Generating release notes..."
          
          # Get version from tag, input, or VERSION file
          if [[ "${{ github.ref }}" =~ refs/tags/v(.+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use VERSION file for manual dispatch
            VERSION=$(cat VERSION || echo "1.0.0")
          else
            VERSION="dev-$(echo ${{ github.sha }} | cut -c1-7)"
          fi
          
          # Generate release notes
          cat << EOF > release-notes.md
          # AitherZero v${VERSION}
          
          ## üì¶ Package Variants
          
          This release includes three installation profiles across all supported platforms:
          
          ### üéØ Installation Profiles
          - **Minimal**: Core functionality only (fastest installation)
          - **Standard**: Standard deployment features (recommended)
          - **Full**: All modules and capabilities (complete experience)
          
          ### üñ•Ô∏è Platform Support
          - **Windows**: PowerShell 7.0+ required
          - **Linux**: PowerShell 7.0+ (automatically installs if needed)
          - **macOS**: PowerShell 7.0+ (automatically installs if needed)
          
          ## üìã Installation
          
          1. Download the appropriate package for your platform and preferred profile
          2. Extract the archive to your desired location
          3. Run \`./Start-AitherZero.ps1 -Setup\` for first-time setup
          4. Follow the interactive setup wizard
          
          ## üîß Quick Start
          
          \`\`\`powershell
          # Interactive mode (recommended for first use)
          ./Start-AitherZero.ps1
          
          # Automated mode
          ./Start-AitherZero.ps1 -Auto
          
          # Setup with specific profile
          ./Start-AitherZero.ps1 -Setup -InstallationProfile standard
          \`\`\`
          
          ## üìä Build Information
          
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit**: ${{ github.sha }}
          - **Workflow**: ${{ github.run_number }}
          - **Profiles**: Minimal, Standard, Full
          - **Platforms**: Windows, Linux, macOS
          
          ---
          
          **Need help?** Check out the [documentation](https://github.com/${{ github.repository }}/blob/main/README.md) or open an [issue](https://github.com/${{ github.repository }}/issues).
          EOF
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.release_notes.outputs.version) }}
          name: "AitherZero v${{ steps.release_notes.outputs.version }}"
          body_path: release-notes.md
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(steps.release_notes.outputs.version, 'pre') || contains(steps.release_notes.outputs.version, 'beta') || contains(steps.release_notes.outputs.version, 'alpha') }}
          generate_release_notes: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Release Summary
        run: |
          echo "üéâ Release created successfully!"
          echo "üìä Release Statistics:"
          echo "  - Version: ${{ steps.release_notes.outputs.version }}"
          echo "  - Profiles: 3 (minimal, standard, full)"
          echo "  - Platforms: 3 (Windows, Linux, macOS)"
          echo "  - Total Packages: $(ls release-assets/ | wc -l)"
          echo "  - Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"