---
name: Intelligent CI Orchestrator

# Smart CI/CD orchestration optimized for AI agents and cost efficiency
on:
  push:
    branches: [main, develop, 'feature/**', 'copilot/**']
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore' 
      - 'LICENSE'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        type: choice
        options: ['quick', 'standard', 'comprehensive']
        default: 'quick'
      force_full_analysis:
        description: 'Force full analysis regardless of changes'
        type: boolean
        default: false

# Cost-optimized concurrency - prevent redundant runs
concurrency:
  group: intelligent-ci-${{ github.event.pull_request.number || github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write
  actions: read

env:
  AITHERZERO_CI: true
  AITHERZERO_NONINTERACTIVE: true
  # AI Agent coordination
  AI_AGENT_MODE: true
  CI_OPTIMIZATION_LEVEL: 'aggressive'

jobs:
  # Smart change detection to determine what needs to run
  change-detection:
    name: üß† Smart Change Detection
    runs-on: ubuntu-latest
    outputs:
      needs-core-validation: ${{ steps.detect.outputs.needs-core-validation }}
      needs-security-scan: ${{ steps.detect.outputs.needs-security-scan }}
      needs-full-tests: ${{ steps.detect.outputs.needs-full-tests }}
      needs-performance-tests: ${{ steps.detect.outputs.needs-performance-tests }}
      changed-areas: ${{ steps.detect.outputs.changed-areas }}
      optimization-level: ${{ steps.detect.outputs.optimization-level }}
      
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for accurate change detection
          
      - name: üîç Intelligent Change Analysis
        id: detect
        shell: pwsh
        run: |
          # Smart change detection based on file patterns and impact analysis
          $changedFiles = @()
          $needsCoreValidation = $false
          $needsSecurityScan = $false
          $needsFullTests = $false
          $needsPerformanceTests = $false
          $changedAreas = @()
          
          # Get changed files with error handling
          $changedFiles = @()
          try {
            if ($env:GITHUB_EVENT_NAME -eq 'pull_request') {
              # For pull requests, compare with the base branch
              $changedFiles = git diff --name-only $env:GITHUB_BASE_REF...HEAD 2>$null
              if ($LASTEXITCODE -ne 0) {
                # Fallback: use GitHub's files API approach
                $changedFiles = git diff --name-only HEAD~1..HEAD 2>$null
              }
            } else {
              # For push events, compare with previous commit
              $changedFiles = git diff --name-only HEAD~1..HEAD 2>$null
            }
          } catch {
            Write-Host "‚ö†Ô∏è Git diff failed, assuming all files changed for safety" -ForegroundColor Yellow
            $changedFiles = @('**/*')  # Trigger full validation as fallback
          }
          
          # Ensure we have an array
          if (-not $changedFiles) { $changedFiles = @() }
          
          Write-Host "üìã Changed files detected:" -ForegroundColor Cyan
          $changedFiles | ForEach-Object { Write-Host "  ‚Ä¢ $_" }
          
          # Analyze impact
          foreach ($file in $changedFiles) {
            switch -Regex ($file) {
              # Critical infrastructure - always needs full validation
              '^(\.github/workflows/|automation-scripts/|bootstrap\.ps1|Start-AitherZero\.ps1)' {
                $needsCoreValidation = $true
                $needsFullTests = $true
                $changedAreas += 'infrastructure'
              }
              
              # Security-sensitive files
              '^(domains/security/|.*[Ss]ecurity.*|.*[Aa]uth.*|.*[Cc]red.*\.ps1)' {
                $needsSecurityScan = $true
                $needsCoreValidation = $true
                $changedAreas += 'security'
              }
              
              # Performance-critical components
              '^(domains/automation/|.*[Pp]erformance.*|.*[Oo]rchestration.*)' {
                $needsPerformanceTests = $true
                $changedAreas += 'performance'
              }
              
              # Core modules
              '^domains/' {
                $needsCoreValidation = $true
                $changedAreas += 'core'
              }
              
              # Test changes
              '^tests/' {
                $needsCoreValidation = $true
                $changedAreas += 'testing'
              }
            }
          }
          
          # Determine optimization level
          $optimizationLevel = 'standard'
          if ($changedFiles.Count -lt 5 -and -not $needsFullTests) {
            $optimizationLevel = 'aggressive'
          } elseif ($needsPerformanceTests -or $changedFiles.Count -gt 20) {
            $optimizationLevel = 'conservative'
          }
          
          # Force full analysis if requested
          if ('${{ github.event.inputs.force_full_analysis }}' -eq 'true') {
            $needsCoreValidation = $true
            $needsSecurityScan = $true
            $needsFullTests = $true
            $optimizationLevel = 'conservative'
          }
          
          # Set outputs
          "needs-core-validation=$needsCoreValidation" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "needs-security-scan=$needsSecurityScan" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "needs-full-tests=$needsFullTests" | Out-File -FilePath $env:GITHUB_OUTPUT -Append  
          "needs-performance-tests=$needsPerformanceTests" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "changed-areas=$($changedAreas -join ',')" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "optimization-level=$optimizationLevel" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          
          Write-Host "üéØ Analysis Results:" -ForegroundColor Green
          Write-Host "  Core Validation: $needsCoreValidation"
          Write-Host "  Security Scan: $needsSecurityScan"
          Write-Host "  Full Tests: $needsFullTests"
          Write-Host "  Performance Tests: $needsPerformanceTests"
          Write-Host "  Changed Areas: $($changedAreas -join ', ')"
          Write-Host "  Optimization Level: $optimizationLevel"

  # Always run - fast feedback (< 2 minutes)
  quick-validation:
    name: ‚ö° Quick Validation
    runs-on: ubuntu-latest
    needs: change-detection
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        
      - name: ‚ö° Quick Syntax Check
        shell: pwsh
        run: |
          Write-Host "üîç Running quick syntax validation..." -ForegroundColor Cyan
          try {
            & ./Start-AitherZero.ps1 -Mode Orchestrate -Sequence "0407" -NonInteractive
            $exitCode = $LASTEXITCODE
            Write-Host "‚úÖ Syntax validation completed with exit code: $exitCode" -ForegroundColor Green
            if ($exitCode -ne 0) {
              Write-Error "Syntax validation failed with exit code: $exitCode"
              exit $exitCode
            }
          } catch {
            Write-Error "Syntax validation failed with exception: $($_.Exception.Message)"
            exit 1
          }

  # Conditional - run based on change detection
  core-validation:
    name: üîç Core Validation  
    runs-on: ubuntu-latest
    needs: [change-detection, quick-validation]
    if: needs.change-detection.outputs.needs-core-validation == 'true'
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        
      - name: üîç Core Analysis
        shell: pwsh
        run: |
          Write-Host "üîç Running core validation..." -ForegroundColor Cyan
          
          # Run optimized PSScriptAnalyzer (focuses on errors only in CI)
          & ./Start-AitherZero.ps1 -Mode Orchestrate -Sequence "0404" -NonInteractive
          
          # Generate comprehensive report for analysis
          & ./Start-AitherZero.ps1 -Mode Orchestrate -Sequence "0510" -NonInteractive
          
      - name: üìä Upload Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: core-analysis-results
          path: |
            tests/analysis/
            tests/reports/
          retention-days: 30

  # Security-focused validation
  security-validation:
    name: üîí Security Validation
    runs-on: ubuntu-latest
    needs: [change-detection, quick-validation]
    if: needs.change-detection.outputs.needs-security-scan == 'true'
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        
      - name: üîí Security Analysis
        shell: pwsh
        run: |
          Write-Host "üîí Running security analysis..." -ForegroundColor Cyan
          
          # Run security-focused scripts
          & ./Start-AitherZero.ps1 -Mode Orchestrate -Sequence "0523" -NonInteractive
          
      - name: üìä Upload Security Results
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-results
          path: |
            tests/analysis/
            security-reports/
          retention-days: 60

  # Comprehensive testing - only when needed
  comprehensive-tests:
    name: üß™ Comprehensive Tests
    runs-on: ubuntu-latest
    needs: [change-detection, core-validation]
    if: needs.change-detection.outputs.needs-full-tests == 'true'
    timeout-minutes: 30
    
    steps:
      - name: üì• Checkout  
        uses: actions/checkout@v4
        
      - name: üß™ Run Comprehensive Tests
        shell: pwsh
        run: |
          Write-Host "üß™ Running comprehensive test suite..." -ForegroundColor Cyan
          
          # Optimized for CI with reduced scope but comprehensive coverage
          $env:AITHERZERO_TEST_SCOPE = "comprehensive"
          & ./Start-AitherZero.ps1 -Mode Orchestrate -Sequence "0402" -NonInteractive
          
      - name: üìä Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-results
          path: |
            tests/results/
            tests/reports/
          retention-days: 30

  # Multi-platform validation - only for main/develop branches or when explicitly requested
  cross-platform:
    name: üåç Cross-Platform (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [change-detection, core-validation]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event.inputs.force_full_analysis == 'true') && needs.change-detection.outputs.needs-core-validation == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        
      - name: üåç Platform Validation
        shell: pwsh
        run: |
          Write-Host "üåç Running platform-specific validation on ${{ matrix.os }}..." -ForegroundColor Cyan
          
          # Quick validation for cross-platform compatibility
          & ./Start-AitherZero.ps1 -Mode Orchestrate -Sequence "0407" -NonInteractive
          
      - name: üìä Upload Platform Results
        uses: actions/upload-artifact@v4
        with:
          name: platform-results-${{ matrix.os }}
          path: |
            tests/results/
          retention-days: 14

  # Final validation - consolidate results
  validation-summary:
    name: üìã Validation Summary
    runs-on: ubuntu-latest
    needs: [change-detection, quick-validation, core-validation, comprehensive-tests]
    if: always() && needs.change-detection.result == 'success'
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        
      - name: üìä Download All Results
        uses: actions/download-artifact@v4
        with:
          path: ./ci-results
        continue-on-error: true
        
      - name: üìã Generate CI Summary
        shell: pwsh
        run: |
          Write-Host "üìã Generating CI validation summary..." -ForegroundColor Cyan
          
          $summary = @{
            Timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
            GitRef = $env:GITHUB_REF
            GitSha = $env:GITHUB_SHA
            WorkflowRun = $env:GITHUB_RUN_ID
            ChangeDetection = @{
              NeedsCoreValidation = '${{ needs.change-detection.outputs.needs-core-validation }}'
              NeedsSecurityScan = '${{ needs.change-detection.outputs.needs-security-scan }}'
              NeedsFullTests = '${{ needs.change-detection.outputs.needs-full-tests }}'
              ChangedAreas = '${{ needs.change-detection.outputs.changed-areas }}'
              OptimizationLevel = '${{ needs.change-detection.outputs.optimization-level }}'
            }
            JobResults = @{
              QuickValidation = '${{ needs.quick-validation.result }}'
              CoreValidation = '${{ needs.core-validation.result }}'
              ComprehensiveTests = '${{ needs.comprehensive-tests.result }}'
            }
          }
          
          $summaryJson = $summary | ConvertTo-Json -Depth 5
          $summaryJson | Out-File "ci-summary.json"
          
          Write-Host "üìä CI Summary:" -ForegroundColor Green
          Write-Host $summaryJson
          
      - name: üìä Upload CI Summary
        uses: actions/upload-artifact@v4
        with:
          name: ci-validation-summary
          path: ci-summary.json
          retention-days: 90