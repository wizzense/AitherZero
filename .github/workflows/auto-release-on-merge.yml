name: 🚀 Auto-Release on Merge
run-name: 🚀 Auto-Release - ${{ github.event.pull_request.title }}

on:
  pull_request:
    types: [closed]
    branches: [main]

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  check-and-release:
    name: 🎯 Check and Create Release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    permissions:
      contents: write
      
    steps:
      - name: 🔍 Check for Release Label
        id: check-label
        run: |
          echo "Checking PR labels..."
          LABELS='${{ toJson(github.event.pull_request.labels.*.name) }}'
          echo "PR Labels: $LABELS"
          
          # Check for release labels
          if echo "$LABELS" | grep -q "release:patch"; then
            echo "release_type=patch" >> $GITHUB_OUTPUT
            echo "has_release_label=true" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "release:minor"; then
            echo "release_type=minor" >> $GITHUB_OUTPUT
            echo "has_release_label=true" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "release:major"; then
            echo "release_type=major" >> $GITHUB_OUTPUT
            echo "has_release_label=true" >> $GITHUB_OUTPUT
          else
            echo "has_release_label=false" >> $GITHUB_OUTPUT
            echo "No release label found - skipping release"
          fi
          
      - name: 📥 Checkout Repository
        if: steps.check-label.outputs.has_release_label == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🔧 Configure Git
        if: steps.check-label.outputs.has_release_label == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
      - name: 📊 Calculate Version
        if: steps.check-label.outputs.has_release_label == 'true'
        id: version
        run: |
          # Read current version
          CURRENT_VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Calculate new version based on release type
          case "${{ steps.check-label.outputs.release_type }}" in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: 📝 Update VERSION File
        if: steps.check-label.outputs.has_release_label == 'true'
        run: |
          echo "${{ steps.version.outputs.new_version }}" > VERSION
          git add VERSION
          git commit -m "Bump version to ${{ steps.version.outputs.new_version }} [skip ci]

          Automated version bump triggered by PR #${{ github.event.pull_request.number }}
          Release type: ${{ steps.check-label.outputs.release_type }}
          PR: ${{ github.event.pull_request.title }}"
          
      - name: 🏷️ Create and Push Tag
        if: steps.check-label.outputs.has_release_label == 'true'
        run: |
          # Create annotated tag
          TAG_NAME="v${{ steps.version.outputs.new_version }}"
          TAG_MESSAGE="Release $TAG_NAME

          Triggered by: PR #${{ github.event.pull_request.number }}
          Title: ${{ github.event.pull_request.title }}
          Author: ${{ github.event.pull_request.user.login }}
          Release Type: ${{ steps.check-label.outputs.release_type }}

          Changes included:
          ${{ github.event.pull_request.body }}"
          
          git tag -a "$TAG_NAME" -m "$TAG_MESSAGE"
          
          # Push changes and tag
          git push origin main
          git push origin "$TAG_NAME"
          
          echo "✅ Created and pushed tag: $TAG_NAME"
          
      - name: 📋 Summary
        if: always()
        run: |
          if [ "${{ steps.check-label.outputs.has_release_label }}" == "true" ]; then
            echo "## 🚀 Auto-Release Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**PR**: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
            echo "**Release Type**: ${{ steps.check-label.outputs.release_type }}" >> $GITHUB_STEP_SUMMARY
            echo "**Version**: ${{ steps.version.outputs.current_version }} → ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Tag**: v${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The build & release pipeline will now automatically create release artifacts." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ℹ️ No Release Required" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "PR #${{ github.event.pull_request.number }} was merged without a release label." >> $GITHUB_STEP_SUMMARY
            echo "To trigger a release, PRs must have one of: release:patch, release:minor, release:major" >> $GITHUB_STEP_SUMMARY
          fi