---
name: üßπ Close Auto-Created Issues

# One-time workflow to close all existing auto-created issues
# Run this manually before implementing new intelligent issue creation
on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run - preview what would be closed without actually closing'
        type: boolean
        default: true
      close_reason:
        description: 'Reason for closing issues'
        type: choice
        options:
          - 'not_planned'
          - 'completed'
        default: 'not_planned'

permissions:
  issues: write
  contents: read

jobs:
  cleanup-issues:
    name: üßπ Close Auto-Created Issues
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîç Find and Close Auto-Created Issues
        uses: actions/github-script@v7
        with:
          script: |
            const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';
            const closeReason = '${{ github.event.inputs.close_reason }}';
            
            console.log(`üßπ Cleanup Mode: ${dryRun ? 'DRY RUN (preview only)' : 'ACTIVE (will close issues)'}`);
            console.log(`üìã Close Reason: ${closeReason}`);
            console.log('');

            // Find all auto-created issues (checking both label variations)
            const { data: autoCreatedIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'auto-created',
              per_page: 100
            });
            
            const { data: automatedIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'automated-issue',
              per_page: 100
            });
            
            // Combine and deduplicate by issue number
            const issueMap = new Map();
            [...autoCreatedIssues, ...automatedIssues].forEach(issue => {
              issueMap.set(issue.number, issue);
            });
            const issues = Array.from(issueMap.values());

            console.log(`Found ${issues.length} auto-created/automated issues to process`);
            console.log(`  - auto-created label: ${autoCreatedIssues.length}`);
            console.log(`  - automated-issue label: ${automatedIssues.length}`);
            console.log('');

            if (issues.length === 0) {
              console.log('‚úÖ No auto-created issues found. Repository is clean!');
              return;
            }

            // Group issues by type for reporting
            const issuesByType = {};
            for (const issue of issues) {
              const labels = issue.labels.map(l => l.name);
              let type = 'other';
              
              if (labels.includes('psscriptanalyzer')) type = 'code-quality';
              else if (labels.includes('unit-tests')) type = 'testing';
              else if (labels.includes('security')) type = 'security';
              else if (labels.includes('maintenance')) type = 'maintenance';
              
              if (!issuesByType[type]) issuesByType[type] = [];
              issuesByType[type].push(issue);
            }

            // Report what will be closed
            console.log('üìä Issues by Type:');
            for (const [type, typeIssues] of Object.entries(issuesByType)) {
              console.log(`  ${type}: ${typeIssues.length} issues`);
              typeIssues.forEach(issue => {
                console.log(`    - #${issue.number}: ${issue.title}`);
              });
            }
            console.log('');

            if (dryRun) {
              console.log('üîç DRY RUN MODE: No issues will be closed');
              console.log('');
              console.log('To actually close these issues, run this workflow again with:');
              console.log('  dry_run: false');
              console.log('');
              console.log(`Total issues that would be closed: ${issues.length}`);
              return;
            }

            // Close all auto-created issues
            console.log('üßπ Closing auto-created issues...');
            console.log('');

            const closeMessage = `## üßπ Automated Cleanup

This auto-created issue is being closed as part of a system-wide cleanup.

**Reason:** Cleaning up duplicate and useless auto-created issues

These automated issues were being created constantly by overly aggressive workflows:
- Hourly schedule (9am-5pm UTC, Mon-Fri) in automated-copilot-agent
- Daily schedule in auto-create-issues-from-failures
- Multiple workflow_run triggers creating duplicates

**Changes made to prevent future duplicates:**
1. Disabled hourly and daily cron schedules
2. Disabled workflow_run triggers
3. Workflows now only run on manual trigger (workflow_dispatch)
4. Better deduplication logic will be implemented

If this issue represents a real problem that still exists, it can be manually re-created or the workflow can be manually triggered when needed.

**Next Steps:**
1. Workflows only run on manual trigger to prevent spam
2. Use workflow_dispatch when issue creation is actually needed
3. Review issues manually before running automated workflows

---
**Closed by:** Automated cleanup workflow
**Date:** ${new Date().toISOString()}`;

            let closedCount = 0;
            for (const issue of issues) {
              try {
                // Add closing comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: closeMessage
                });

                // Close the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  state_reason: closeReason
                });

                closedCount++;
                console.log(`‚úÖ Closed issue #${issue.number}: ${issue.title}`);
              } catch (error) {
                console.log(`‚ùå Failed to close issue #${issue.number}: ${error.message}`);
              }
            }

            console.log('');
            console.log(`‚úÖ Cleanup complete! Closed ${closedCount}/${issues.length} issues`);
            
            if (closedCount < issues.length) {
              console.log(`‚ö†Ô∏è Warning: ${issues.length - closedCount} issues failed to close`);
            }

      - name: üìù Summary
        if: always()
        shell: bash
        run: |
          if [ -n "$GITHUB_STEP_SUMMARY" ]; then
            cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## üßπ Auto-Created Issues Cleanup

          This workflow closes all existing auto-created issues as part of migrating to an improved issue creation system.

          ### Improvements in New System:
          - ‚úÖ Better deduplication by type, file, and domain
          - ‚úÖ PR-based workflow for grouped fixes
          - ‚úÖ More detailed context (branch, file, workflow info)
          - ‚úÖ Manual priority assignment with recommendations
          - ‚úÖ Prevention of duplicate issues across branches
          - ‚úÖ Copilot assigned to PRs instead of individual issues

          ### Status
          Run completed. Check logs above for details on issues processed.
          
          **Mode:** ${{ github.event.inputs.dry_run == 'true' && 'DRY RUN (preview only)' || 'ACTIVE (issues closed)' }}
          EOF
          fi
