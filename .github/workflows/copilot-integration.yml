name: Copilot Integration

on:
  pull_request_review_comment:
    types: [created]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to check for Copilot suggestions'
        required: false
        type: number
      auto_apply:
        description: 'Automatically apply simple fixes'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  process-copilot-suggestions:
    name: Process Copilot Suggestions
    runs-on: ubuntu-latest
    # Only run if comment is from Copilot or if manually triggered
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event.comment.user.type == 'Bot' && 
       (contains(github.event.comment.user.login, 'copilot') || 
        contains(github.event.comment.user.login, 'github-actions')))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup PowerShell
        uses: ./.github/actions/setup-powershell
        with:
          modules: 'Pester,PSScriptAnalyzer'
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Load AitherCore
        shell: pwsh
        run: |
          Import-Module ./aither-core/AitherCore.psm1 -Force
      
      - name: Process Copilot Suggestion
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Initialize logging
          . ./aither-core/shared/Initialize-Logging.ps1
          
          # Load automation domain for Copilot functions
          . ./aither-core/domains/automation/Automation.ps1
          
          try {
            # Determine PR number
            $prNumber = $null
            
            if ('${{ github.event_name }}' -eq 'workflow_dispatch') {
              $prNumber = '${{ github.event.inputs.pr_number }}'
              if (-not $prNumber) {
                # Try to get PR from current branch
                $prNumber = gh pr view --json number -q .number 2>$null
              }
            } elseif ('${{ github.event_name }}' -eq 'pull_request_review_comment') {
              $prNumber = '${{ github.event.pull_request.number }}'
            } elseif ('${{ github.event_name }}' -eq 'issue_comment' -and '${{ github.event.issue.pull_request }}') {
              $prNumber = '${{ github.event.issue.number }}'
            }
            
            if (-not $prNumber) {
              Write-CustomLog -Level 'WARNING' -Message "Could not determine PR number"
              exit 0
            }
            
            Write-CustomLog -Level 'INFO' -Message "Processing Copilot suggestions for PR #$prNumber"
            
            # Check for auto-apply flag
            $autoApply = '${{ github.event.inputs.auto_apply }}' -eq 'true'
            
            if ($autoApply) {
              Write-CustomLog -Level 'INFO' -Message "Auto-apply mode enabled for simple fixes"
              Watch-CopilotReviews -PRNumber $prNumber -AutoApply
            } else {
              # In CI, we don't want interactive mode, so just report findings
              $suggestions = @()
              
              # Mock the interactive behavior by collecting suggestions
              $originalFunc = ${function:Apply-CopilotSuggestion}
              ${function:Apply-CopilotSuggestion} = {
                param($Suggestion)
                $script:suggestions += $Suggestion
              }
              
              Watch-CopilotReviews -PRNumber $prNumber -AutoApply
              
              # Restore original function
              ${function:Apply-CopilotSuggestion} = $originalFunc
              
              if ($suggestions.Count -gt 0) {
                # Create a comment with the suggestions
                $comment = @"
## ü§ñ Copilot Suggestions Summary

Found **$($suggestions.Count)** suggestions that can be applied:

"@
                foreach ($suggestion in $suggestions) {
                  $comment += @"
- **$($suggestion.Type)**: $($suggestion.Description)
  - Severity: $($suggestion.Severity)
  - File: ``$($suggestion.Path)``$(if ($suggestion.Line) { " (line $($suggestion.Line))" })

"@
                }
                
                $comment += @"

To apply these suggestions, you can:
1. Run manually: ``Watch-CopilotReviews -PRNumber $prNumber -Interactive``
2. Trigger this workflow with auto-apply enabled
3. Use: ``New-CopilotFix -PRNumber $prNumber -All``
"@
                
                gh pr comment $prNumber --body $comment
              }
            }
            
            Write-CustomLog -Level 'SUCCESS' -Message "Copilot integration completed successfully"
            
          } catch {
            Write-CustomLog -Level 'ERROR' -Message "Error processing Copilot suggestions: $_"
            exit 1
          }
      
      - name: Push changes
        if: success()
        shell: pwsh
        run: |
          # Check if there are any changes to push
          $changes = git status --porcelain
          if ($changes) {
            Write-Host "Changes detected, pushing to branch..."
            git push
          } else {
            Write-Host "No changes to push"
          }

  # Optional job to run tests after applying suggestions
  validate-changes:
    name: Validate Applied Changes
    needs: process-copilot-suggestions
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PowerShell
        uses: ./.github/actions/setup-powershell
      
      - name: Run Quick Tests
        shell: pwsh
        run: |
          ./tests/Run-UnifiedTests.ps1 -TestSuite Quick
      
      - name: Comment on PR
        if: always()
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $prNumber = '${{ github.event.pull_request.number }}'
          if (-not $prNumber -and '${{ github.event.issue.number }}') {
            $prNumber = '${{ github.event.issue.number }}'
          }
          
          if ($prNumber) {
            $status = if ('${{ job.status }}' -eq 'success') { "‚úÖ passed" } else { "‚ùå failed" }
            gh pr comment $prNumber --body "Validation tests $status after applying Copilot suggestions"
          }