---
name: Quick Validation

"on":
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write

env:
  AITHERZERO_CI: true
  AITHERZERO_NONINTERACTIVE: true

jobs:
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Bootstrap Environment
        shell: pwsh
        run: |
          Write-Host "üîß Bootstrapping CI environment..." -ForegroundColor Cyan
          ./bootstrap.ps1 -Mode New -NonInteractive
          Write-Host "‚úÖ Bootstrap completed" -ForegroundColor Green

      - name: Validate Syntax
        shell: pwsh
        run: |
          Write-Host "üìù Running syntax validation..." -ForegroundColor Cyan
          $env:AITHERZERO_CI_PROGRESS = "true"
          
          try {
            ./Start-AitherZero.ps1 -Mode Orchestrate -Sequence 0407 -CI
            Write-Host "‚úÖ Syntax validation passed" -ForegroundColor Green
          } catch {
            Write-Host "‚ùå Syntax validation failed: $_" -ForegroundColor Red
            exit 1
          }

      - name: Validate Module Load
        shell: pwsh
        run: |
          Write-Host "üì¶ Testing module loading..." -ForegroundColor Cyan
          
          try {
            # Test basic module loading
            Import-Module ./AitherZero.psd1 -Force -Verbose
            Write-Host "‚úÖ Module imports successfully" -ForegroundColor Green
            
            # Test basic functionality
            if (Get-Command Get-AitherConfiguration -ErrorAction SilentlyContinue) {
              $config = Get-AitherConfiguration -ErrorAction SilentlyContinue
              Write-Host "‚úÖ Configuration system functional" -ForegroundColor Green
            } else {
              Write-Host "‚ö†Ô∏è Configuration system not available" -ForegroundColor Yellow
            }
            
            # Display module info
            $moduleInfo = Get-Module AitherZero | Select-Object Name, Version, ModuleType, ExportedCommands
            Write-Host "üìã Module Info:" -ForegroundColor Cyan
            Write-Host "   Name: $($moduleInfo.Name)" -ForegroundColor White
            Write-Host "   Version: $($moduleInfo.Version)" -ForegroundColor White
            Write-Host "   Commands: $($moduleInfo.ExportedCommands.Count)" -ForegroundColor White
            
            Write-Host "‚úÖ Quick validation completed successfully" -ForegroundColor Green
            
          } catch {
            Write-Host "‚ùå Module validation failed: $_" -ForegroundColor Red
            Write-Host "Stack Trace:" -ForegroundColor Red
            Write-Host $_.ScriptStackTrace -ForegroundColor Red
            exit 1
          }