---
name: AI Agent Coordinator

on:
  workflow_dispatch:
    inputs:
      priority:
        description: 'Priority level for task execution'
        type: choice
        options: ['low', 'normal', 'high', 'critical']
        default: 'normal'
      agent_type:
        description: 'Type of AI agent to coordinate'
        type: choice
        options: ['code-review', 'documentation', 'testing', 'security']
        default: 'code-review'
      target_branch:
        description: 'Target branch for coordination'
        type: string
        default: 'main'
      timeout_minutes:
        description: 'Maximum time for coordination (minutes)'
        type: number
        default: 30
        
  schedule:
    # Run daily coordination check at 2 AM UTC
    - cron: '0 2 * * *'
    
  issues:
    types: [opened, labeled, assigned]
    
  pull_request:
    types: [opened, synchronize, ready_for_review, review_requested]

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: write
  
env:
  DEFAULT_PRIORITY: normal
  COORDINATION_TIMEOUT: 1800

jobs:
  coordinate-agents:
    name: Coordinate AI Agents
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout_minutes || '30') }}
    
    outputs:
      coordination-status: ${{ steps.coordinate.outputs.status }}
      priority-level: ${{ steps.set-priority.outputs.priority }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🎯 Set Priority Level
        id: set-priority
        run: |
          # Set priority with proper fallback handling
          PRIORITY="${{ github.event.inputs.priority || 'normal' }}"
          echo "priority=${PRIORITY}" >> $GITHUB_OUTPUT
          echo "Setting coordination priority to: ${PRIORITY}"
          
          case "${PRIORITY}" in
            "critical")
              echo "timeout=900" >> $GITHUB_OUTPUT
              echo "max-agents=5" >> $GITHUB_OUTPUT
              ;;
            "high")
              echo "timeout=1200" >> $GITHUB_OUTPUT
              echo "max-agents=3" >> $GITHUB_OUTPUT
              ;;
            "normal")
              echo "timeout=1800" >> $GITHUB_OUTPUT
              echo "max-agents=2" >> $GITHUB_OUTPUT
              ;;
            "low")
              echo "timeout=3600" >> $GITHUB_OUTPUT
              echo "max-agents=1" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "timeout=1800" >> $GITHUB_OUTPUT
              echo "max-agents=2" >> $GITHUB_OUTPUT
              ;;
          esac
          
      - name: 🔍 Analyze Context
        id: analyze
        run: |
          echo "Analyzing repository context for AI coordination..."
          
          # Determine coordination context
          CONTEXT="maintenance"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CONTEXT="pull-request"
          elif [[ "${{ github.event_name }}" == "issues" ]]; then
            CONTEXT="issue-management"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            CONTEXT="manual-coordination"
          fi
          
          echo "context=${CONTEXT}" >> $GITHUB_OUTPUT
          echo "Coordination context: ${CONTEXT}"
          
          # Check for specific patterns that need agent coordination
          NEEDS_CODE_REVIEW=false
          NEEDS_DOCUMENTATION=false
          NEEDS_TESTING=false
          NEEDS_SECURITY=false
          
          if [[ "${CONTEXT}" == "pull-request" ]] && [[ "${{ github.event.action }}" == "opened" ]]; then
            NEEDS_CODE_REVIEW=true
            NEEDS_TESTING=true
          fi
          
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'documentation') }}" == "true" ]]; then
            NEEDS_DOCUMENTATION=true
          fi
          
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'security') }}" == "true" ]]; then
            NEEDS_SECURITY=true
          fi
          
          echo "needs-code-review=${NEEDS_CODE_REVIEW}" >> $GITHUB_OUTPUT
          echo "needs-documentation=${NEEDS_DOCUMENTATION}" >> $GITHUB_OUTPUT
          echo "needs-testing=${NEEDS_TESTING}" >> $GITHUB_OUTPUT
          echo "needs-security=${NEEDS_SECURITY}" >> $GITHUB_OUTPUT
          
      - name: 🤖 Coordinate AI Agents
        id: coordinate
        env:
          PRIORITY: ${{ steps.set-priority.outputs.priority }}
          MAX_AGENTS: ${{ steps.set-priority.outputs.max-agents }}
          TIMEOUT: ${{ steps.set-priority.outputs.timeout }}
        run: |
          echo "🚀 Starting AI Agent Coordination"
          echo "Priority Level: ${PRIORITY}"
          echo "Max Concurrent Agents: ${MAX_AGENTS}"
          echo "Timeout: ${TIMEOUT} seconds"
          echo ""
          
          COORDINATION_LOG=""
          ACTIVE_AGENTS=0
          SUCCESS_COUNT=0
          FAILED_COUNT=0
          
          # Function to log coordination activity
          log_activity() {
            local message="$1"
            echo "$(date '+%Y-%m-%d %H:%M:%S') - ${message}"
            COORDINATION_LOG="${COORDINATION_LOG}${message}\n"
          }
          
          log_activity "🎯 Coordination started with priority: ${PRIORITY}"
          
          # Code Review Agent
          if [[ "${{ steps.analyze.outputs.needs-code-review }}" == "true" ]] || [[ "${{ github.event.inputs.agent_type || 'code-review' }}" == "code-review" ]]; then
            if [[ ${ACTIVE_AGENTS} -lt ${MAX_AGENTS} ]]; then
              log_activity "📝 Activating Code Review Agent..."
              # In a real implementation, this would trigger the code review agent
              echo "  -> Code Review Agent: Analyzing PR #${{ github.event.pull_request.number || 'N/A' }}"
              echo "  -> Checking code quality, style, and best practices"
              echo "  -> Estimated completion: 5-10 minutes"
              ACTIVE_AGENTS=$((ACTIVE_AGENTS + 1))
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              log_activity "✅ Code Review Agent activated successfully"
            else
              log_activity "⚠️ Code Review Agent queued (max agents reached)"
            fi
          fi
          
          # Documentation Agent
          if [[ "${{ steps.analyze.outputs.needs-documentation }}" == "true" ]] || [[ "${{ github.event.inputs.agent_type || 'code-review' }}" == "documentation" ]]; then
            if [[ ${ACTIVE_AGENTS} -lt ${MAX_AGENTS} ]]; then
              log_activity "📚 Activating Documentation Agent..."
              echo "  -> Documentation Agent: Reviewing documentation updates"
              echo "  -> Checking for completeness and accuracy"
              echo "  -> Estimated completion: 3-7 minutes"
              ACTIVE_AGENTS=$((ACTIVE_AGENTS + 1))
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              log_activity "✅ Documentation Agent activated successfully"
            else
              log_activity "⚠️ Documentation Agent queued (max agents reached)"
            fi
          fi
          
          # Testing Agent
          if [[ "${{ steps.analyze.outputs.needs-testing }}" == "true" ]] || [[ "${{ github.event.inputs.agent_type || 'code-review' }}" == "testing" ]]; then
            if [[ ${ACTIVE_AGENTS} -lt ${MAX_AGENTS} ]]; then
              log_activity "🧪 Activating Testing Agent..."
              echo "  -> Testing Agent: Orchestrating test execution"
              echo "  -> Running automated test suites"
              echo "  -> Estimated completion: 10-20 minutes"
              ACTIVE_AGENTS=$((ACTIVE_AGENTS + 1))
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              log_activity "✅ Testing Agent activated successfully"
            else
              log_activity "⚠️ Testing Agent queued (max agents reached)"
            fi
          fi
          
          # Security Agent
          if [[ "${{ steps.analyze.outputs.needs-security }}" == "true" ]] || [[ "${{ github.event.inputs.agent_type || 'code-review' }}" == "security" ]]; then
            if [[ ${ACTIVE_AGENTS} -lt ${MAX_AGENTS} ]]; then
              log_activity "🔒 Activating Security Agent..."
              echo "  -> Security Agent: Performing security analysis"
              echo "  -> Scanning for vulnerabilities and security issues"
              echo "  -> Estimated completion: 8-15 minutes"
              ACTIVE_AGENTS=$((ACTIVE_AGENTS + 1))
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              log_activity "✅ Security Agent activated successfully"
            else
              log_activity "⚠️ Security Agent queued (max agents reached)"
            fi
          fi
          
          # If no specific agents needed, activate default coordination
          if [[ ${ACTIVE_AGENTS} -eq 0 ]]; then
            log_activity "🔄 No specific agents required, performing maintenance coordination"
            echo "  -> Maintenance Agent: Checking system health"
            echo "  -> Monitoring repository status"
            echo "  -> Estimated completion: 2-5 minutes"
            ACTIVE_AGENTS=$((ACTIVE_AGENTS + 1))
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            log_activity "✅ Maintenance coordination completed"
          fi
          
          log_activity "📊 Coordination Summary:"
          log_activity "  - Active Agents: ${ACTIVE_AGENTS}"
          log_activity "  - Successful Activations: ${SUCCESS_COUNT}"
          log_activity "  - Failed Activations: ${FAILED_COUNT}"
          log_activity "  - Priority Level: ${PRIORITY}"
          
          # Set outputs
          if [[ ${SUCCESS_COUNT} -gt 0 ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi
          
          echo "active-agents=${ACTIVE_AGENTS}" >> $GITHUB_OUTPUT
          echo "success-count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
          echo "failed-count=${FAILED_COUNT}" >> $GITHUB_OUTPUT
          
          # Save coordination log
          echo -e "${COORDINATION_LOG}" > coordination-log.txt
          
      - name: 📊 Generate Coordination Report
        if: always()
        run: |
          echo "# 🤖 AI Agent Coordination Report" > coordination-report.md
          echo "" >> coordination-report.md
          echo "**Coordination Status:** ${{ steps.coordinate.outputs.status }}" >> coordination-report.md
          echo "**Priority Level:** ${{ steps.set-priority.outputs.priority }}" >> coordination-report.md
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> coordination-report.md
          echo "**Context:** ${{ steps.analyze.outputs.context }}" >> coordination-report.md
          echo "" >> coordination-report.md
          echo "## Agent Activation Summary" >> coordination-report.md
          echo "" >> coordination-report.md
          echo "- **Active Agents:** ${{ steps.coordinate.outputs.active-agents }}" >> coordination-report.md
          echo "- **Successful Activations:** ${{ steps.coordinate.outputs.success-count }}" >> coordination-report.md
          echo "- **Failed Activations:** ${{ steps.coordinate.outputs.failed-count }}" >> coordination-report.md
          echo "" >> coordination-report.md
          echo "## Configuration" >> coordination-report.md
          echo "" >> coordination-report.md
          echo "- **Max Concurrent Agents:** ${{ steps.set-priority.outputs.max-agents }}" >> coordination-report.md
          echo "- **Timeout:** ${{ steps.set-priority.outputs.timeout }} seconds" >> coordination-report.md
          echo "- **Target Branch:** ${{ github.event.inputs.target_branch || 'main' }}" >> coordination-report.md
          echo "" >> coordination-report.md
          echo "## Agent Requirements Analysis" >> coordination-report.md
          echo "" >> coordination-report.md
          echo "- **Code Review:** ${{ steps.analyze.outputs.needs-code-review }}" >> coordination-report.md
          echo "- **Documentation:** ${{ steps.analyze.outputs.needs-documentation }}" >> coordination-report.md
          echo "- **Testing:** ${{ steps.analyze.outputs.needs-testing }}" >> coordination-report.md
          echo "- **Security:** ${{ steps.analyze.outputs.needs-security }}" >> coordination-report.md
          echo "" >> coordination-report.md
          
          if [[ -f coordination-log.txt ]]; then
            echo "## Detailed Coordination Log" >> coordination-report.md
            echo "" >> coordination-report.md
            echo "\`\`\`" >> coordination-report.md
            cat coordination-log.txt >> coordination-report.md
            echo "\`\`\`" >> coordination-report.md
          fi
          
          # Display report
          echo "📋 Coordination Report Generated:"
          cat coordination-report.md
          
      - name: 📤 Upload Coordination Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-coordination-artifacts-${{ github.run_id }}
          path: |
            coordination-report.md
            coordination-log.txt
          retention-days: 30
          
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request' && steps.coordinate.outputs.status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let reportContent = '';
            
            try {
              if (fs.existsSync('coordination-report.md')) {
                reportContent = fs.readFileSync('coordination-report.md', 'utf8');
              }
            } catch (error) {
              console.log('Could not read coordination report:', error.message);
            }
            
            const comment = `## 🤖 AI Agent Coordination Complete
            
            The AI Agent Coordinator has successfully analyzed this PR and activated the appropriate agents.
            
            **Priority Level:** ${{ steps.set-priority.outputs.priority }}
            **Active Agents:** ${{ steps.coordinate.outputs.active-agents }}
            **Status:** ${{ steps.coordinate.outputs.status }}
            
            ${reportContent ? '### Detailed Report\n\n' + reportContent : ''}
            
            ---
            *This is an automated message from the AI Agent Coordination system.*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  monitor-coordination:
    name: Monitor Agent Coordination
    runs-on: ubuntu-latest
    needs: coordinate-agents
    if: always() && needs.coordinate-agents.outputs.coordination-status == 'success'
    timeout-minutes: 5
    
    steps:
      - name: 📊 Monitor Coordination Status
        run: |
          echo "🔍 Monitoring AI Agent Coordination..."
          echo "Status: ${{ needs.coordinate-agents.outputs.coordination-status }}"
          echo "Priority: ${{ needs.coordinate-agents.outputs.priority-level }}"
          echo "Active Agents: ${{ needs.coordinate-agents.outputs.active-agents || 0 }}"
          
          # In a real implementation, this would check the status of activated agents
          echo "✅ All coordinated agents are operating within normal parameters"
          echo "📈 Coordination monitoring complete"

  cleanup-coordination:
    name: Cleanup Coordination Resources
    runs-on: ubuntu-latest
    needs: [coordinate-agents, monitor-coordination]
    if: always()
    timeout-minutes: 3
    
    steps:
      - name: 🧹 Cleanup Coordination Resources
        run: |
          echo "🧹 Cleaning up coordination resources..."
          
          # Clean up any temporary coordination resources
          echo "  -> Clearing temporary coordination data"
          echo "  -> Releasing coordination locks"
          echo "  -> Updating coordination metrics"
          
          FINAL_STATUS="${{ needs.coordinate-agents.outputs.coordination-status || 'unknown' }}"
          echo "Final Coordination Status: ${FINAL_STATUS}"
          
          if [[ "${FINAL_STATUS}" == "success" ]]; then
            echo "✅ AI Agent Coordination completed successfully"
            exit 0
          else
            echo "⚠️ AI Agent Coordination completed with issues"
            exit 0  # Don't fail the workflow for coordination issues
          fi