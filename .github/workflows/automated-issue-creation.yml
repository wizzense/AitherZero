name: Automated Issue Creation

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize]
  workflow_run:
    workflows: ["CI/CD Pipeline", "Test Suite"]
    types: [completed]
  workflow_dispatch:
    inputs:
      issue_type:
        description: 'Type of issues to create'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - test-failures
          - code-violations
          - none

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test-and-analyze:
    name: Run Tests and Analysis
    runs-on: windows-latest
    outputs:
      has_failures: ${{ steps.check_failures.outputs.has_failures }}
      has_violations: ${{ steps.check_violations.outputs.has_violations }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup PowerShell
        uses: microsoft/setup-powershell@v1
        with:
          powershell-version: '7.4'
      
      - name: Initialize AitherZero
        run: |
          ./Initialize-AitherModules.ps1
        shell: pwsh
      
      - name: Run Unit Tests
        id: unit_tests
        run: |
          ./automation-scripts/0402_Run-UnitTests.ps1 -OutputFormat JSON -OutputPath ./tests/results/
        shell: pwsh
        continue-on-error: true
      
      - name: Run PSScriptAnalyzer
        id: analyzer
        run: |
          ./automation-scripts/0404_Run-PSScriptAnalyzer.ps1 -OutputFormat JSON -OutputPath ./tests/results/psscriptanalyzer-results.json
        shell: pwsh
        continue-on-error: true
      
      - name: Check for failures
        id: check_failures
        run: |
          $hasFailures = $false
          if (Test-Path "./tests/results/latest-test-results.json") {
            $results = Get-Content "./tests/results/latest-test-results.json" | ConvertFrom-Json
            if ($results.FailedCount -gt 0) {
              $hasFailures = $true
            }
          }
          echo "has_failures=$hasFailures" >> $env:GITHUB_OUTPUT
        shell: pwsh
      
      - name: Check for violations
        id: check_violations
        run: |
          $hasViolations = $false
          if (Test-Path "./tests/results/psscriptanalyzer-results.json") {
            $violations = Get-Content "./tests/results/psscriptanalyzer-results.json" | ConvertFrom-Json
            if ($violations.Count -gt 0) {
              $hasViolations = $true
            }
          }
          echo "has_violations=$hasViolations" >> $env:GITHUB_OUTPUT
        shell: pwsh
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./tests/results/
          retention-days: 30

  save-context:
    name: Save Work Context
    runs-on: windows-latest
    needs: test-and-analyze
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PowerShell
        uses: microsoft/setup-powershell@v1
        with:
          powershell-version: '7.4'
      
      - name: Save work context
        run: |
          ./automation-scripts/0820_Save-WorkContext.ps1 -IncludeHistory -CompressContext
        shell: pwsh
      
      - name: Generate continuation prompt
        run: |
          ./automation-scripts/0821_Generate-ContinuationPrompt.ps1 -MaxTokens 4000
        shell: pwsh
      
      - name: Upload context artifacts
        uses: actions/upload-artifact@v4
        with:
          name: session-context
          path: |
            ./.claude/session-context.json
            ./.claude/session-context.md
            ./.claude/continuation-prompt.md
          retention-days: 7

  create-test-issues:
    name: Create Issues from Test Failures
    runs-on: windows-latest
    needs: [test-and-analyze, save-context]
    if: |
      needs.test-and-analyze.outputs.has_failures == 'true' &&
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PowerShell
        uses: microsoft/setup-powershell@v1
        with:
          powershell-version: '7.4'
      
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ./tests/results/
      
      - name: Create test failure issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./automation-scripts/0810_Create-IssueFromTestFailure.ps1 `
            -IssueType TestFailure `
            -AutoCreate `
            -GitHubActions
        shell: pwsh

  create-violation-issues:
    name: Create Issues from Code Violations
    runs-on: windows-latest
    needs: [test-and-analyze, save-context]
    if: |
      needs.test-and-analyze.outputs.has_violations == 'true' &&
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PowerShell
        uses: microsoft/setup-powershell@v1
        with:
          powershell-version: '7.4'
      
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ./tests/results/
      
      - name: Create code violation issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./automation-scripts/0810_Create-IssueFromTestFailure.ps1 `
            -IssueType CodeViolation `
            -AutoCreate `
            -GitHubActions
        shell: pwsh

  update-pr:
    name: Update PR with Results
    runs-on: windows-latest
    needs: [test-and-analyze, create-test-issues, create-violation-issues]
    if: |
      always() && 
      github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download session context
        uses: actions/download-artifact@v4
        with:
          name: session-context
          path: ./.claude/
      
      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read context if available
            let contextSummary = '';
            try {
              const contextPath = './.claude/session-context.md';
              if (fs.existsSync(contextPath)) {
                const context = fs.readFileSync(contextPath, 'utf8');
                // Extract summary section
                const lines = context.split('\n').slice(0, 20);
                contextSummary = lines.join('\n');
              }
            } catch (e) {
              console.log('Could not read context:', e);
            }
            
            const comment = `## ü§ñ Automated Test Results
            
            ### Test Execution Summary
            - **Unit Tests**: ${{ needs.test-and-analyze.outputs.has_failures == 'true' && '‚ùå Failures detected' || '‚úÖ All passed' }}
            - **Code Analysis**: ${{ needs.test-and-analyze.outputs.has_violations == 'true' && '‚ö†Ô∏è Violations found' || '‚úÖ No violations' }}
            
            ### Actions Taken
            ${{ needs.test-and-analyze.outputs.has_failures == 'true' && '- üêõ Test failure issues created' || '' }}
            ${{ needs.test-and-analyze.outputs.has_violations == 'true' && '- üìù Code violation issues created' || '' }}
            
            ### Session Context
            ${contextSummary || 'Context saved for AI continuation'}
            
            ### Next Steps
            1. Review any created issues
            2. Fix failing tests or code violations
            3. Re-run workflow after fixes
            
            ---
            *Generated by AitherZero Automated Issue Creation workflow*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });