name: ü§ñ Automated Release Pipeline
run-name: ü§ñ Automated Release - ${{ github.event.inputs.release_type || 'manual' }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      description:
        description: 'Release Description'
        required: true
        default: 'Automated release with enhanced testing infrastructure'
      skip_tests:
        description: 'Skip comprehensive testing (emergency releases only)'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (create PR but do not merge or tag)'
        required: false
        default: false
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

# Prevent concurrent automated releases
concurrency:
  group: automated-release
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  validate-environment:
    name: üîç Validate Release Environment
    runs-on: ubuntu-latest
    outputs:
      can-proceed: ${{ steps.validation.outputs.can-proceed }}
      current-version: ${{ steps.validation.outputs.current-version }}
      next-version: ${{ steps.validation.outputs.next-version }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install PowerShell 7
        run: |
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.1/powershell_7.4.1-1.deb_amd64.deb
          sudo dpkg -i powershell_7.4.1-1.deb_amd64.deb
          sudo apt-get install -f -y
      
      - name: Validate Release Environment
        id: validation
        shell: pwsh
        run: |
          Write-Host "üîç Validating automated release environment..." -ForegroundColor Yellow
          
          $canProceed = $true
          $issues = @()
          
          try {
            # Check if we're on main branch
            $currentBranch = git branch --show-current
            if ($currentBranch -ne "main") {
              $issues += "Must be on main branch (currently on: $currentBranch)"
              $canProceed = $false
            }
            
            # Check for uncommitted changes
            $gitStatus = git status --porcelain
            if ($gitStatus) {
              $issues += "Working directory must be clean"
              $canProceed = $false
            }
            
            # Get current version
            $currentVersion = Get-Content "VERSION" -Raw -ErrorAction SilentlyContinue
            if (-not $currentVersion) {
              $issues += "VERSION file not found"
              $canProceed = $false
            } else {
              $currentVersion = $currentVersion.Trim()
              Write-Host "Current version: $currentVersion" -ForegroundColor Cyan
            }
            
            # Calculate next version
            $releaseType = "${{ github.event.inputs.release_type }}"
            $versionParts = $currentVersion -split '\.'
            switch ($releaseType) {
              'major' { 
                $nextVersion = "$([int]$versionParts[0] + 1).0.0"
              }
              'minor' { 
                $nextVersion = "$($versionParts[0]).$([int]$versionParts[1] + 1).0"
              }
              'patch' { 
                $nextVersion = "$($versionParts[0]).$($versionParts[1]).$([int]$versionParts[2] + 1)"
              }
            }
            
            Write-Host "Next version: $nextVersion" -ForegroundColor Green
            
            # Check if tag already exists
            $existingTag = git tag -l "v$nextVersion"
            if ($existingTag) {
              $issues += "Tag v$nextVersion already exists"
              $canProceed = $false
            }
            
            # Check for open release PRs
            $openReleasePRs = gh pr list --state open --label "automated-release" --limit 10 --json number,title
            if ($openReleasePRs -and ($openReleasePRs | ConvertFrom-Json).Count -gt 0) {
              $issues += "Open automated release PR exists - close or merge before creating new release"
              $canProceed = $false
            }
            
            # Validate PatchManager availability
            if (-not (Test-Path "./aither-core/modules/PatchManager")) {
              $issues += "PatchManager module not found"
              $canProceed = $false
            }
            
            # Set outputs
            "can-proceed=$($canProceed.ToString().ToLower())" >> $env:GITHUB_OUTPUT
            "current-version=$currentVersion" >> $env:GITHUB_OUTPUT
            "next-version=$nextVersion" >> $env:GITHUB_OUTPUT
            
            if ($canProceed) {
              Write-Host "‚úÖ Environment validation passed" -ForegroundColor Green
            } else {
              Write-Host "‚ùå Environment validation failed:" -ForegroundColor Red
              $issues | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
            }
            
          } catch {
            Write-Host "‚ùå Environment validation error: $_" -ForegroundColor Red
            "can-proceed=false" >> $env:GITHUB_OUTPUT
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run-comprehensive-tests:
    name: üß™ Comprehensive Pre-Release Testing
    needs: validate-environment
    if: needs.validate-environment.outputs.can-proceed == 'true' && github.event.inputs.skip_tests != 'true'
    uses: ./.github/workflows/intelligent-ci.yml
    with:
      force_full_run: true
    secrets: inherit

  create-automated-release:
    name: üöÄ Create Automated Release
    needs: [validate-environment, run-comprehensive-tests]
    if: needs.validate-environment.outputs.can-proceed == 'true' && (success() || github.event.inputs.skip_tests == 'true')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install PowerShell 7
        run: |
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.1/powershell_7.4.1-1.deb_amd64.deb
          sudo dpkg -i powershell_7.4.1-1.deb_amd64.deb
          sudo apt-get install -f -y
      
      - name: Configure Git
        run: |
          git config --global user.name "AitherZero Bot"
          git config --global user.email "bot@aitherzero.ai"
      
      - name: Execute Automated Release Workflow
        shell: pwsh
        run: |
          Write-Host "ü§ñ Executing automated release workflow..." -ForegroundColor Yellow
          
          $ErrorActionPreference = 'Stop'
          
          try {
            # Import PatchManager
            Import-Module ./aither-core/modules/PatchManager -Force
            
            $releaseParams = @{
              ReleaseType = "${{ github.event.inputs.release_type }}"
              Description = "${{ github.event.inputs.description }}"
              DryRun = [bool]"${{ github.event.inputs.dry_run }}"
            }
            
            Write-Host "Release Parameters:" -ForegroundColor Cyan
            $releaseParams | Format-Table -AutoSize
            
            # Execute the automated release workflow
            $result = Invoke-ReleaseWorkflow @releaseParams
            
            # Set outputs for next steps
            if ($result.Success) {
              Write-Host "‚úÖ Automated release workflow completed successfully" -ForegroundColor Green
              Write-Host "  PR Number: $($result.PullRequestNumber)" -ForegroundColor Cyan
              Write-Host "  Version: $($result.Version)" -ForegroundColor Cyan
              
              # Export results for next job
              @{
                success = $result.Success
                version = $result.Version
                prNumber = $result.PullRequestNumber
                tagCreated = $result.TagCreated
                releaseUrl = $result.ReleaseUrl
              } | ConvertTo-Json | Out-File "release-result.json" -Encoding UTF8
              
            } else {
              Write-Host "‚ùå Automated release workflow failed" -ForegroundColor Red
              throw "Release workflow failed: $($result.Error)"
            }
            
          } catch {
            Write-Host "‚ùå Automated release execution failed: $_" -ForegroundColor Red
            
            # Create failure issue
            $issueTitle = "üö® Automated Release Failure - v${{ needs.validate-environment.outputs.next-version }}"
            $issueBody = @"
            ## üö® Automated Release Failure

            **Release Type**: ${{ github.event.inputs.release_type }}
            **Target Version**: v${{ needs.validate-environment.outputs.next-version }}
            **Description**: ${{ github.event.inputs.description }}
            **Workflow Run**: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### Error Details
            ```
            $($_.Exception.Message)
            ```

            ### Stack Trace
            ```
            $($_.ScriptStackTrace)
            ```

            ### Next Steps
            1. Review the error details above
            2. Fix any issues identified
            3. Re-run the automated release workflow
            4. Consider manual release if automation continues to fail

            ---
            *ü§ñ This issue was automatically created by the Automated Release Pipeline*
            *Created: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')*
            "@

            gh issue create --title $issueTitle --body $issueBody --label "automated-release,high-priority,bug"
            
            throw
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Release Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: release-results-${{ github.run_number }}
          path: |
            release-result.json
          retention-days: 90

  trigger-build-release:
    name: üì¶ Trigger Build & Release Pipeline
    needs: [validate-environment, create-automated-release]
    if: success() && github.event.inputs.dry_run != 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Release Results
        uses: actions/download-artifact@v4
        with:
          name: release-results-${{ github.run_number }}
      
      - name: Trigger Build & Release Pipeline
        shell: pwsh
        run: |
          Write-Host "üì¶ Triggering build and release pipeline..." -ForegroundColor Yellow
          
          try {
            $releaseResult = Get-Content "release-result.json" | ConvertFrom-Json
            
            if ($releaseResult.tagCreated) {
              Write-Host "‚úÖ Release tag created: v$($releaseResult.version)" -ForegroundColor Green
              Write-Host "üì¶ Build & Release pipeline will automatically trigger on tag push" -ForegroundColor Cyan
              
              # Wait a moment for the tag-triggered workflow to start
              Start-Sleep -Seconds 10
              
              # Check if the workflow started
              $workflows = gh run list --workflow="build-release.yml" --limit 5 --json status,conclusion,url
              $recentWorkflow = ($workflows | ConvertFrom-Json) | Where-Object { $_.status -eq "in_progress" -or $_.status -eq "queued" } | Select-Object -First 1
              
              if ($recentWorkflow) {
                Write-Host "‚úÖ Build & Release pipeline triggered successfully" -ForegroundColor Green
                Write-Host "üîó Workflow URL: $($recentWorkflow.url)" -ForegroundColor Cyan
              } else {
                Write-Host "‚ö†Ô∏è Build & Release pipeline may not have triggered automatically" -ForegroundColor Yellow
                Write-Host "üîß You may need to trigger it manually or check for issues" -ForegroundColor Yellow
              }
            } else {
              Write-Host "‚ÑπÔ∏è No tag created (likely dry run or PR only)" -ForegroundColor Blue
            }
            
          } catch {
            Write-Host "‚ùå Failed to verify build pipeline trigger: $_" -ForegroundColor Red
            # Don't fail the overall workflow for this verification step
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-summary:
    name: üìã Release Summary
    needs: [validate-environment, run-comprehensive-tests, create-automated-release, trigger-build-release]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Release Results
        uses: actions/download-artifact@v4
        if: needs.create-automated-release.result == 'success'
        continue-on-error: true
        with:
          name: release-results-${{ github.run_number }}
      
      - name: Generate Release Summary
        shell: pwsh
        run: |
          Write-Host "üìã Automated Release Pipeline Summary" -ForegroundColor Yellow
          Write-Host "=====================================`n" -ForegroundColor Yellow
          
          $releaseType = "${{ github.event.inputs.release_type }}"
          $targetVersion = "${{ needs.validate-environment.outputs.next-version }}"
          $dryRun = "${{ github.event.inputs.dry_run }}" -eq "true"
          $skipTests = "${{ github.event.inputs.skip_tests }}" -eq "true"
          
          Write-Host "üéØ Release Configuration:" -ForegroundColor Cyan
          Write-Host "  - Type: $releaseType" -ForegroundColor White
          Write-Host "  - Target Version: v$targetVersion" -ForegroundColor White
          Write-Host "  - Current Version: v${{ needs.validate-environment.outputs.current-version }}" -ForegroundColor White
          Write-Host "  - Description: ${{ github.event.inputs.description }}" -ForegroundColor White
          Write-Host "  - Dry Run: $dryRun" -ForegroundColor White
          Write-Host "  - Skip Tests: $skipTests" -ForegroundColor White
          
          Write-Host "`nüìä Pipeline Status:" -ForegroundColor Cyan
          Write-Host "  - Environment Validation: ${{ needs.validate-environment.result }}" -ForegroundColor $(if ('${{ needs.validate-environment.result }}' -eq 'success') { 'Green' } else { 'Red' })
          Write-Host "  - Comprehensive Testing: ${{ needs.run-comprehensive-tests.result }}" -ForegroundColor $(if ('${{ needs.run-comprehensive-tests.result }}' -eq 'success') { 'Green' } elseif ('${{ needs.run-comprehensive-tests.result }}' -eq 'skipped') { 'Yellow' } else { 'Red' })
          Write-Host "  - Automated Release: ${{ needs.create-automated-release.result }}" -ForegroundColor $(if ('${{ needs.create-automated-release.result }}' -eq 'success') { 'Green' } else { 'Red' })
          Write-Host "  - Build Pipeline Trigger: ${{ needs.trigger-build-release.result }}" -ForegroundColor $(if ('${{ needs.trigger-build-release.result }}' -eq 'success') { 'Green' } elseif ('${{ needs.trigger-build-release.result }}' -eq 'skipped') { 'Yellow' } else { 'Red' })
          
          # Try to load release results if available
          if (Test-Path "release-result.json") {
            try {
              $releaseResult = Get-Content "release-result.json" | ConvertFrom-Json
              
              Write-Host "`nüéâ Release Results:" -ForegroundColor Green
              Write-Host "  - Success: $($releaseResult.success)" -ForegroundColor Green
              Write-Host "  - Version: v$($releaseResult.version)" -ForegroundColor Green
              if ($releaseResult.prNumber) {
                Write-Host "  - Pull Request: #$($releaseResult.prNumber)" -ForegroundColor Green
              }
              if ($releaseResult.tagCreated) {
                Write-Host "  - Tag Created: Yes" -ForegroundColor Green
              }
              if ($releaseResult.releaseUrl) {
                Write-Host "  - Release URL: $($releaseResult.releaseUrl)" -ForegroundColor Green
              }
            } catch {
              Write-Host "`n‚ö†Ô∏è Could not parse release results" -ForegroundColor Yellow
            }
          }
          
          # Overall status
          if ('${{ needs.validate-environment.result }}' -eq 'success' -and '${{ needs.create-automated-release.result }}' -eq 'success') {
            Write-Host "`n‚úÖ AUTOMATED RELEASE COMPLETED SUCCESSFULLY!" -ForegroundColor Green
            if (-not $dryRun) {
              Write-Host "üì¶ Build & Release pipeline should be running or queued" -ForegroundColor Cyan
              Write-Host "üîó Monitor progress: ${{ github.server_url }}/${{ github.repository }}/actions" -ForegroundColor Cyan
            } else {
              Write-Host "üìã Dry run completed - review the PR before merging" -ForegroundColor Cyan
            }
          } elseif ('${{ needs.validate-environment.result }}' -ne 'success') {
            Write-Host "`n‚ùå RELEASE FAILED - Environment validation issues" -ForegroundColor Red
            Write-Host "üîß Fix validation issues and try again" -ForegroundColor Yellow
          } else {
            Write-Host "`n‚ùå RELEASE FAILED - Check job logs for details" -ForegroundColor Red
            Write-Host "üêõ An issue may have been created automatically" -ForegroundColor Yellow
          }
          
          Write-Host "`nüìä Enhanced Testing Infrastructure:" -ForegroundColor Cyan
          Write-Host "  ‚ö° Parallel execution enabled for 60-80% speed improvement" -ForegroundColor Green
          Write-Host "  üß† Intelligent resource detection and adaptive throttling" -ForegroundColor Green
          Write-Host "  üîç Comprehensive validation with performance monitoring" -ForegroundColor Green
          Write-Host "  üêõ Automatic GitHub issue creation for test failures" -ForegroundColor Green