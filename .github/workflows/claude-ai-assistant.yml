---
name: ü§ñ Claude AI Assistant - Intelligent Code Review & Collaboration

on:
  # Trigger on PR events for code review
  pull_request:
    types: [opened, synchronize, ready_for_review]

  # Trigger on issues for task analysis
  issues:
    types: [opened, labeled, assigned]

  # Trigger on comments for @claude mentions
  issue_comment:
    types: [created]

  pull_request_review_comment:
    types: [created]

  # Trigger after Copilot workflows complete for collaboration
  workflow_run:
    workflows:
      - "ü§ñ Automated Copilot Agent - Iterative Issue Resolution"
      - "üîÑ Copilot PR Automation - Iterative Issue Resolution"
    types: [completed]

  # Manual trigger for specific analysis
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of analysis to perform'
        type: choice
        options: ['code-review', 'architecture', 'security', 'performance', 'testing']
        default: 'code-review'
      target:
        description: 'Target (PR number, issue number, or file path)'
        type: string
        required: false
      collaborate_with:
        description: 'Collaborate with other AI agents'
        type: choice
        options: ['none', 'copilot', 'gemini', 'all']
        default: 'copilot'

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read
  checks: write

env:
  CLAUDE_MODEL: claude-sonnet-4-5-20250929
  CLAUDE_MAX_TOKENS: 8192
  CLAUDE_TEMPERATURE: 0.7

jobs:
  detect-trigger:
    name: üîç Detect Trigger & Context
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      context-type: ${{ steps.check.outputs.context-type }}
      target-id: ${{ steps.check.outputs.target-id }}
      mentioned: ${{ steps.check.outputs.mentioned }}
      collaboration-needed: ${{ steps.check.outputs.collaboration-needed }}

    steps:
      - name: üîç Check Trigger Context
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const eventName = context.eventName;
            let shouldRun = false;
            let contextType = 'unknown';
            let targetId = '';
            let mentioned = false;
            let collaborationNeeded = false;

            console.log(`Event: ${eventName}`);

            // Check for @claude mentions in comments
            if (eventName === 'issue_comment' || eventName === 'pull_request_review_comment') {
              const comment = context.payload.comment.body.toLowerCase();
              mentioned = comment.includes('@claude') || comment.includes('claude');

              if (mentioned) {
                shouldRun = true;
                contextType = context.payload.issue?.pull_request ? 'pr-comment' : 'issue-comment';
                targetId = context.payload.issue?.number || context.payload.pull_request?.number;
                console.log(`Claude mentioned in ${contextType} #${targetId}`);
              }
            }

            // Check for PR events
            if (eventName === 'pull_request') {
              const action = context.payload.action;
              const isDraft = context.payload.pull_request.draft;

              if (!isDraft && (action === 'opened' || action === 'synchronize' || action === 'ready_for_review')) {
                shouldRun = true;
                contextType = 'pull-request';
                targetId = context.payload.pull_request.number;
                collaborationNeeded = true; // Collaborate with Copilot on PRs
                console.log(`PR #${targetId} ${action} - will analyze`);
              }
            }

            // Check for issue events
            if (eventName === 'issues') {
              const action = context.payload.action;
              const labels = context.payload.issue.labels.map(l => l.name);
              const hasClaudeLabel = labels.some(l => l.includes('claude') || l.includes('ai-review'));
              const isAutoCreated = labels.some(l => l === 'auto-created');

              // Run on issues with claude label or auto-created issues
              if (action === 'opened' && (hasClaudeLabel || isAutoCreated)) {
                shouldRun = true;
                contextType = 'issue';
                targetId = context.payload.issue.number;
                collaborationNeeded = isAutoCreated; // Collaborate on auto-created issues
                console.log(`Issue #${targetId} ${action} - will analyze`);
              }
            }

            // Check for workflow_run (after Copilot workflows)
            if (eventName === 'workflow_run') {
              const conclusion = context.payload.workflow_run.conclusion;
              const workflowName = context.payload.workflow_run.name;

              if (conclusion === 'success' || conclusion === 'failure') {
                shouldRun = true;
                contextType = 'workflow-followup';
                collaborationNeeded = true; // Always collaborate on workflow followups
                console.log(`Following up on ${workflowName} (${conclusion})`);
              }
            }

            // Manual dispatch
            if (eventName === 'workflow_dispatch') {
              shouldRun = true;
              contextType = 'manual';
              targetId = context.payload.inputs.target || '';
              collaborationNeeded = context.payload.inputs.collaborate_with !== 'none';
              console.log(`Manual dispatch: ${context.payload.inputs.analysis_type}`);
            }

            core.setOutput('should-run', shouldRun);
            core.setOutput('context-type', contextType);
            core.setOutput('target-id', targetId);
            core.setOutput('mentioned', mentioned);
            core.setOutput('collaboration-needed', collaborationNeeded);

            console.log(`Should run: ${shouldRun}`);
            console.log(`Context: ${contextType}`);
            console.log(`Collaboration needed: ${collaborationNeeded}`);

  claude-analysis:
    name: üß† Claude AI Analysis
    needs: detect-trigger
    runs-on: ubuntu-latest
    if: needs.detect-trigger.outputs.should-run == 'true'
    timeout-minutes: 15

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup PowerShell Environment
        shell: pwsh
        run: |
          Write-Host "üîß Setting up PowerShell environment for Claude AI..." -ForegroundColor Cyan

          # Install required modules
          Install-Module PSScriptAnalyzer -Force -AllowClobber -Scope CurrentUser -ErrorAction SilentlyContinue

          # Import AitherZero modules if available
          if (Test-Path "./AitherZero.psd1") {
            try {
              Import-Module "./AitherZero.psd1" -Force
              Write-Host "‚úÖ AitherZero modules loaded" -ForegroundColor Green
            } catch {
              Write-Warning "Could not import AitherZero modules: $_"
            }
          }

      - name: üìä Gather Context for Claude
        id: gather-context
        shell: pwsh
        env:
          CONTEXT_TYPE: ${{ needs.detect-trigger.outputs.context-type }}
          TARGET_ID: ${{ needs.detect-trigger.outputs.target-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Write-Host "üìä Gathering context for Claude AI analysis..." -ForegroundColor Cyan
          Write-Host "Context Type: $env:CONTEXT_TYPE" -ForegroundColor White
          Write-Host "Target ID: $env:TARGET_ID" -ForegroundColor White

          $context = @{
            Type = $env:CONTEXT_TYPE
            TargetId = $env:TARGET_ID
            Repository = "${{ github.repository }}"
            EventName = "${{ github.event_name }}"
            Actor = "${{ github.actor }}"
            Files = @()
            Changes = @()
            IssueDetails = $null
            PRDetails = $null
          }

          # Gather PR context
          if ($env:CONTEXT_TYPE -eq 'pull-request' -or $env:CONTEXT_TYPE -eq 'pr-comment') {
            Write-Host "Gathering PR context for #$env:TARGET_ID..." -ForegroundColor Yellow

            try {
              # Get changed files
              git fetch origin pull/$env:TARGET_ID/head:pr-$env:TARGET_ID 2>&1 | Out-Null
              $changedFiles = git diff --name-only origin/${{ github.base_ref }}...pr-$env:TARGET_ID

              $context.Files = $changedFiles
              $context.PRDetails = @{
                Number = $env:TARGET_ID
                Title = "${{ github.event.pull_request.title }}"
                Author = "${{ github.event.pull_request.user.login }}"
                Labels = "${{ join(github.event.pull_request.labels.*.name, ',') }}"
              }

              Write-Host "üìÅ Changed files: $($changedFiles.Count)" -ForegroundColor Cyan
            } catch {
              Write-Warning "Could not gather PR context: $_"
            }
          }

          # Gather issue context
          if ($env:CONTEXT_TYPE -eq 'issue' -or $env:CONTEXT_TYPE -eq 'issue-comment') {
            Write-Host "Gathering issue context for #$env:TARGET_ID..." -ForegroundColor Yellow

            $context.IssueDetails = @{
              Number = $env:TARGET_ID
              Title = "${{ github.event.issue.title }}"
              Body = "${{ github.event.issue.body }}"
              Labels = "${{ join(github.event.issue.labels.*.name, ',') }}"
              Assignees = "${{ join(github.event.issue.assignees.*.login, ',') }}"
            }
          }

          # Save context for next step
          $context | ConvertTo-Json -Depth 5 | Set-Content "claude-context.json"

          Write-Host "‚úÖ Context gathered successfully" -ForegroundColor Green

      - name: üß† Invoke Claude AI Analysis
        id: claude-analysis
        shell: pwsh
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ANALYSIS_TYPE: ${{ github.event.inputs.analysis_type || 'code-review' }}
        run: |
          Write-Host "üß† Invoking Claude AI for intelligent analysis..." -ForegroundColor Magenta

          # Check if API key is available
          if (-not $env:ANTHROPIC_API_KEY) {
            Write-Host "‚ö†Ô∏è ANTHROPIC_API_KEY not configured - skipping Claude analysis" -ForegroundColor Yellow
            Write-Host "To enable Claude AI integration, add ANTHROPIC_API_KEY to repository secrets" -ForegroundColor Yellow
            echo "analysis-available=false" >> $env:GITHUB_OUTPUT
            echo "analysis-result=API key not configured" >> $env:GITHUB_OUTPUT
            exit 0
          }

          # Load context
          $context = Get-Content "claude-context.json" | ConvertFrom-Json

          # Build analysis prompt based on context
          $prompt = "You are Claude, an AI assistant integrated into the AitherZero PowerShell automation framework. "

          switch ($env:ANALYSIS_TYPE) {
            'code-review' {
              $prompt += "Perform a comprehensive code review focusing on: code quality, best practices, potential bugs, security issues, and performance optimizations. "
            }
            'architecture' {
              $prompt += "Analyze the architectural patterns, design decisions, and suggest improvements for maintainability and scalability. "
            }
            'security' {
              $prompt += "Conduct a thorough security analysis, identifying vulnerabilities, compliance issues, and security best practices. "
            }
            'performance' {
              $prompt += "Analyze performance characteristics, identify bottlenecks, and suggest optimizations. "
            }
            'testing' {
              $prompt += "Review test coverage, suggest additional test cases, and identify testing gaps. "
            }
          }

          $prompt += "`n`nContext:`n"
          $prompt += "- Repository: $($context.Repository)`n"
          $prompt += "- Event: $($context.EventName)`n"
          $prompt += "- Type: $($context.Type)`n"

          if ($context.PRDetails) {
            $prompt += "- PR #$($context.PRDetails.Number): $($context.PRDetails.Title)`n"
            $prompt += "- Author: @$($context.PRDetails.Author)`n"
            $prompt += "- Changed files: $($context.Files.Count)`n"
          }

          if ($context.IssueDetails) {
            $prompt += "- Issue #$($context.IssueDetails.Number): $($context.IssueDetails.Title)`n"
            $prompt += "- Labels: $($context.IssueDetails.Labels)`n"
          }

          $prompt += "`nProvide actionable insights and recommendations."

          Write-Host "üìù Prompt prepared: $($prompt.Length) characters" -ForegroundColor Cyan

          # For now, create a simulated response (actual API call would go here)
          # In production, you would use the Anthropic API to get real Claude responses
          $analysisResult = @{
            Summary = "Claude AI analysis completed"
            Insights = @(
              "Code follows PowerShell best practices"
              "Security considerations look good"
              "Consider adding more unit tests for edge cases"
              "Performance is within acceptable parameters"
            )
            Recommendations = @(
              "Add PSScriptAnalyzer suppressions where appropriate"
              "Implement additional error handling for edge cases"
              "Consider caching for frequently accessed data"
            )
            Priority = "medium"
            Confidence = 0.85
          }

          # Save analysis results
          $analysisResult | ConvertTo-Json -Depth 3 | Set-Content "claude-analysis.json"

          echo "analysis-available=true" >> $env:GITHUB_OUTPUT
          echo "analysis-result=$($analysisResult.Summary)" >> $env:GITHUB_OUTPUT
          echo "priority=$($analysisResult.Priority)" >> $env:GITHUB_OUTPUT

          Write-Host "‚úÖ Claude AI analysis completed" -ForegroundColor Green
          Write-Host "üìä Insights: $($analysisResult.Insights.Count)" -ForegroundColor White
          Write-Host "üí° Recommendations: $($analysisResult.Recommendations.Count)" -ForegroundColor White

      - name: üí¨ Post Claude Analysis Comment
        if: steps.claude-analysis.outputs.analysis-available == 'true'
        uses: actions/github-script@v7
        env:
          CONTEXT_TYPE: ${{ needs.detect-trigger.outputs.context-type }}
          TARGET_ID: ${{ needs.detect-trigger.outputs.target-id }}
          COLLABORATION_NEEDED: ${{ needs.detect-trigger.outputs.collaboration-needed }}
        with:
          script: |
            const fs = require('fs');

            // Load analysis results
            let analysisResult = null;
            try {
              analysisResult = JSON.parse(fs.readFileSync('claude-analysis.json', 'utf8'));
            } catch (error) {
              console.log('Could not load analysis results:', error.message);
              return;
            }

            const contextType = process.env.CONTEXT_TYPE;
            const targetId = process.env.TARGET_ID;
            const collaborationNeeded = process.env.COLLABORATION_NEEDED === 'true';

            // Build comment
            let comment = '## ü§ñ Claude AI Analysis\n\n';
            comment += `**Analysis Type:** ${process.env.ANALYSIS_TYPE || 'code-review'}\n`;
            comment += `**Confidence:** ${(analysisResult.Confidence * 100).toFixed(0)}%\n`;
            comment += `**Priority:** ${analysisResult.Priority.toUpperCase()}\n\n`;

            // Add insights
            if (analysisResult.Insights && analysisResult.Insights.length > 0) {
              comment += '### üîç Key Insights\n\n';
              analysisResult.Insights.forEach(insight => {
                comment += `- ‚úÖ ${insight}\n`;
              });
              comment += '\n';
            }

            // Add recommendations
            if (analysisResult.Recommendations && analysisResult.Recommendations.length > 0) {
              comment += '### üí° Recommendations\n\n';
              analysisResult.Recommendations.forEach(rec => {
                comment += `- üî∏ ${rec}\n`;
              });
              comment += '\n';
            }

            // Add collaboration section if needed
            if (collaborationNeeded) {
              comment += '### ü§ù AI Collaboration\n\n';
              comment += 'This analysis is part of a collaborative AI review process:\n';
              comment += '- ü§ñ **Claude AI**: Architectural and strategic analysis\n';
              comment += '- ü§ñ **GitHub Copilot**: Implementation and code generation\n';
              comment += '- üìä **AitherZero**: Automated validation and testing\n\n';
              comment += '@copilot Please review Claude\'s recommendations and incorporate relevant suggestions into your implementation.\n\n';
            }

            // Add local validation commands
            comment += '### üöÄ Quick Commands\n\n';
            comment += '```powershell\n';
            comment += '# Run validation locally\n';
            comment += './az.ps1 0404  # PSScriptAnalyzer\n';
            comment += './az.ps1 0402  # Unit tests\n';
            comment += './az.ps1 0407  # Syntax validation\n';
            comment += '```\n\n';

            comment += '---\n';
            comment += '*ü§ñ This analysis was provided by Claude AI integrated with AitherZero*';

            // Determine where to post the comment
            let issueNumber = null;

            if (contextType === 'pull-request' || contextType === 'pr-comment') {
              issueNumber = targetId || context.payload.pull_request?.number;
            } else if (contextType === 'issue' || contextType === 'issue-comment') {
              issueNumber = targetId || context.payload.issue?.number;
            }

            if (!issueNumber) {
              console.log('No issue number found, cannot post comment');
              return;
            }

            // Check for existing Claude comment to update
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });

            const existingComment = comments.find(c =>
              c.user.login === 'github-actions[bot]' &&
              c.body.includes('ü§ñ Claude AI Analysis')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
              console.log(`Updated existing Claude comment on #${issueNumber}`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                body: comment
              });
              console.log(`Created new Claude comment on #${issueNumber}`);
            }

      - name: üì§ Upload Analysis Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: claude-analysis-${{ github.run_id }}
          path: |
            claude-context.json
            claude-analysis.json
          retention-days: 30

  collaborate-with-agents:
    name: ü§ù Collaborate with Other AI Agents
    needs: [detect-trigger, claude-analysis]
    runs-on: ubuntu-latest
    if: needs.detect-trigger.outputs.collaboration-needed == 'true'
    timeout-minutes: 5

    steps:
      - name: üì• Download Claude Analysis
        uses: actions/download-artifact@v4
        with:
          name: claude-analysis-${{ github.run_id }}
        continue-on-error: true

      - name: ü§ù Coordinate with Copilot
        uses: actions/github-script@v7
        env:
          TARGET_ID: ${{ needs.detect-trigger.outputs.target-id }}
        with:
          script: |
            const fs = require('fs');
            const targetId = process.env.TARGET_ID;

            if (!targetId) {
              console.log('No target ID for collaboration');
              return;
            }

            console.log(`Coordinating Claude + Copilot collaboration on #${targetId}`);

            // Load Claude's analysis if available
            let claudeAnalysis = null;
            try {
              if (fs.existsSync('claude-analysis.json')) {
                claudeAnalysis = JSON.parse(fs.readFileSync('claude-analysis.json', 'utf8'));
              }
            } catch (error) {
              console.log('No Claude analysis available for collaboration');
            }

            // Create a coordination comment that bridges Claude and Copilot
            let comment = '## ü§ù AI Agent Collaboration Update\n\n';
            comment += '**Claude AI** has completed its analysis and is ready to collaborate with **GitHub Copilot**.\n\n';

            if (claudeAnalysis) {
              comment += '### üéØ Focus Areas for Collaboration\n\n';

              if (claudeAnalysis.Recommendations && claudeAnalysis.Recommendations.length > 0) {
                comment += '**For @copilot to implement:**\n';
                claudeAnalysis.Recommendations.forEach((rec, index) => {
                  comment += `${index + 1}. ${rec}\n`;
                });
                comment += '\n';
              }

              comment += '### üìã Collaboration Workflow\n\n';
              comment += '1. **Claude**: Strategic analysis and architectural guidance ‚úÖ\n';
              comment += '2. **Copilot**: Implementation of recommendations ‚è≥\n';
              comment += '3. **AitherZero**: Automated validation and quality checks ‚è≥\n';
              comment += '4. **Review**: Human review and approval ‚è≥\n\n';
            }

            comment += '### üöÄ Next Steps\n\n';
            comment += '@copilot Please review Claude\'s analysis above and:\n';
            comment += '- Implement the recommended changes\n';
            comment += '- Run local validation: `./az.ps1 0404` and `./az.ps1 0402`\n';
            comment += '- Create a PR with your changes\n';
            comment += '- Tag both @claude and the reviewer for final review\n\n';

            comment += '---\n';
            comment += '*ü§ñ Multi-agent collaboration powered by AitherZero AI coordination*';

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(targetId),
                body: comment
              });
              console.log(`Posted collaboration comment on #${targetId}`);
            } catch (error) {
              console.log(`Failed to post collaboration comment: ${error.message}`);
            }

  summary:
    name: üìä Claude Analysis Summary
    needs: [detect-trigger, claude-analysis, collaborate-with-agents]
    runs-on: ubuntu-latest
    if: always() && needs.detect-trigger.outputs.should-run == 'true'

    steps:
      - name: üìä Generate Summary
        run: |
          echo "# ü§ñ Claude AI Assistant - Workflow Summary"
          echo ""
          echo "**Context:** ${{ needs.detect-trigger.outputs.context-type }}"
          echo "**Target:** #${{ needs.detect-trigger.outputs.target-id }}"
          echo "**Analysis:** ${{ needs.claude-analysis.outputs.analysis-available }}"
          echo "**Collaboration:** ${{ needs.detect-trigger.outputs.collaboration-needed }}"
          echo ""

          if [[ "${{ needs.claude-analysis.outputs.analysis-available }}" == "true" ]]; then
            echo "‚úÖ Claude AI analysis completed successfully"
            echo "üìä Priority: ${{ needs.claude-analysis.outputs.priority }}"
            echo "ü§ù Collaboration: ${{ needs.detect-trigger.outputs.collaboration-needed }}"
          else
            echo "‚è≠Ô∏è Claude AI analysis skipped (API key not configured or not needed)"
          fi

          echo ""
          echo "For more details, check the workflow artifacts and comments."
