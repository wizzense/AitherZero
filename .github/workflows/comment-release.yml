---
name: Comment-Triggered Release

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  check-release-command:
    name: Check for Release Command
    runs-on: ubuntu-latest
    if: |
      github.event.issue.pull_request &&
      (startsWith(github.event.comment.body, '/release') ||
       startsWith(github.event.comment.body, '@copilot release'))
    outputs:
      should-release: ${{ steps.parse.outputs.should_release }}
      command: ${{ steps.parse.outputs.command }}
      version: ${{ steps.parse.outputs.version }}
      prerelease: ${{ steps.parse.outputs.prerelease }}

    steps:
      - name: 🔍 Parse Release Command
        id: parse
        shell: bash
        run: |
          COMMENT="${{ github.event.comment.body }}"
          echo "Comment: $COMMENT"

          # Check if this is a release command
          if [[ "$COMMENT" =~ ^(/release|@copilot\ release) ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT

            # Check for info command
            if [[ "$COMMENT" =~ (info|version) ]]; then
              echo "command=info" >> $GITHUB_OUTPUT
              echo "version=" >> $GITHUB_OUTPUT
              echo "Info command detected"
              exit 0
            fi

            # Check for increment commands
            if [[ "$COMMENT" =~ (major|minor|patch|hotfix) ]]; then
              if [[ "$COMMENT" =~ major ]]; then
                echo "command=major" >> $GITHUB_OUTPUT
              elif [[ "$COMMENT" =~ minor ]]; then
                echo "command=minor" >> $GITHUB_OUTPUT
              elif [[ "$COMMENT" =~ patch ]]; then
                echo "command=patch" >> $GITHUB_OUTPUT
              elif [[ "$COMMENT" =~ hotfix ]]; then
                echo "command=hotfix" >> $GITHUB_OUTPUT
              fi
              echo "version=" >> $GITHUB_OUTPUT
              echo "Increment command detected: ${BASH_REMATCH[1]}"
              exit 0
            fi

            # Extract explicit version (e.g., /release v1.2.0 or /release 1.2.0)
            if [[ "$COMMENT" =~ (v?[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?(-[a-zA-Z0-9.]+)?) ]]; then
              VERSION="${BASH_REMATCH[1]}"
              # Remove 'v' prefix if present
              VERSION="${VERSION#v}"
              echo "command=explicit" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "Found explicit version: $VERSION"
            else
              echo "No version or command specified"
              echo "command=" >> $GITHUB_OUTPUT
              echo "version=" >> $GITHUB_OUTPUT
            fi

            # Check for prerelease flag
            if [[ "$COMMENT" =~ (--prerelease|--pre|-p) ]]; then
              echo "prerelease=true" >> $GITHUB_OUTPUT
              echo "Pre-release flag detected"
            else
              echo "prerelease=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: 👍 React to Comment
        if: steps.parse.outputs.should_release == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: rocket

  show-version-info:
    name: Show Version Information
    needs: check-release-command
    runs-on: ubuntu-latest
    if: needs.check-release-command.outputs.should-release == 'true' && needs.check-release-command.outputs.command == 'info'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Get Version Information
        id: version-info
        shell: bash
        run: |
          # Read current version
          CURRENT=$(cat VERSION 2>/dev/null || echo "unknown")
          echo "current=$CURRENT" >> $GITHUB_OUTPUT

          # Parse version parts
          if [[ "$CURRENT" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            HOTFIX="${BASH_REMATCH[4]}"
          else
            MAJOR=1
            MINOR=0
            PATCH=0
            HOTFIX=0
          fi

          # Calculate next versions
          NEXT_MAJOR="$((MAJOR + 1)).0.0.0"
          NEXT_MINOR="${MAJOR}.$((MINOR + 1)).0.0"
          NEXT_PATCH="${MAJOR}.${MINOR}.$((PATCH + 1)).0"
          NEXT_HOTFIX="${MAJOR}.${MINOR}.${PATCH}.$((HOTFIX + 1))"

          echo "next_major=$NEXT_MAJOR" >> $GITHUB_OUTPUT
          echo "next_minor=$NEXT_MINOR" >> $GITHUB_OUTPUT
          echo "next_patch=$NEXT_PATCH" >> $GITHUB_OUTPUT
          echo "next_hotfix=$NEXT_HOTFIX" >> $GITHUB_OUTPUT

          # Get latest release info
          LATEST_RELEASE=$(gh release list --limit 5 --json tagName,createdAt,isPrerelease \
            --jq 'map(select(.isPrerelease == false)) | .[0] | .tagName' 2>/dev/null || echo "none")
          echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT

          # Get recent releases
          RECENT=$(gh release list --limit 5 --json tagName,createdAt --jq '.[] | "- \(.tagName) (\(.createdAt | split("T")[0]))"' 2>/dev/null || echo "- No releases found")
          echo "recent<<EOF" >> $GITHUB_OUTPUT
          echo "$RECENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 💬 Post Version Information
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## 📋 Current Version Information

            **Version File:** `${{ steps.version-info.outputs.current }}`
            **Latest Release:** `${{ steps.version-info.outputs.latest_release }}`

            ### Recent Releases
            ${{ steps.version-info.outputs.recent }}

            ### Next Version Commands

            Use these commands to create the next release:

            ```
            /release major      # → ${{ steps.version-info.outputs.next_major }}
            /release minor      # → ${{ steps.version-info.outputs.next_minor }}
            /release patch      # → ${{ steps.version-info.outputs.next_patch }}
            /release hotfix     # → ${{ steps.version-info.outputs.next_hotfix }}
            ```

            Or specify an explicit version:
            ```
            /release vX.Y.Z.W
            ```

            ### Version Increment Guide

            - **major** (X.0.0.0): Breaking changes, incompatible API changes
            - **minor** (1.X.0.0): New features, backward compatible
            - **patch** (1.0.X.0): Bug fixes, backward compatible
            - **hotfix** (1.0.0.X): Critical bug fixes, urgent patches

  calculate-version:
    name: Calculate Incremented Version
    needs: check-release-command
    runs-on: ubuntu-latest
    if: |
      needs.check-release-command.outputs.should-release == 'true' &&
      (needs.check-release-command.outputs.command == 'major' ||
       needs.check-release-command.outputs.command == 'minor' ||
       needs.check-release-command.outputs.command == 'patch' ||
       needs.check-release-command.outputs.command == 'hotfix')
    outputs:
      calculated-version: ${{ steps.calculate.outputs.version }}

    steps:
      - name: 📥 Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.issue.number }}/head
          fetch-depth: 0

      - name: 🔢 Calculate New Version
        id: calculate
        shell: bash
        run: |
          COMMAND="${{ needs.check-release-command.outputs.command }}"
          CURRENT=$(cat VERSION 2>/dev/null || echo "1.0.0.0")

          echo "Current version: $CURRENT"
          echo "Increment command: $COMMAND"

          # Parse version parts
          if [[ "$CURRENT" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            HOTFIX="${BASH_REMATCH[4]}"
          else
            echo "❌ Error: Invalid current version format: $CURRENT"
            exit 1
          fi

          # Calculate new version based on command
          case "$COMMAND" in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0.0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1)).0"
              ;;
            hotfix)
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}.$((HOTFIX + 1))"
              ;;
            *)
              echo "❌ Error: Unknown command: $COMMAND"
              exit 1
              ;;
          esac

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  trigger-release:
    name: Trigger Release Workflow
    needs: [check-release-command, calculate-version]
    runs-on: ubuntu-latest
    if: |
      needs.check-release-command.outputs.should-release == 'true' &&
      needs.check-release-command.outputs.command != 'info' &&
      (always() && (needs.calculate-version.result == 'success' || needs.calculate-version.result == 'skipped'))

    steps:
      - name: 📥 Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.issue.number }}/head
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: ✅ Validate Version
        id: validate
        shell: bash
        run: |
          # Get version from either explicit input or calculated increment
          if [ -n "${{ needs.check-release-command.outputs.version }}" ]; then
            VERSION="${{ needs.check-release-command.outputs.version }}"
            echo "Using explicit version: $VERSION"
          elif [ -n "${{ needs.calculate-version.outputs.calculated-version }}" ]; then
            VERSION="${{ needs.calculate-version.outputs.calculated-version }}"
            echo "Using calculated version: $VERSION"
          else
            echo "❌ Error: No version available"
            echo "Usage: /release v1.2.3 or /release major|minor|patch|hotfix"
            exit 1
          fi

          # Check if version follows standard semantic versioning (X.Y.Z) or extended 4-part format (X.Y.Z.W)
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "❌ Error: Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z.W or X.Y.Z-prerelease"
            exit 1
          fi

          # Check if tag already exists
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "❌ Error: Tag v$VERSION already exists"
            exit 1
          fi

          echo "✅ Version $VERSION is valid"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 📝 Update Version Files
        shell: pwsh
        run: |
          $version = "${{ steps.validate.outputs.version }}"
          Write-Host "📝 Updating version to $version" -ForegroundColor Cyan

          # Update VERSION file
          $version | Set-Content ./VERSION -NoNewline

          # Update module manifest
          $manifestPath = "./AitherZero.psd1"
          if (Test-Path $manifestPath) {
            $manifestContent = Get-Content $manifestPath -Raw
            $manifestContent = $manifestContent -replace "ModuleVersion\s*=\s*'[\d\.\-]+[^']*'", "ModuleVersion = '$version'"
            $manifestContent | Set-Content $manifestPath -NoNewline
            Write-Host "✅ Updated module manifest" -ForegroundColor Green
          }

          # Verify updates
          Write-Host "`nVerification:" -ForegroundColor Yellow
          Write-Host "VERSION file: $(Get-Content ./VERSION)" -ForegroundColor White
          if (Test-Path $manifestPath) {
            $manifest = Get-Content $manifestPath -Raw
            if ($manifest -match "ModuleVersion\s*=\s*'([^']+)'") {
              Write-Host "Module version: $($matches[1])" -ForegroundColor White
            }
          }

      - name: 🏷️ Create and Push Tag
        id: create-tag
        shell: bash
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          PRERELEASE="${{ needs.check-release-command.outputs.prerelease }}"

          # Commit version changes
          git add VERSION AitherZero.psd1
          if git diff --staged --quiet; then
            echo "No version changes to commit"
          else
            git commit -m "chore: bump version to v$VERSION"
            git push origin HEAD:refs/pull/${{ github.event.issue.number }}/head
          fi

          # Create annotated tag
          TAG_MESSAGE="Release v$VERSION"
          if [ "$PRERELEASE" = "true" ]; then
            TAG_MESSAGE="$TAG_MESSAGE (Pre-release)"
          fi

          git tag -a "v$VERSION" -m "$TAG_MESSAGE"
          git push origin "v$VERSION"

          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "✅ Created and pushed tag v$VERSION"

      - name: 💬 Post Success Comment
        if: success()
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## 🚀 Release Triggered Successfully

            **Version:** `${{ steps.create-tag.outputs.tag }}`
            **Pre-release:** ${{ needs.check-release-command.outputs.prerelease == 'true' && '✅ Yes' || '❌ No' }}

            The release automation workflow has been triggered. You can monitor the progress here:
            - [Release Automation Workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/release-automation.yml)
            - [Docker Publishing Workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/docker-publish.yml)

            Once complete, the release will be available at:
            - [Releases Page](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.create-tag.outputs.tag }})
            - Docker: `docker pull ghcr.io/${{ github.repository_owner }}/aitherzero:${{ steps.validate.outputs.version }}`

      - name: 💬 Post Failure Comment
        if: failure()
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## ❌ Release Failed

            There was an error creating the release. Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

            ### Common Issues:
            - Version format is invalid (use X.Y.Z)
            - Tag already exists
            - Version files couldn't be updated

            ### Usage:
            ```
            /release major            # Increment major version
            /release minor            # Increment minor version
            /release patch            # Increment patch version
            /release hotfix           # Increment hotfix version
            /release v1.2.3           # Explicit version
            /release v1.2.3 --pre     # Pre-release
            /release info             # Show version info
            ```

  show-usage:
    name: Show Usage Instructions
    runs-on: ubuntu-latest
    if: |
      github.event.issue.pull_request &&
      github.event.comment.body == '/release' &&
      needs.check-release-command.outputs.should-release != 'true'
    needs: check-release-command
    steps:
      - name: 💬 Post Usage Instructions
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## 📋 Release Command Usage

            To create a release from this PR, use one of these commands:

            ### Version Increment (Recommended)
            ```
            /release major            # → X+1.0.0.0 (breaking changes)
            /release minor            # → X.Y+1.0.0 (new features)
            /release patch            # → X.Y.Z+1.0 (bug fixes)
            /release hotfix           # → X.Y.Z.W+1 (urgent fixes)
            ```

            ### Explicit Version
            ```
            /release v1.2.3.4         # Specific version
            /release v1.2.3 --pre     # Pre-release
            ```

            ### Version Information
            ```
            /release info             # Show current version and available commands
            ```

            ### What happens:
            1. ✅ Version validation
            2. 📝 Update VERSION and AitherZero.psd1
            3. 🏷️ Create and push git tag
            4. 🚀 Trigger release automation workflow
            5. 🐳 Build and publish Docker images
            6. 📦 Create GitHub Release with artifacts

            ### Notes:
            - Version must follow semantic versioning (X.Y.Z)
            - Tag must not already exist
            - Both `/release` and `@copilot release` work
