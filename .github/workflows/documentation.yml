name: üìö Documentation & Sync Pipeline
run-name: üìö Documentation - ${{ github.event_name }} on ${{ github.ref_name }} by @${{ github.actor }}

on:
  push:
    branches: [main]
    paths:
      - '**/*.md'
      - 'docs/**'
      - 'aither-core/**/*.ps1'
      - 'aither-core/**/*.psm1'
      - 'aither-core/**/*.psd1'
  schedule:
    # Daily documentation sync at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force repository synchronization'
        required: false
        default: 'false'
        type: boolean
      update_api_docs:
        description: 'Force API documentation update'
        required: false
        default: 'false'
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  change-detection:
    name: üîç Documentation Change Detection
    runs-on: ubuntu-latest
    outputs:
      docs-changed: ${{ steps.changes.outputs.docs }}
      api-changed: ${{ steps.changes.outputs.api }}
      sync-needed: ${{ steps.changes.outputs.sync }}
      force-sync: ${{ github.event.inputs.force_sync == 'true' }}
      force-api: ${{ github.event.inputs.update_api_docs == 'true' }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for comparison
        
      - name: Analyze Documentation Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            docs:
              - '**/*.md'
              - 'docs/**'
              - 'README.md'
              - 'CHANGELOG.md'
            api:
              - 'aither-core/**/*.ps1'
              - 'aither-core/**/*.psm1'
              - 'aither-core/**/*.psd1'
            sync:
              - 'configs/**'
              - '.github/workflows/**'
              - 'Start-AitherZero.ps1'
      
      - name: Documentation Change Summary
        run: |
          echo "üìä Documentation Change Detection Results:"
          echo "  - Documentation files changed: ${{ steps.changes.outputs.docs }}"
          echo "  - API/Code files changed: ${{ steps.changes.outputs.api }}"
          echo "  - Sync-worthy changes: ${{ steps.changes.outputs.sync }}"
          echo "  - Force sync requested: ${{ github.event.inputs.force_sync }}"
          echo "  - Force API update requested: ${{ github.event.inputs.update_api_docs }}"

  api-documentation:
    name: üìñ Generate API Documentation
    needs: change-detection
    if: needs.change-detection.outputs.api-changed == 'true' || needs.change-detection.outputs.force-api == 'true' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Install PowerShell 7
        run: |
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.1/powershell_7.4.1-1.deb_amd64.deb
          sudo dpkg -i powershell_7.4.1-1.deb_amd64.deb
          sudo apt-get install -f -y
      
      - name: Install Documentation Modules
        shell: pwsh
        run: |
          Write-Host "üì¶ Installing PowerShell documentation modules..." -ForegroundColor Yellow
          
          $modules = @('PlatyPS', 'PowerShellGet')
          foreach ($module in $modules) {
            try {
              Write-Host "Installing $module..." -ForegroundColor Cyan
              Install-Module $module -Force -Scope CurrentUser -ErrorAction Stop
              Write-Host "‚úÖ $module installed successfully" -ForegroundColor Green
            } catch {
              Write-Error "‚ùå Failed to install $module : $_"
              throw
            }
          }
      
      - name: Generate PowerShell API Documentation
        shell: pwsh
        run: |
          Write-Host "üìö Generating PowerShell API documentation..." -ForegroundColor Yellow
          
          # Create docs directory structure
          $docsPath = "docs/api"
          if (-not (Test-Path $docsPath)) {
            New-Item -ItemType Directory -Path $docsPath -Force | Out-Null
            Write-Host "Created API documentation directory: $docsPath" -ForegroundColor Green
          }
          
          try {
            # Check for custom documentation script
            if (Test-Path "./scripts/Generate-APIDocs.ps1") {
              Write-Host "Using custom API documentation script..." -ForegroundColor Green
              ./scripts/Generate-APIDocs.ps1 -OutputPath $docsPath
            } else {
              Write-Host "Using default API documentation generation..." -ForegroundColor Yellow
              
              # Get all module directories
              $moduleDirectories = Get-ChildItem -Path "aither-core/modules" -Directory
              
              foreach ($moduleDir in $moduleDirectories) {
                $moduleName = $moduleDir.Name
                Write-Host "Processing module: $moduleName" -ForegroundColor Cyan
                
                # Check for module manifest
                $manifestPath = Join-Path $moduleDir.FullName "$moduleName.psd1"
                if (Test-Path $manifestPath) {
                  try {
                    # Import module for documentation
                    Import-Module $manifestPath -Force -ErrorAction Stop
                    
                    # Generate markdown documentation
                    $moduleDocsPath = Join-Path $docsPath $moduleName
                    if (-not (Test-Path $moduleDocsPath)) {
                      New-Item -ItemType Directory -Path $moduleDocsPath -Force | Out-Null
                    }
                    
                    # Get exported functions
                    $exportedFunctions = Get-Command -Module $moduleName -CommandType Function
                    
                    if ($exportedFunctions) {
                      Write-Host "  Found $($exportedFunctions.Count) exported functions" -ForegroundColor Green
                      
                      # Create module overview
                      $moduleOverview = @"
# $moduleName Module

**Module Path**: aither-core/modules/$moduleName
**Exported Functions**: $($exportedFunctions.Count)

## Functions

$($exportedFunctions | ForEach-Object { "- [$($_.Name)](./$($_.Name).md)" } | Out-String)

## Module Description

This module is part of the AitherZero PowerShell automation framework.

---
*Generated on $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')*
"@
                      
                      $moduleOverview | Out-File (Join-Path $moduleDocsPath "README.md") -Encoding UTF8
                      
                      # Generate function documentation
                      foreach ($function in $exportedFunctions) {
                        try {
                          $help = Get-Help $function.Name -Full
                          $functionDoc = @"
# $($function.Name)

## Synopsis
$($help.Synopsis)

## Description
$($help.Description.Text -join "`n`n")

## Syntax
``````powershell
$($help.Syntax.syntaxItem | ForEach-Object { $_.name + " " + ($_.parameter | ForEach-Object { "[-$($_.name) <$($_.type.name)>]" }) -join " " })
``````

## Parameters
$($help.Parameters.parameter | ForEach-Object {
"### -$($_.name)
**Type**: $($_.type.name)
**Required**: $($_.required)
**Position**: $($_.position)

$($_.description.text)"
} | Out-String)

## Examples
$($help.Examples.example | ForEach-Object {
"### Example $($_.title -replace 'EXAMPLE ', '')
``````powershell
$($_.code)
``````
$($_.remarks.text)"
} | Out-String)

---
*Generated on $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')*
"@
                          
                          $functionDoc | Out-File (Join-Path $moduleDocsPath "$($function.Name).md") -Encoding UTF8
                          Write-Host "    ‚úÖ Generated docs for $($function.Name)" -ForegroundColor Green
                        } catch {
                          Write-Host "    ‚ö†Ô∏è Could not generate docs for $($function.Name): $_" -ForegroundColor Yellow
                        }
                      }
                    } else {
                      Write-Host "  ‚ö†Ô∏è No exported functions found" -ForegroundColor Yellow
                    }
                    
                    Remove-Module $moduleName -Force -ErrorAction SilentlyContinue
                  } catch {
                    Write-Host "  ‚ùå Failed to process $moduleName : $_" -ForegroundColor Red
                  }
                } else {
                  Write-Host "  ‚ö†Ô∏è No manifest found for $moduleName" -ForegroundColor Yellow
                }
              }
              
              # Generate master API index
              $apiIndex = @"
# AitherZero API Documentation

This directory contains auto-generated API documentation for all AitherZero PowerShell modules.

## Available Modules

$($moduleDirectories | ForEach-Object { "- [$($_.Name)](./$(($_.Name))/README.md)" } | Out-String)

## About

AitherZero is a standalone PowerShell automation framework for OpenTofu/Terraform infrastructure management.

**Technology Stack:**
- Primary Language: PowerShell 7.0+
- Infrastructure: OpenTofu/Terraform  
- Testing: Pester framework
- CI/CD: GitHub Actions

---
*Last updated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')*
*Generated by: GitHub Actions Documentation Pipeline*
"@
              
              $apiIndex | Out-File (Join-Path $docsPath "README.md") -Encoding UTF8
            }
            
            Write-Host "‚úÖ API documentation generation completed" -ForegroundColor Green
          } catch {
            Write-Host "‚ùå API documentation generation failed: $_" -ForegroundColor Red
            throw
          }
      
      - name: Check for Documentation Changes
        id: docs_changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if there are changes to commit
          if [ -n "$(git status --porcelain docs/)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "üìù Documentation changes detected"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No documentation changes to commit"
          fi
      
      - name: Commit Documentation Updates
        if: steps.docs_changes.outputs.has_changes == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'üìö Update API documentation [skip ci]'
          file_pattern: 'docs/api/**'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'
          skip_dirty_check: false
      
      - name: Upload Documentation Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation-${{ github.run_number }}
          path: docs/api/
          retention-days: 30

  sync-repositories:
    name: üîÑ Repository Synchronization
    needs: change-detection
    if: needs.change-detection.outputs.sync-needed == 'true' || needs.change-detection.outputs.force-sync == 'true' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SYNC_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Configure Git for Sync
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Repository Synchronization
        run: |
          echo "üîÑ Starting repository synchronization..."
          
          # Check if custom sync script exists
          if [ -f "./scripts/Sync-ToAitherLabs.ps1" ]; then
            echo "Using custom sync script..."
            
            # Install PowerShell if needed for sync script
            if ! command -v pwsh &> /dev/null; then
              wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.1/powershell_7.4.1-1.deb_amd64.deb
              sudo dpkg -i powershell_7.4.1-1.deb_amd64.deb
              sudo apt-get install -f -y
            fi
            
            pwsh -Command "./scripts/Sync-ToAitherLabs.ps1"
          else
            echo "Using default sync process..."
            
            # Default sync logic - can be customized based on requirements
            echo "Repository sync completed with default process"
            echo "Current repository: ${{ github.repository }}"
            echo "Current branch: ${{ github.ref_name }}"
            echo "Commit SHA: ${{ github.sha }}"
            
            # Note: Actual sync implementation would depend on target repository setup
            # This is a placeholder for the sync logic
          fi
          
          echo "‚úÖ Repository synchronization completed"
      
      - name: Sync Summary
        run: |
          echo "üìä Synchronization Summary:"
          echo "  - Source Repository: ${{ github.repository }}"
          echo "  - Source Branch: ${{ github.ref_name }}"
          echo "  - Sync Trigger: ${{ github.event_name }}"
          echo "  - Sync Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "  - Commit: ${{ github.sha }}"

  documentation-summary:
    name: üìã Documentation Pipeline Summary
    needs: [change-detection, api-documentation, sync-repositories]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Pipeline Summary
        run: |
          echo "üìö Documentation Pipeline Summary"
          echo "=================================="
          echo ""
          echo "üîç Change Detection: ${{ needs.change-detection.result }}"
          echo "üìñ API Documentation: ${{ needs.api-documentation.result }}"
          echo "üîÑ Repository Sync: ${{ needs.sync-repositories.result }}"
          echo ""
          echo "üìä Execution Details:"
          echo "  - Workflow: ${{ github.workflow }}"
          echo "  - Run Number: ${{ github.run_number }}"
          echo "  - Trigger: ${{ github.event_name }}"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Actor: ${{ github.actor }}"
          echo "  - Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          
          # Determine overall status
          if [[ "${{ needs.api-documentation.result }}" == "failure" || "${{ needs.sync-repositories.result }}" == "failure" ]]; then
            echo "‚ùå Documentation pipeline completed with failures"
            exit 1
          elif [[ "${{ needs.api-documentation.result }}" == "skipped" && "${{ needs.sync-repositories.result }}" == "skipped" ]]; then
            echo "‚ÑπÔ∏è Documentation pipeline completed - no changes detected"
          else
            echo "‚úÖ Documentation pipeline completed successfully"
          fi