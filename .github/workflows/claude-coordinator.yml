---
name: 🤝 Claude Coordination - CLI + GitHub App

# This workflow coordinates between:
# 1. Claude for GitHub (the GitHub App)
# 2. Claude Code (custom workflows)
# 3. GitHub Copilot
# 4. AitherZero validation

on:
  # Trigger after Claude for GitHub app responds
  issue_comment:
    types: [created]

  pull_request_review_comment:
    types: [created]

  # Trigger on specific labels
  pull_request:
    types: [labeled]

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  detect-claude-activity:
    name: 🔍 Detect Claude for GitHub Activity
    runs-on: ubuntu-latest
    outputs:
      claude-app-active: ${{ steps.check.outputs.claude-active }}
      needs-coordination: ${{ steps.check.outputs.needs-coordination }}

    steps:
      - name: 🔍 Check for Claude for GitHub App Activity
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const eventName = context.eventName;
            let claudeActive = false;
            let needsCoordination = false;

            // Check if comment is from Claude for GitHub app
            if (eventName === 'issue_comment' || eventName === 'pull_request_review_comment') {
              const comment = context.payload.comment;
              const author = comment.user.login;
              const body = comment.body;

              console.log(`Comment from: ${author}`);

              // Check if it's from Claude for GitHub app
              // The app typically has a specific username
              if (author.includes('claude') || author.includes('anthropic')) {
                claudeActive = true;
                console.log('✅ Claude for GitHub app is active');

                // Check if coordination is needed
                // Look for keywords that suggest we should coordinate
                const coordinationKeywords = [
                  'recommend', 'suggest', 'should', 'could', 'consider',
                  'improve', 'refactor', 'optimize', 'security', 'performance'
                ];

                const needsWork = coordinationKeywords.some(keyword =>
                  body.toLowerCase().includes(keyword)
                );

                if (needsWork) {
                  needsCoordination = true;
                  console.log('🤝 Coordination needed - Claude suggested improvements');
                }
              }
            }

            // Check if PR has coordination label
            if (eventName === 'pull_request' && context.payload.action === 'labeled') {
              const label = context.payload.label.name;
              if (label === 'multi-agent' || label === 'claude-coordination') {
                needsCoordination = true;
                console.log('🏷️ Coordination label detected');
              }
            }

            core.setOutput('claude-active', claudeActive);
            core.setOutput('needs-coordination', needsCoordination);

  coordinate-with-copilot:
    name: 🤝 Coordinate Claude → Copilot
    needs: detect-claude-activity
    runs-on: ubuntu-latest
    if: needs.detect-claude-activity.outputs.needs-coordination == 'true'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 💬 Bridge Claude's Suggestions to Copilot
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue?.number || context.payload.pull_request?.number;

            if (!issue_number) {
              console.log('No issue/PR number found');
              return;
            }

            // Get recent comments to find Claude's suggestions
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              per_page: 10,
              sort: 'created',
              direction: 'desc'
            });

            // Find Claude for GitHub app's comment
            const claudeComment = comments.find(c =>
              c.user.login.toLowerCase().includes('claude') ||
              c.user.login.toLowerCase().includes('anthropic')
            );

            if (claudeComment) {
              console.log('Found Claude comment:', claudeComment.id);

              // Create coordination comment for Copilot
              const coordinationComment = `## 🤝 Multi-Agent Coordination

**Claude for GitHub has provided feedback above** ☝️

### 🎯 Action Items

@copilot Please review Claude's suggestions and:
1. Analyze the feasibility of implementing these recommendations
2. Create commits addressing the key points
3. Run local validation before pushing

### 🔍 AitherZero Validation

After implementation, the following checks will run automatically:
- ✅ PSScriptAnalyzer (code quality)
- ✅ Pester tests (functionality)
- ✅ Security validation
- ✅ Syntax checks

### 📋 Workflow

\`\`\`
Claude Review → Copilot Implementation → AitherZero Validation → Human Approval
\`\`\`

---
*🤖 Multi-agent coordination powered by AitherZero*`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: coordinationComment
              });

              console.log('✅ Posted coordination comment');
            } else {
              console.log('No Claude comment found to coordinate');
            }

  run-aitherezero-validation:
    name: 🔧 Run AitherZero Validation
    needs: detect-claude-activity
    runs-on: ubuntu-latest
    if: needs.detect-claude-activity.outputs.claude-active == 'true'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup PowerShell
        shell: pwsh
        run: |
          Write-Host "🔧 Setting up AitherZero environment..." -ForegroundColor Cyan

          # Install required modules
          Install-Module PSScriptAnalyzer -Force -AllowClobber -Scope CurrentUser -ErrorAction SilentlyContinue

          if (Test-Path "./AitherZero.psd1") {
            Import-Module "./AitherZero.psd1" -Force -ErrorAction SilentlyContinue
          }

          Write-Host "✅ Environment ready" -ForegroundColor Green

      - name: 🔍 Quick Validation
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "🔍 Running quick validation after Claude review..." -ForegroundColor Yellow

          $results = @{
            PSScriptAnalyzer = $null
            Syntax = $null
            Tests = $null
          }

          # Quick PSScriptAnalyzer check
          try {
            Write-Host "📊 PSScriptAnalyzer check..." -ForegroundColor Cyan
            if (Test-Path "./automation-scripts/0404_Run-PSScriptAnalyzer.ps1") {
              $results.PSScriptAnalyzer = "Available"
            }
          } catch {
            $results.PSScriptAnalyzer = "Failed: $_"
          }

          # Syntax validation
          try {
            Write-Host "📝 Syntax validation..." -ForegroundColor Cyan
            if (Test-Path "./automation-scripts/0407_Validate-Syntax.ps1") {
              $results.Syntax = "Available"
            }
          } catch {
            $results.Syntax = "Failed: $_"
          }

          # Test availability
          try {
            Write-Host "🧪 Test check..." -ForegroundColor Cyan
            if (Test-Path "./automation-scripts/0402_Run-UnitTests.ps1") {
              $results.Tests = "Available"
            }
          } catch {
            $results.Tests = "Failed: $_"
          }

          Write-Host ""
          Write-Host "📊 Validation Tools Status:" -ForegroundColor Green
          Write-Host "  PSScriptAnalyzer: $($results.PSScriptAnalyzer)" -ForegroundColor White
          Write-Host "  Syntax: $($results.Syntax)" -ForegroundColor White
          Write-Host "  Tests: $($results.Tests)" -ForegroundColor White

      - name: 💬 Post Validation Status
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue?.number || context.payload.pull_request?.number;

            if (!issue_number) return;

            const comment = `## ✅ AitherZero Validation Ready

After implementing Claude's suggestions, run these validations:

\`\`\`powershell
# Local validation commands
./az.ps1 0404  # PSScriptAnalyzer
./az.ps1 0402  # Unit tests
./az.ps1 0407  # Syntax validation
\`\`\`

Or trigger comprehensive validation:
- Actions > AI Agent Coordinator > Run workflow
- Agent Type: multi-agent
- Priority: normal

---
*Validation will run automatically on PR updates*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: comment
            });

  summary:
    name: 📊 Coordination Summary
    needs: [detect-claude-activity, coordinate-with-copilot, run-aitherezero-validation]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 📊 Generate Summary
        run: |
          echo "# 🤝 Claude Coordination Summary"
          echo ""
          echo "**Claude for GitHub App:** ${{ needs.detect-claude-activity.outputs.claude-active }}"
          echo "**Coordination Needed:** ${{ needs.detect-claude-activity.outputs.needs-coordination }}"
          echo ""

          if [[ "${{ needs.detect-claude-activity.outputs.needs-coordination }}" == "true" ]]; then
            echo "✅ Multi-agent coordination activated"
            echo "📋 Copilot notified of Claude's suggestions"
            echo "🔧 AitherZero validation ready"
          else
            echo "ℹ️  No coordination needed at this time"
          fi

          echo ""
          echo "## 🎯 Multi-Agent Workflow"
          echo "1. Claude for GitHub → Reviews and suggests"
          echo "2. This workflow → Coordinates between agents"
          echo "3. Copilot → Implements changes"
          echo "4. AitherZero → Validates quality"
          echo "5. Human → Approves and merges"
