name: Monitoring & Reporting

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
    - cron: '0 9 * * 1'    # Weekly on Monday at 9 AM
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Report Type'
        type: choice
        options: ['daily', 'weekly', 'monthly', 'custom']
        default: 'daily'

permissions:
  contents: read
  issues: write
  pull-requests: read
  pages: write
  id-token: write

jobs:
  # === COLLECT METRICS ===
  collect-metrics:
    name: Collect Metrics
    runs-on: ubuntu-latest
    outputs:
      metrics: ${{ steps.metrics.outputs.data }}
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üìä Gather Repository Metrics
      id: metrics
      shell: pwsh
      run: |
        $metrics = @{
          Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          Repository = @{
            Name = "${{ github.repository }}"
            Stars = 0
            Forks = 0
            Issues = @{
              Open = 0
              Closed = 0
            }
            PullRequests = @{
              Open = 0
              Closed = 0
              Merged = 0
            }
          }
          CodeMetrics = @{
            TotalFiles = 0
            TotalLines = 0
            Languages = @{}
          }
          TestMetrics = @{
            TotalTests = 0
            PassRate = 0
            Coverage = 0
            LastRun = ""
          }
          BuildMetrics = @{
            SuccessRate = 0
            AverageDuration = 0
            TotalRuns = 0
          }
        }
        
        # Get repository stats via GitHub API
        $headers = @{
          Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}"
          Accept = "application/vnd.github.v3+json"
        }
        
        # Repository info
        $repo = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}" -Headers $headers
        $metrics.Repository.Stars = $repo.stargazers_count
        $metrics.Repository.Forks = $repo.forks_count
        
        # Issues
        $issues = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/issues?state=all&per_page=100" -Headers $headers
        $metrics.Repository.Issues.Open = ($issues | Where-Object state -eq 'open').Count
        $metrics.Repository.Issues.Closed = ($issues | Where-Object state -eq 'closed').Count
        
        # Pull requests
        $prs = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/pulls?state=all&per_page=100" -Headers $headers
        $metrics.Repository.PullRequests.Open = ($prs | Where-Object state -eq 'open').Count
        $metrics.Repository.PullRequests.Closed = ($prs | Where-Object state -eq 'closed').Count
        $metrics.Repository.PullRequests.Merged = ($prs | Where-Object merged_at -ne $null).Count
        
        # Code metrics
        $files = Get-ChildItem -Recurse -File -Include "*.ps1", "*.psm1", "*.psd1"
        $metrics.CodeMetrics.TotalFiles = $files.Count
        $metrics.CodeMetrics.TotalLines = ($files | Get-Content | Measure-Object -Line).Lines
        
        # Workflow runs
        $runs = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=100" -Headers $headers
        $successfulRuns = ($runs.workflow_runs | Where-Object conclusion -eq 'success').Count
        $metrics.BuildMetrics.TotalRuns = $runs.total_count
        $metrics.BuildMetrics.SuccessRate = if ($runs.total_count -gt 0) { 
          [math]::Round(($successfulRuns / $runs.total_count) * 100, 2) 
        } else { 0 }
        
        # Save metrics
        $metricsJson = $metrics | ConvertTo-Json -Depth 10 -Compress
        echo "data=$metricsJson" >> $env:GITHUB_OUTPUT
        
        # Also save to file for next job
        $metrics | ConvertTo-Json -Depth 10 | Set-Content ./metrics.json
    
    - name: üì§ Upload Metrics
      uses: actions/upload-artifact@v4
      with:
        name: metrics-data
        path: metrics.json

  # === GENERATE REPORTS ===
  generate-reports:
    name: Generate Reports
    needs: collect-metrics
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üì• Download Metrics
      uses: actions/download-artifact@v4
      with:
        name: metrics-data
    
    - name: üîß Bootstrap
      shell: pwsh
      run: ./bootstrap.ps1 -Mode New -NonInteractive
    
    - name: üìä Generate Comprehensive Report
      shell: pwsh
      run: |
        # Load metrics
        $metrics = Get-Content ./metrics.json | ConvertFrom-Json
        
        # Generate different report types
        $reportType = "${{ github.event.inputs.report_type || 'daily' }}"
        
        Write-Host "Generating $reportType report..." -ForegroundColor Cyan
        
        # Generate project report
        ./Start-AitherZero.ps1 -Mode Orchestrate -Sequence 0510 -CI
        
        # Generate dashboard
        ./Start-AitherZero.ps1 -Mode Orchestrate -Sequence 0511 -CI
        
        # Generate tech debt report
        ./Start-AitherZero.ps1 -Mode Orchestrate -Sequence 0524 -CI
        
        # Create consolidated report
        $report = @{
          Type = $reportType
          Generated = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          Metrics = $metrics
          Sections = @()
        }
        
        # Add executive summary
        $report.Sections += @{
          Title = "Executive Summary"
          Content = @"
        ## Project Health Score: $(
          $healthScore = (
            ($metrics.BuildMetrics.SuccessRate * 0.3) +
            (($metrics.Repository.Issues.Closed / [Math]::Max(1, $metrics.Repository.Issues.Open + $metrics.Repository.Issues.Closed)) * 100 * 0.2) +
            (($metrics.Repository.PullRequests.Merged / [Math]::Max(1, $metrics.Repository.PullRequests.Open + $metrics.Repository.PullRequests.Merged)) * 100 * 0.2) +
            ($metrics.TestMetrics.PassRate * 0.2) +
            ($metrics.TestMetrics.Coverage * 0.1)
          )
          [Math]::Round($healthScore, 1)
        )%
        
        ### Key Metrics
        - **Build Success Rate**: $($metrics.BuildMetrics.SuccessRate)%
        - **Open Issues**: $($metrics.Repository.Issues.Open)
        - **Code Coverage**: $($metrics.TestMetrics.Coverage)%
        - **Total Lines of Code**: $($metrics.CodeMetrics.TotalLines)
        "@
        }
        
        # Save report
        $report | ConvertTo-Json -Depth 10 | Set-Content ./consolidated-report.json
        
        # Generate HTML version
        $html = @"
        <!DOCTYPE html>
        <html>
        <head>
            <title>AitherZero $reportType Report</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; }
                .metric { display: inline-block; margin: 10px; padding: 15px; background: #f0f0f0; border-radius: 5px; }
                .metric-value { font-size: 24px; font-weight: bold; }
                .metric-label { font-size: 12px; color: #666; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
                th { background: #f0f0f0; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>AitherZero $reportType Report</h1>
                <p>Generated: $($report.Generated)</p>
            </div>
            
            <h2>Health Score: $healthScore%</h2>
            
            <div class="metrics">
                <div class="metric">
                    <div class="metric-value">$($metrics.BuildMetrics.SuccessRate)%</div>
                    <div class="metric-label">Build Success</div>
                </div>
                <div class="metric">
                    <div class="metric-value">$($metrics.Repository.Issues.Open)</div>
                    <div class="metric-label">Open Issues</div>
                </div>
                <div class="metric">
                    <div class="metric-value">$($metrics.Repository.PullRequests.Open)</div>
                    <div class="metric-label">Open PRs</div>
                </div>
                <div class="metric">
                    <div class="metric-value">$($metrics.CodeMetrics.TotalFiles)</div>
                    <div class="metric-label">Total Files</div>
                </div>
            </div>
            
            <!-- Add more sections as needed -->
        </body>
        </html>
        "@
        
        $html | Set-Content ./report.html
    
    - name: üìß Send Report Email
      if: github.event.schedule == '0 9 * * 1'  # Weekly report
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: AitherZero Weekly Report - ${{ github.event.repository.name }}
        to: ${{ vars.REPORT_RECIPIENTS }}
        from: AitherZero Reporting
        html_body: file://report.html
        attachments: consolidated-report.json
    
    - name: üì§ Upload Reports
      uses: actions/upload-artifact@v4
      with:
        name: reports-${{ github.run_number }}
        path: |
          *.html
          *.json
          tests/reports/
        retention-days: 90

  # === CREATE GITHUB ISSUE ===
  create-issue:
    name: Create Tracking Issue
    needs: [collect-metrics, generate-reports]
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * 1'  # Weekly
    
    steps:
    - name: üìù Create Weekly Report Issue
      uses: actions/github-script@v7
      with:
        script: |
          const metrics = JSON.parse('${{ needs.collect-metrics.outputs.metrics }}');
          
          const issueBody = `
          # üìä Weekly Metrics Report
          
          **Report Date**: ${new Date().toISOString().split('T')[0]}
          
          ## üéØ Key Metrics
          
          | Metric | Value | Change |
          |--------|-------|--------|
          | Build Success Rate | ${metrics.BuildMetrics.SuccessRate}% | - |
          | Open Issues | ${metrics.Repository.Issues.Open} | - |
          | Open PRs | ${metrics.Repository.PullRequests.Open} | - |
          | Code Coverage | ${metrics.TestMetrics.Coverage}% | - |
          
          ## üìà Trends
          
          View detailed trends at: https://${context.repo.owner}.github.io/${context.repo.repo}/reports/
          
          ## üéØ Action Items
          
          - [ ] Review failed builds
          - [ ] Triage open issues
          - [ ] Review pending pull requests
          - [ ] Update documentation
          
          ## üìé Attachments
          
          - [Full Report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          - [Download Artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}#artifacts)
          
          ---
          
          *This issue was automatically generated by the monitoring workflow.*
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üìä Weekly Metrics Report - Week ${Math.ceil(new Date().getDate() / 7)}`,
            body: issueBody,
            labels: ['metrics', 'automated', 'weekly-report']
          });

  # === UPDATE DASHBOARD ===
  update-dashboard:
    name: Update Live Dashboard
    needs: [generate-reports]
    runs-on: ubuntu-latest
    if: always()
    
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üì• Download Reports
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: üîß Setup Pages
      uses: actions/configure-pages@v5
    
    - name: üìä Prepare Dashboard
      shell: pwsh
      run: |
        # Create docs directory
        New-Item -ItemType Directory -Path ./docs -Force
        
        # Copy all reports
        Get-ChildItem -Path ./artifacts -Recurse -Include "*.html", "*.json" | 
          Copy-Item -Destination ./docs -Force
        
        # Create index page with auto-refresh
        @"
        <!DOCTYPE html>
        <html>
        <head>
            <title>AitherZero Live Dashboard</title>
            <meta http-equiv="refresh" content="300">
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    margin: 0;
                    padding: 20px;
                    background: #f5f5f5;
                }
                .container { max-width: 1400px; margin: 0 auto; }
                .header {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 30px;
                    border-radius: 10px;
                    margin-bottom: 30px;
                }
                .grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                }
                .card {
                    background: white;
                    padding: 20px;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }
                .card h3 { margin-top: 0; color: #333; }
                .metric { font-size: 36px; font-weight: bold; color: #667eea; }
                .timestamp { color: #999; font-size: 12px; }
                iframe {
                    width: 100%;
                    height: 400px;
                    border: none;
                    border-radius: 10px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üöÄ AitherZero Live Dashboard</h1>
                    <p>Auto-refreshes every 5 minutes</p>
                    <p class="timestamp">Last updated: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")</p>
                </div>
                
                <div class="grid">
                    <div class="card">
                        <h3>üìä Test Results</h3>
                        <iframe src="./test-report.html"></iframe>
                    </div>
                    
                    <div class="card">
                        <h3>üìà Code Coverage</h3>
                        <iframe src="./coverage-report.html"></iframe>
                    </div>
                    
                    <div class="card">
                        <h3>üîç Code Analysis</h3>
                        <iframe src="./analysis-report.html"></iframe>
                    </div>
                    
                    <div class="card">
                        <h3>‚ö° Performance</h3>
                        <iframe src="./performance-report.html"></iframe>
                    </div>
                </div>
                
                <div style="margin-top: 30px;">
                    <div class="card">
                        <h3>üìà Historical Trends</h3>
                        <iframe src="./trends.html" style="height: 600px;"></iframe>
                    </div>
                </div>
            </div>
        </body>
        </html>
        "@ | Set-Content ./docs/index.html
    
    - name: üì§ Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs
    
    - name: üöÄ Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4