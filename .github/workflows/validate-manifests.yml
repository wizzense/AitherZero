name: 'Validate PowerShell Module Manifests'

on:
  push:
    # Only run on base branches to avoid duplicate runs with pull_request events
    branches: [main, dev]
    paths:
      - '**/*.psd1'
      - 'tools/Validate-ModuleManifest.ps1'
      - 'automation-scripts/0405_Validate-ModuleManifests.ps1'
  pull_request:
    # Run on all PRs to validate manifests
  workflow_dispatch:

jobs:
  validate-manifests:
    name: 'Validate Module Manifests'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Validate All Module Manifests'
        shell: pwsh
        run: |
          Write-Host "üîç Validating PowerShell module manifests for Unicode and syntax issues..." -ForegroundColor Cyan

          # Run the validation script
          $result = & ./automation-scripts/0405_Validate-ModuleManifests.ps1 2>&1
          $exitCode = $LASTEXITCODE

          # Display results
          $result | ForEach-Object { Write-Host $_ }

          if ($exitCode -ne 0) {
            Write-Host "‚ùå Module manifest validation failed!" -ForegroundColor Red
            Write-Host "This usually indicates:" -ForegroundColor Yellow
            Write-Host "  ‚Ä¢ Unicode characters (‚Üí, ‚Üê, ‚Üë, ‚Üì) that break Windows PowerShell parsing" -ForegroundColor Yellow
            Write-Host "  ‚Ä¢ Unterminated strings or malformed syntax" -ForegroundColor Yellow
            Write-Host "  ‚Ä¢ Invalid PowerShell restricted language usage" -ForegroundColor Yellow
            Write-Host ""
            Write-Host "To fix automatically, run locally:" -ForegroundColor Cyan
            Write-Host "  pwsh -File ./automation-scripts/0405_Validate-ModuleManifests.ps1 -Fix" -ForegroundColor White
            exit 1
          } else {
            Write-Host "‚úÖ All module manifests validated successfully!" -ForegroundColor Green
          }

      - name: 'Test Validation Tools'
        shell: pwsh
        run: |
          Write-Host "üß™ Testing validation tools..." -ForegroundColor Cyan

          # Run validation tool tests
          $testResult = Invoke-Pester -Path './tests/unit/automation-scripts/0400-0499/0405_Validate-ModuleManifests.Tests.ps1' -PassThru

          if ($testResult.FailedCount -gt 0) {
            Write-Host "‚ùå Validation tool tests failed!" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "‚úÖ Validation tools tests passed!" -ForegroundColor Green
          }
