name: üóÇÔ∏è Project Index Automation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'domains/**'
      - 'automation-scripts/**'
      - 'infrastructure/**'
      - 'tests/**'
      - 'orchestration/**'
      - 'docs/**'
      - '**/*.md'
      - '**/*.ps1'
      - '**/*.psm1'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ main, develop ]
    paths:
      - 'domains/**'
      - 'automation-scripts/**'
      - 'infrastructure/**'
      - 'tests/**'
      - 'orchestration/**'
      - 'docs/**'
      - '**/*.md'
      - '**/*.ps1'
      - '**/*.psm1'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Index generation mode'
        required: true
        default: 'Incremental'
        type: choice
        options:
        - Full
        - Incremental
        - Verify

jobs:
  cleanup-auto-prs:
    name: üßπ Cleanup Auto PRs
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    
    permissions:
      pull-requests: write
      
    steps:
    - name: üîç Find and Close Auto PRs
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const autoBranchName = `auto-index/${prNumber}`;
          const repo = context.repo;
          
          core.info(`Parent PR #${prNumber} was closed, searching for auto-index PRs...`);
          
          // Find all open PRs from the auto-index branch
          const { data: allPRs } = await github.rest.pulls.list({
            owner: repo.owner,
            repo: repo.repo,
            state: 'open'
          });
          
          const autoPRs = allPRs.filter(pr => pr.head.ref === autoBranchName);
          
          if (autoPRs.length === 0) {
            core.info(`No open auto-index PRs found for branch ${autoBranchName}`);
            return;
          }
          
          for (const autoPR of autoPRs) {
            core.info(`Closing auto-index PR #${autoPR.number}`);
            
            // Add a comment explaining why it's being closed
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: autoPR.number,
              body: `üîí Automatically closing this PR because the parent PR #${prNumber} was closed.`
            });
            
            // Close the PR
            await github.rest.pulls.update({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: autoPR.number,
              state: 'closed'
            });
            
            core.info(`‚úÖ Closed auto-index PR #${autoPR.number}`);
          }
          
          // Delete the auto branch
          try {
            await github.rest.git.deleteRef({
              owner: repo.owner,
              repo: repo.repo,
              ref: `heads/${autoBranchName}`
            });
            core.info(`‚úÖ Deleted branch ${autoBranchName}`);
          } catch (error) {
            if (error.status === 404) {
              core.info(`Branch ${autoBranchName} does not exist`);
            } else {
              core.warning(`Failed to delete branch ${autoBranchName}: ${error.message}`);
            }
          }

  generate-indexes:
    name: üîÑ Generate Project Indexes
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: ‚ö° Setup PowerShell
      shell: pwsh
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Green
        Write-Host "OS: $($PSVersionTable.OS)" -ForegroundColor Green
          
    - name: üèóÔ∏è Initialize AitherZero
      shell: pwsh
      run: |
        Write-Host "Initializing AitherZero environment..." -ForegroundColor Cyan
        
        # Import the main module
        Import-Module ./AitherZero.psd1 -Force
        Get-Module AitherZero
        
        Write-Host "AitherZero initialized successfully" -ForegroundColor Green
        
    - name: üóÇÔ∏è Generate Project Indexes
      shell: pwsh
      run: |
        Write-Host "Starting automated index generation..." -ForegroundColor Cyan
        
        # Set parameters based on trigger
        $mode = if ('${{ github.event_name }}' -eq 'workflow_dispatch') {
          '${{ github.event.inputs.mode }}'
        } elseif ('${{ github.event_name }}' -eq 'pull_request') {
          'Incremental'
        } elseif ('${{ github.event_name }}' -eq 'push' -and ('${{ github.ref }}' -eq 'refs/heads/main' -or '${{ github.ref }}' -eq 'refs/heads/develop')) {
          # Use Full mode on main/develop to regenerate all indexes after merge
          # This resolves any conflicts from feature branch merges
          'Full'
        } else {
          'Incremental'
        }
        
        Write-Host "Mode: $mode" -ForegroundColor White
        Write-Host "Event: ${{ github.event_name }}" -ForegroundColor White
        Write-Host "Ref: ${{ github.ref }}" -ForegroundColor White
        
        # Run index generation with Force flag on main/develop pushes
        try {
          if ($mode -eq 'Full') {
            ./automation-scripts/0745_Generate-ProjectIndexes.ps1 -Mode $mode -Force
            Write-Host "Full index regeneration completed (post-merge)" -ForegroundColor Green
          } else {
            ./automation-scripts/0745_Generate-ProjectIndexes.ps1 -Mode $mode
            Write-Host "Index generation completed successfully" -ForegroundColor Green
          }
        } catch {
          Write-Error "Index generation failed: $_"
          exit 1
        }
        
    - name: üìä Generate Index Report
      shell: pwsh
      run: |
        Write-Host "Parsing index report..." -ForegroundColor Cyan
        
        # Read the JSON report generated by the script
        $reportPath = ".aitherzero-index-report.json"
        if (Test-Path $reportPath) {
          $report = Get-Content $reportPath | ConvertFrom-Json
          
          Write-Host "Index Report Summary:" -ForegroundColor White
          Write-Host "  Mode: $($report.Mode)" -ForegroundColor White
          Write-Host "  Duration: $($report.Duration.TotalSeconds)s" -ForegroundColor White
          Write-Host "  Total Directories: $($report.Statistics.TotalDirectories)" -ForegroundColor White
          Write-Host "  Updated: $($report.Statistics.UpdatedIndexes)" -ForegroundColor Green
          Write-Host "  Skipped: $($report.Statistics.SkippedIndexes)" -ForegroundColor Gray
          Write-Host "  Failed: $($report.Statistics.FailedIndexes)" -ForegroundColor $(if ($report.Statistics.FailedIndexes -gt 0) { 'Red' } else { 'Gray' })
          
          # Export data for PR comment
          echo "INDEX_MODE=$($report.Mode)" >> $env:GITHUB_ENV
          echo "TOTAL_DIRS=$($report.Statistics.TotalDirectories)" >> $env:GITHUB_ENV
          echo "UPDATED_INDEXES=$($report.Statistics.UpdatedIndexes)" >> $env:GITHUB_ENV
          echo "SKIPPED_INDEXES=$($report.Statistics.SkippedIndexes)" >> $env:GITHUB_ENV
          echo "FAILED_INDEXES=$($report.Statistics.FailedIndexes)" >> $env:GITHUB_ENV
          echo "UPDATE_RATE=$($report.Statistics.UpdateRate)" >> $env:GITHUB_ENV
          echo "DURATION=$($report.Duration.TotalSeconds)" >> $env:GITHUB_ENV
          
          # Export updated paths as a multiline string
          $updatedPaths = $report.UpdatedPaths -join "`n"
          $delimiter = "EOF_PATHS_$(Get-Random)"
          echo "UPDATED_PATHS<<$delimiter" >> $env:GITHUB_ENV
          echo $updatedPaths >> $env:GITHUB_ENV
          echo $delimiter >> $env:GITHUB_ENV
        } else {
          Write-Host "Warning: Index report not found at $reportPath" -ForegroundColor Yellow
          # Set defaults
          echo "INDEX_MODE=Unknown" >> $env:GITHUB_ENV
          echo "TOTAL_DIRS=0" >> $env:GITHUB_ENV
          echo "UPDATED_INDEXES=0" >> $env:GITHUB_ENV
          echo "SKIPPED_INDEXES=0" >> $env:GITHUB_ENV
          echo "FAILED_INDEXES=0" >> $env:GITHUB_ENV
          echo "UPDATE_RATE=0" >> $env:GITHUB_ENV
          echo "DURATION=0" >> $env:GITHUB_ENV
          echo "UPDATED_PATHS=" >> $env:GITHUB_ENV
        }
        
    - name: ‚úÖ Validate Index Updates (Main/Develop Branch)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      shell: pwsh
      run: |
        Write-Host "Validating index updates..." -ForegroundColor Cyan
        
        # Check if there are uncommitted changes after generation
        $changes = git status --porcelain
        if ($changes) {
          Write-Warning "‚ö†Ô∏è Index files are out of date and need to be regenerated"
          Write-Host "The following index files need updates:" -ForegroundColor Yellow
          git status --porcelain | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
          
          Write-Host "`nüí° To fix this, contributors should:" -ForegroundColor Cyan
          Write-Host "  1. Run: ./automation-scripts/0745_Generate-ProjectIndexes.ps1 -Mode Full" -ForegroundColor White
          Write-Host "  2. Commit the updated index.md files to their PR" -ForegroundColor White
          Write-Host "  3. Push the changes before merging" -ForegroundColor White
          
          # Don't fail the workflow, just warn
          # Index updates should be part of the PR, not post-merge
          Write-Host "`n‚ÑπÔ∏è Index validation complete (changes detected but not committed)" -ForegroundColor Cyan
        } else {
          Write-Host "‚úÖ All index files are up to date" -ForegroundColor Green
        }
        
    - name: üîç Check for Uncommitted Index Changes (PR)
      if: github.event_name == 'pull_request'
      id: check-changes
      shell: pwsh
      run: |
        Write-Host "Checking for uncommitted index changes..." -ForegroundColor Cyan
        
        # Check if there are uncommitted changes after generation
        $changes = git status --porcelain | Where-Object { $_ -match '/index\.md$' }
        $hasUncommittedChanges = @($changes).Count -gt 0
        
        if ($hasUncommittedChanges) {
          Write-Host "‚úÖ Index files were regenerated and need to be committed" -ForegroundColor Green
          Write-Host "Updated index files:" -ForegroundColor Cyan
          $changes | ForEach-Object { Write-Host "  $_" -ForegroundColor Cyan }
          
          # Set environment variable for PR comment
          echo "HAS_UNCOMMITTED_INDEXES=true" >> $env:GITHUB_ENV
          echo "UNCOMMITTED_COUNT=$($changes.Count)" >> $env:GITHUB_ENV
          echo "has_changes=true" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "‚úÖ All index changes are already committed" -ForegroundColor Green
          echo "HAS_UNCOMMITTED_INDEXES=false" >> $env:GITHUB_ENV
          echo "UNCOMMITTED_COUNT=0" >> $env:GITHUB_ENV
          echo "has_changes=false" >> $env:GITHUB_OUTPUT
        }
        
    - name: üåø Create Auto-Index Branch and PR (PR Only)
      if: github.event_name == 'pull_request' && steps.check-changes.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const autoBranchName = `auto-index/${prNumber}`;
          const baseBranchName = context.payload.pull_request.head.ref;
          const repo = context.repo;
          
          core.info(`Creating auto-index branch: ${autoBranchName}`);
          core.info(`Base PR branch: ${baseBranchName}`);
          core.info(`PR number: ${prNumber}`);
          
          // Get the current commit SHA
          const { data: prData } = await github.rest.pulls.get({
            owner: repo.owner,
            repo: repo.repo,
            pull_number: prNumber
          });
          
          const headSha = prData.head.sha;
          core.info(`Head SHA: ${headSha}`);
          
          // Check if auto-index branch already exists and delete it
          try {
            await github.rest.git.getRef({
              owner: repo.owner,
              repo: repo.repo,
              ref: `heads/${autoBranchName}`
            });
            
            core.info(`Branch ${autoBranchName} exists, deleting it`);
            await github.rest.git.deleteRef({
              owner: repo.owner,
              repo: repo.repo,
              ref: `heads/${autoBranchName}`
            });
          } catch (error) {
            if (error.status === 404) {
              core.info(`Branch ${autoBranchName} does not exist yet`);
            } else {
              throw error;
            }
          }
          
          // Create new branch from current PR head
          await github.rest.git.createRef({
            owner: repo.owner,
            repo: repo.repo,
            ref: `refs/heads/${autoBranchName}`,
            sha: headSha
          });
          
          core.info(`‚úÖ Created branch ${autoBranchName}`);
          core.setOutput('auto_branch', autoBranchName);
          core.setOutput('base_branch', baseBranchName);
          
    - name: üíæ Commit and Push Index Updates
      if: github.event_name == 'pull_request' && steps.check-changes.outputs.has_changes == 'true'
      shell: bash
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Get the auto-index branch name from previous step
        AUTO_BRANCH="auto-index/${{ github.event.pull_request.number }}"
        
        # Checkout the auto-index branch
        git fetch origin
        git checkout "$AUTO_BRANCH"
        
        # Add and commit index changes (only index.md files, cache files are gitignored)
        git add **/index.md
        
        # Create commit message with details
        UPDATED_COUNT="${{ env.UPDATED_INDEXES }}"
        git commit -m "docs: update project indexes [auto-generated]" \
          -m "Automated index generation for PR #${{ github.event.pull_request.number }}" \
          -m "" \
          -m "Updated: ${UPDATED_COUNT} index files" \
          -m "Mode: ${{ env.INDEX_MODE }}" \
          -m "" \
          -m "This commit was automatically generated by the index automation workflow." \
          -m "It updates index.md files to reflect changes in the project structure."
        
        # Push to the auto-index branch
        git push origin "$AUTO_BRANCH"
        
        echo "‚úÖ Committed and pushed index updates to $AUTO_BRANCH"
        
    - name: üìù Create PR for Index Updates
      if: github.event_name == 'pull_request' && steps.check-changes.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const autoBranchName = `auto-index/${prNumber}`;
          const baseBranchName = context.payload.pull_request.head.ref;
          const repo = context.repo;
          
          const updatedCount = process.env.UPDATED_INDEXES || '0';
          const mode = process.env.INDEX_MODE || 'Unknown';
          const duration = process.env.DURATION || '0';
          
          // Check if a PR already exists from auto-index branch to base branch
          const { data: existingPRs } = await github.rest.pulls.list({
            owner: repo.owner,
            repo: repo.repo,
            head: `${repo.owner}:${autoBranchName}`,
            base: baseBranchName,
            state: 'open'
          });
          
          let autoIndexPR;
          
          if (existingPRs.length > 0) {
            autoIndexPR = existingPRs[0];
            core.info(`Found existing auto-index PR #${autoIndexPR.number}`);
          } else {
            // Create PR from auto-index branch to base PR branch
            const prTitle = `Auto-update indexes for PR #${prNumber}`;
            const prBody = `## Automated Index Updates
            
            This PR contains automatically generated index file updates for [PR #${prNumber}](https://github.com/${repo.owner}/${repo.repo}/pull/${prNumber}).
            
            ### Summary
            - **Updated Indexes**: ${updatedCount} files
            - **Generation Mode**: ${mode}
            - **Duration**: ${duration}s
            
            ### Automation Details
            This PR was automatically created by the index automation workflow. Please review and merge this PR into the parent branch to apply the index updates.
            
            ### Important
            - Do not modify this PR manually
            - This PR will be closed automatically when the parent PR is merged or closed
            - Index updates are isolated to keep the parent PR commits clean
            
            ---
            *Related to: #${prNumber}*
            *Generated by: Index Automation Workflow*`;

            const { data: newPR } = await github.rest.pulls.create({
              owner: repo.owner,
              repo: repo.repo,
              title: prTitle,
              head: autoBranchName,
              base: baseBranchName,
              body: prBody
            });
            
            autoIndexPR = newPR;
            core.info(`‚úÖ Created auto-index PR #${newPR.number}`);
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: newPR.number,
              labels: ['documentation', 'automated', 'auto-index']
            });
          }
          
          // Set output for potential auto-merge step
          core.setOutput('auto_pr_number', autoIndexPR.number);
          
          // Add comment to original PR
          const comment = `Index Updates Available
          
          Automated index updates have been generated and are available in PR #${autoIndexPR.number}.
          
          Once that PR is reviewed and merged into this branch, the index files will be up to date.
          
          [View Auto-Index PR](https://github.com/${repo.owner}/${repo.repo}/pull/${autoIndexPR.number})`;

          await github.rest.issues.createComment({
            issue_number: prNumber,
            owner: repo.owner,
            repo: repo.repo,
            body: comment
          });
        
    - name: üí¨ Comment on PR (Summary Only)
      if: github.event_name == 'pull_request' && steps.check-changes.outputs.has_changes == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const mode = process.env.INDEX_MODE || 'Unknown';
          const totalDirs = process.env.TOTAL_DIRS || '0';
          const updated = process.env.UPDATED_INDEXES || '0';
          const skipped = process.env.SKIPPED_INDEXES || '0';
          const failed = process.env.FAILED_INDEXES || '0';
          const updateRate = process.env.UPDATE_RATE || '0';
          const duration = process.env.DURATION || '0';
          const updatedPaths = process.env.UPDATED_PATHS || '';
          const hasUncommitted = process.env.HAS_UNCOMMITTED_INDEXES === 'true';
          const uncommittedCount = process.env.UNCOMMITTED_COUNT || '0';
          
          // Parse updated paths
          const pathList = updatedPaths.trim().split('\n').filter(p => p.trim().length > 0);
          const maxPathsToShow = 20;
          const hasMorePaths = pathList.length > maxPathsToShow;
          const displayPaths = pathList.slice(0, maxPathsToShow);
          
          // Build changed files section
          let changedFilesSection = '';
          if (parseInt(updated) > 0) {
            changedFilesSection = `
          ### üìù Updated Index Files
          
          ${displayPaths.map(p => `- \`${p}\``).join('\n')}
          ${hasMorePaths ? `\n_...and ${pathList.length - maxPathsToShow} more directories_` : ''}
          `;
          } else {
            changedFilesSection = `
          ### ‚ÑπÔ∏è No Changes Needed
          
          All index files are already up to date. No directories required regeneration.
          `;
          
          // Build status emoji
          const statusEmoji = parseInt(failed) > 0 ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
          
          // Calculate percentages for skipped and failed
          const skippedPercent = totalDirs > 0 ? Math.round((skipped / totalDirs) * 100) : 0;
          const failedPercent = totalDirs > 0 ? Math.round((failed / totalDirs) * 100) : 0;
          
          const comment = `## ${statusEmoji} Project Index Update Report
          
          **Mode:** ${mode} | **Duration:** ${duration}s
          
          ### üìä Statistics
          
          | Metric | Count | Percentage |
          |--------|-------|------------|
          | üìÅ Total Directories Scanned | ${totalDirs} | 100% |
          | ‚úÖ Indexes Updated | ${updated} | ${updateRate}% |
          | ‚è≠Ô∏è Skipped (No Changes) | ${skipped} | ${skippedPercent}% |
          | ‚ùå Failed | ${failed} | ${failedPercent}% |
          
          ${changedFilesSection}
          
          ### üéØ Result
          
          ‚úì All index files are current - no regeneration needed. The change detection system verified that no directory content has changed since the last index generation.
          
          ${parseInt(failed) > 0 ? `
          ### ‚ö†Ô∏è Generation Errors
          
          **${failed} directories failed** to generate indexes. Please review the workflow logs for details.
          ` : ''}
          
          ---
          <details>
          <summary>üí° About Project Index Automation</summary>
          
          This workflow automatically generates \`index.md\` files for all project directories, creating a fully navigable documentation structure on GitHub. The system uses content hashing to detect changes and only regenerates indexes when directory contents have been modified.
          
          **Features:**
          - ‚ú® Smart change detection - only updates when needed
          - üìä Comprehensive directory analysis
          - üîó Hierarchical navigation throughout the project
          - üöÄ Optimized for GitHub's native browsing experience
          - ü§ñ Automatic PR creation for index updates
          </details>
          
          *Generated by AitherZero Project Index Automation*`;
          
          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: üì§ Upload Index Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: project-indexes
        path: |
          **/index.md
          .aitherzero-index-cache.json
          .aitherzero-index-report.json
        retention-days: 30
        
    - name: ‚úÖ Workflow Complete
      shell: pwsh
      run: |
        Write-Host "Project index automation completed successfully!" -ForegroundColor Green
