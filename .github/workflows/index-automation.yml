name: 🗂️ Project Index Automation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'domains/**'
      - 'automation-scripts/**'
      - 'infrastructure/**'
      - 'tests/**'
      - 'orchestration/**'
      - 'docs/**'
      - '**/*.md'
      - '**/*.ps1'
      - '**/*.psm1'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'domains/**'
      - 'automation-scripts/**'
      - 'infrastructure/**'
      - 'tests/**'
      - 'orchestration/**'
      - 'docs/**'
      - '**/*.md'
      - '**/*.ps1'
      - '**/*.psm1'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Index generation mode'
        required: true
        default: 'Incremental'
        type: choice
        options:
        - Full
        - Incremental
        - Verify

jobs:
  generate-indexes:
    name: 🔄 Generate Project Indexes
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: ⚡ Setup PowerShell
      shell: pwsh
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Green
        Write-Host "OS: $($PSVersionTable.OS)" -ForegroundColor Green
          
    - name: 🏗️ Initialize AitherZero
      shell: pwsh
      run: |
        Write-Host "Initializing AitherZero environment..." -ForegroundColor Cyan
        
        # Import the main module
        Import-Module ./AitherZero.psd1 -Force
        Get-Module AitherZero
        
        Write-Host "AitherZero initialized successfully" -ForegroundColor Green
        
    - name: 🗂️ Generate Project Indexes
      shell: pwsh
      run: |
        Write-Host "Starting automated index generation..." -ForegroundColor Cyan
        
        # Set parameters based on trigger
        $mode = if ('${{ github.event_name }}' -eq 'workflow_dispatch') {
          '${{ github.event.inputs.mode }}'
        } elseif ('${{ github.event_name }}' -eq 'pull_request') {
          'Incremental'
        } elseif ('${{ github.event_name }}' -eq 'push' -and ('${{ github.ref }}' -eq 'refs/heads/main' -or '${{ github.ref }}' -eq 'refs/heads/develop')) {
          # Use Full mode on main/develop to regenerate all indexes after merge
          # This resolves any conflicts from feature branch merges
          'Full'
        } else {
          'Incremental'
        }
        
        Write-Host "Mode: $mode" -ForegroundColor White
        Write-Host "Event: ${{ github.event_name }}" -ForegroundColor White
        Write-Host "Ref: ${{ github.ref }}" -ForegroundColor White
        
        # Run index generation with Force flag on main/develop pushes
        try {
          if ($mode -eq 'Full') {
            ./automation-scripts/0745_Generate-ProjectIndexes.ps1 -Mode $mode -Force
            Write-Host "Full index regeneration completed (post-merge)" -ForegroundColor Green
          } else {
            ./automation-scripts/0745_Generate-ProjectIndexes.ps1 -Mode $mode
            Write-Host "Index generation completed successfully" -ForegroundColor Green
          }
        } catch {
          Write-Error "Index generation failed: $_"
          exit 1
        }
        
    - name: 📊 Generate Index Report
      shell: pwsh
      run: |
        Write-Host "Parsing index report..." -ForegroundColor Cyan
        
        # Read the JSON report generated by the script
        $reportPath = ".aitherzero-index-report.json"
        if (Test-Path $reportPath) {
          $report = Get-Content $reportPath | ConvertFrom-Json
          
          Write-Host "Index Report Summary:" -ForegroundColor White
          Write-Host "  Mode: $($report.Mode)" -ForegroundColor White
          Write-Host "  Duration: $($report.Duration.TotalSeconds)s" -ForegroundColor White
          Write-Host "  Total Directories: $($report.Statistics.TotalDirectories)" -ForegroundColor White
          Write-Host "  Updated: $($report.Statistics.UpdatedIndexes)" -ForegroundColor Green
          Write-Host "  Skipped: $($report.Statistics.SkippedIndexes)" -ForegroundColor Gray
          Write-Host "  Failed: $($report.Statistics.FailedIndexes)" -ForegroundColor $(if ($report.Statistics.FailedIndexes -gt 0) { 'Red' } else { 'Gray' })
          
          # Export data for PR comment
          echo "INDEX_MODE=$($report.Mode)" >> $env:GITHUB_ENV
          echo "TOTAL_DIRS=$($report.Statistics.TotalDirectories)" >> $env:GITHUB_ENV
          echo "UPDATED_INDEXES=$($report.Statistics.UpdatedIndexes)" >> $env:GITHUB_ENV
          echo "SKIPPED_INDEXES=$($report.Statistics.SkippedIndexes)" >> $env:GITHUB_ENV
          echo "FAILED_INDEXES=$($report.Statistics.FailedIndexes)" >> $env:GITHUB_ENV
          echo "UPDATE_RATE=$($report.Statistics.UpdateRate)" >> $env:GITHUB_ENV
          echo "DURATION=$($report.Duration.TotalSeconds)" >> $env:GITHUB_ENV
          
          # Export updated paths as a multiline string
          $updatedPaths = $report.UpdatedPaths -join "`n"
          $delimiter = "EOF_PATHS_$(Get-Random)"
          echo "UPDATED_PATHS<<$delimiter" >> $env:GITHUB_ENV
          echo $updatedPaths >> $env:GITHUB_ENV
          echo $delimiter >> $env:GITHUB_ENV
        } else {
          Write-Host "Warning: Index report not found at $reportPath" -ForegroundColor Yellow
          # Set defaults
          echo "INDEX_MODE=Unknown" >> $env:GITHUB_ENV
          echo "TOTAL_DIRS=0" >> $env:GITHUB_ENV
          echo "UPDATED_INDEXES=0" >> $env:GITHUB_ENV
          echo "SKIPPED_INDEXES=0" >> $env:GITHUB_ENV
          echo "FAILED_INDEXES=0" >> $env:GITHUB_ENV
          echo "UPDATE_RATE=0" >> $env:GITHUB_ENV
          echo "DURATION=0" >> $env:GITHUB_ENV
          echo "UPDATED_PATHS=" >> $env:GITHUB_ENV
        }
        
    - name: ✅ Validate Index Updates (Main/Develop Branch)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      shell: pwsh
      run: |
        Write-Host "Validating index updates..." -ForegroundColor Cyan
        
        # Check if there are uncommitted changes after generation
        $changes = git status --porcelain
        if ($changes) {
          Write-Warning "⚠️ Index files are out of date and need to be regenerated"
          Write-Host "The following index files need updates:" -ForegroundColor Yellow
          git status --porcelain | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
          
          Write-Host "`n💡 To fix this, contributors should:" -ForegroundColor Cyan
          Write-Host "  1. Run: ./automation-scripts/0745_Generate-ProjectIndexes.ps1 -Mode Full" -ForegroundColor White
          Write-Host "  2. Commit the updated index.md files to their PR" -ForegroundColor White
          Write-Host "  3. Push the changes before merging" -ForegroundColor White
          
          # Don't fail the workflow, just warn
          # Index updates should be part of the PR, not post-merge
          Write-Host "`nℹ️ Index validation complete (changes detected but not committed)" -ForegroundColor Cyan
        } else {
          Write-Host "✅ All index files are up to date" -ForegroundColor Green
        }
        
    - name: 🔍 Check for Uncommitted Index Changes (PR)
      if: github.event_name == 'pull_request'
      shell: pwsh
      run: |
        Write-Host "Checking for uncommitted index changes..." -ForegroundColor Cyan
        
        # Check if there are uncommitted changes after generation
        $changes = git status --porcelain | Where-Object { $_ -match '/index\.md$' }
        $hasUncommittedChanges = @($changes).Count -gt 0
        
        if ($hasUncommittedChanges) {
          Write-Warning "⚠️ Index files were regenerated but not committed to this PR"
          Write-Host "Uncommitted index files:" -ForegroundColor Yellow
          $changes | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
          
          # Set environment variable for PR comment
          echo "HAS_UNCOMMITTED_INDEXES=true" >> $env:GITHUB_ENV
          echo "UNCOMMITTED_COUNT=$($changes.Count)" >> $env:GITHUB_ENV
        } else {
          Write-Host "✅ All index changes are already committed" -ForegroundColor Green
          echo "HAS_UNCOMMITTED_INDEXES=false" >> $env:GITHUB_ENV
          echo "UNCOMMITTED_COUNT=0" >> $env:GITHUB_ENV
        }
        
    - name: 💬 Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const mode = process.env.INDEX_MODE || 'Unknown';
          const totalDirs = process.env.TOTAL_DIRS || '0';
          const updated = process.env.UPDATED_INDEXES || '0';
          const skipped = process.env.SKIPPED_INDEXES || '0';
          const failed = process.env.FAILED_INDEXES || '0';
          const updateRate = process.env.UPDATE_RATE || '0';
          const duration = process.env.DURATION || '0';
          const updatedPaths = process.env.UPDATED_PATHS || '';
          const hasUncommitted = process.env.HAS_UNCOMMITTED_INDEXES === 'true';
          const uncommittedCount = process.env.UNCOMMITTED_COUNT || '0';
          
          // Parse updated paths
          const pathList = updatedPaths.trim().split('\n').filter(p => p.length > 0);
          const maxPathsToShow = 20;
          const hasMorePaths = pathList.length > maxPathsToShow;
          const displayPaths = pathList.slice(0, maxPathsToShow);
          
          // Build changed files section
          let changedFilesSection = '';
          if (parseInt(updated) > 0) {
            changedFilesSection = `
          ### 📝 Updated Index Files
          
          ${displayPaths.map(p => `- \`${p}/index.md\``).join('\n')}
          ${hasMorePaths ? `\n_...and ${pathList.length - maxPathsToShow} more directories_` : ''}
          `;
          } else {
            changedFilesSection = `
          ### ℹ️ No Changes Needed
          
          All index files are already up to date. No directories required regeneration.
          `;
          }
          
          // Add action required section if there are uncommitted changes
          let actionRequiredSection = '';
          if (hasUncommitted) {
            actionRequiredSection = `
          ### ⚠️ Action Required
          
          **${uncommittedCount} index file(s)** were regenerated but are not committed to this PR.
          
          To fix this, please run the following commands locally:
          
          \`\`\`bash
          # Regenerate indexes
          ./automation-scripts/0745_Generate-ProjectIndexes.ps1 -Mode Full
          
          # Commit the changes
          git add **/index.md
          git commit -m "docs: update project indexes"
          git push
          \`\`\`
          
          **Note:** All index updates must be committed as part of your PR before merging.
          `;
          }
          
          // Build status emoji based on conditions
          let statusEmoji;
          if (hasUncommitted) {
            statusEmoji = '⚠️';
          } else if (parseInt(failed) > 0) {
            statusEmoji = '⚠️';
          } else if (parseInt(updated) > 0) {
            statusEmoji = '✅';
          } else {
            statusEmoji = 'ℹ️';
          }
          
          // Calculate percentages for skipped and failed
          const skippedPercent = totalDirs > 0 ? Math.round((skipped / totalDirs) * 100) : 0;
          const failedPercent = totalDirs > 0 ? Math.round((failed / totalDirs) * 100) : 0;
          
          const comment = `## ${statusEmoji} Project Index Update Report
          
          **Mode:** ${mode} | **Duration:** ${duration}s
          
          ### 📊 Statistics
          
          | Metric | Count | Percentage |
          |--------|-------|------------|
          | 📁 Total Directories Scanned | ${totalDirs} | 100% |
          | ✅ Indexes Updated | ${updated} | ${updateRate}% |
          | ⏭️ Skipped (No Changes) | ${skipped} | ${skippedPercent}% |
          | ❌ Failed | ${failed} | ${failedPercent}% |
          
          ${changedFilesSection}
          
          ${actionRequiredSection}
          
          ### 🎯 What This Means
          
          ${parseInt(updated) > 0 ? 
            `✨ **${updated} directories** had their navigation indexes regenerated with:
          - 🔗 Hierarchical breadcrumb navigation (parent ← current → children)
          - 📊 Automatic content analysis and categorization
          - 🔍 Bidirectional directory links for easy navigation
          - 📝 Updated file listings and metadata` :
            `✓ All index files are current - no regeneration needed. The change detection system verified that no directory content has changed since the last index generation.`
          }
          
          ${parseInt(failed) > 0 && !hasUncommitted ? `
          ### ⚠️ Generation Errors
          
          **${failed} directories failed** to generate indexes. Please review the workflow logs for details.
          ` : ''}
          
          ---
          <details>
          <summary>💡 About Project Index Automation</summary>
          
          This workflow automatically generates \`index.md\` files for all project directories, creating a fully navigable documentation structure on GitHub. The system uses content hashing to detect changes and only regenerates indexes when directory contents have been modified.
          
          **Features:**
          - ✨ Smart change detection - only updates when needed
          - 📊 Comprehensive directory analysis
          - 🔗 Hierarchical navigation throughout the project
          - 🚀 Optimized for GitHub's native browsing experience
          </details>
          
          *Generated by AitherZero Project Index Automation*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: 📤 Upload Index Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: project-indexes
        path: |
          **/index.md
          .aitherzero-index-cache.json
          .aitherzero-index-report.json
        retention-days: 30
        
    - name: ✅ Workflow Complete
      shell: pwsh
      run: |
        Write-Host "Project index automation completed successfully!" -ForegroundColor Green
