name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      use_self_hosted:
        description: 'Use self-hosted runners'
        required: false
        default: 'auto'
        type: choice
        options:
          - 'auto'
          - 'true'
          - 'false'
      test_profile:
        description: 'Test profile to run'
        required: false
        default: 'standard'
        type: choice
        options:
          - 'quick'
          - 'standard'
          - 'full'
          - 'ci'

env:
  AITHERZERO_CI: true

jobs:
  # Determine runner strategy
  setup:
    name: Setup CI Strategy
    runs-on: ubuntu-latest
    outputs:
      runner-windows: ${{ steps.runners.outputs.runner-windows }}
      runner-linux: ${{ steps.runners.outputs.runner-linux }}
      runner-macos: ${{ steps.runners.outputs.runner-macos }}
      test-profile: ${{ steps.runners.outputs.test-profile }}
      use-self-hosted: ${{ steps.runners.outputs.use-self-hosted }}
    
    steps:
    - name: Determine runners and test profile
      id: runners
      shell: pwsh
      run: |
        $useSelfHosted = ('${{ github.event.inputs.use_self_hosted }}' -eq 'true') -or `
                        (('${{ github.event.inputs.use_self_hosted }}' -eq 'auto') -and ('${{ github.repository_owner }}' -ne 'github'))
        
        $testProfile = if ('${{ github.event.inputs.test_profile }}') { '${{ github.event.inputs.test_profile }}' } else { 'standard' }
        
        if ($useSelfHosted) {
          $runnerWindows = '[self-hosted, windows, standard]'
          $runnerLinux = '[self-hosted, linux, standard]'
          $runnerMacos = '[self-hosted, macos, standard]'
        } else {
          $runnerWindows = 'windows-latest'
          $runnerLinux = 'ubuntu-latest'
          $runnerMacos = 'macos-latest'
        }
        
        "runner-windows=$runnerWindows" >> $env:GITHUB_OUTPUT
        "runner-linux=$runnerLinux" >> $env:GITHUB_OUTPUT
        "runner-macos=$runnerMacos" >> $env:GITHUB_OUTPUT
        "test-profile=$testProfile" >> $env:GITHUB_OUTPUT
        "use-self-hosted=$useSelfHosted" >> $env:GITHUB_OUTPUT
        
        Write-Host "CI Configuration:"
        Write-Host "  Self-hosted: $useSelfHosted"
        Write-Host "  Test profile: $testProfile"
        Write-Host "  Windows runner: $runnerWindows"
        Write-Host "  Linux runner: $runnerLinux"
        Write-Host "  macOS runner: $runnerMacos"

  test:
    name: Test on ${{ matrix.os.name }}
    needs: setup
    runs-on: ${{ matrix.os.runner }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: ubuntu
            runner: ${{ needs.setup.outputs.runner-linux }}
            shell: pwsh
          - name: windows
            runner: ${{ needs.setup.outputs.runner-windows }}
            shell: pwsh
          - name: macos
            runner: ${{ needs.setup.outputs.runner-macos }}
            shell: pwsh

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PowerShell (Self-hosted)
      if: needs.setup.outputs.use-self-hosted == 'true'
      shell: ${{ matrix.os.shell }}
      run: |
        # Initialize AitherZero environment for self-hosted runners
        if (Test-Path "./Initialize-AitherModules.ps1") {
          ./Initialize-AitherModules.ps1 -Silent -CI
        } elseif (Test-Path "./Initialize-AitherEnvironment.ps1") {
          ./Initialize-AitherEnvironment.ps1 -CI
        } else {
          Write-Host "No initialization script found, using basic setup"
        }

    - name: Setup PowerShell (GitHub-hosted)
      if: needs.setup.outputs.use-self-hosted != 'true'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Install PowerShell modules
      shell: ${{ matrix.os.shell }}
      run: |
        # Install required PowerShell modules
        if (-not (Get-PSRepository -Name PSGallery -ErrorAction SilentlyContinue)) {
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        }
        
        $modules = @('Pester', 'PSScriptAnalyzer', 'ThreadJob')
        foreach ($module in $modules) {
          if (-not (Get-Module -ListAvailable -Name $module -ErrorAction SilentlyContinue)) {
            Write-Host "Installing module: $module"
            Install-Module -Name $module -MinimumVersion 5.0.0 -Force -SkipPublisherCheck -ErrorAction Continue
          } else {
            Write-Host "Module already available: $module"
          }
        }

    - name: Initialize environment
      shell: ${{ matrix.os.shell }}
      run: |
        # Initialize AitherZero environment
        if (Test-Path "./Initialize-AitherModules.ps1") {
          ./Initialize-AitherModules.ps1 -Force -CI
        } elseif (Test-Path "./Initialize-AitherEnvironment.ps1") {
          ./Initialize-AitherEnvironment.ps1 -Force -CI
        } else {
          Write-Host "Using bootstrap for initialization"
          if (Test-Path "./bootstrap.ps1") {
            ./bootstrap.ps1 -Mode Update -InstallProfile Standard -NonInteractive -SkipAutoStart
          }
        }

    - name: Run tests using orchestration
      shell: ${{ matrix.os.shell }}
      run: |
        # Run tests based on selected profile
        $testProfile = "${{ needs.setup.outputs.test-profile }}"
        Write-Host "Running test profile: $testProfile" -ForegroundColor Cyan
        
        switch ($testProfile) {
          'quick' {
            Write-Host "Running quick test suite..." -ForegroundColor Yellow
            ./Start-AitherZero.ps1 -Mode Orchestrate -Playbook test-quick -CI
          }
          'full' {
            Write-Host "Running full test suite..." -ForegroundColor Yellow
            ./Start-AitherZero.ps1 -Mode Orchestrate -Playbook test-full -CI
          }
          'ci' {
            Write-Host "Running CI test suite..." -ForegroundColor Yellow
            ./Start-AitherZero.ps1 -Mode Orchestrate -Playbook test-ci -CI
          }
          default {
            Write-Host "Running standard tests..." -ForegroundColor Yellow
            # Run standard test sequence
            ./az 0404 -CI -ContinueOnError
            ./az 0402 -CI -NoCoverage:$false
            if ("${{ matrix.os.name }}" -ne "macos") {
              ./az 0403 -CI
            }
            ./az 0407 -CI
          }
        }

    - name: Generate test report
      shell: ${{ matrix.os.shell }}
      run: |
        # Generate comprehensive test report
        ./az 0501 -Format JSON,HTML,Markdown -CI
      if: always()

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          test-results/
          TestReport*.html
          TestReport*.json

    - name: Upload coverage
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest'
      with:
        name: coverage-report
        path: coverage/

  validate-playbooks:
    name: Validate Playbooks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PowerShell
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Install PowerShell modules
      shell: pwsh
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester -MinimumVersion 5.0.0 -Force -SkipPublisherCheck
        Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck

    - name: Initialize environment
      shell: pwsh
      run: |
        ./Initialize-AitherEnvironment.ps1

    - name: Test quick playbook
      shell: pwsh
      run: |
        ./Start-AitherZero.ps1 -Mode Orchestrate -Playbook test-quick -CI

    - name: Test CI playbook
      shell: pwsh
      run: |
        ./Start-AitherZero.ps1 -Mode Orchestrate -Playbook test-ci -CI

  build-release:
    name: Build Release Package
    runs-on: windows-latest
    needs: [test, validate-playbooks]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PowerShell
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Initialize environment
      shell: pwsh
      run: |
        ./Initialize-AitherEnvironment.ps1

    - name: Generate project report
      shell: pwsh
      run: |
        ./az 0510 -ShowAll -OutputPath ./build-artifacts

    - name: Build release package
      shell: pwsh
      run: |
        # Create release package
        $version = Get-Content VERSION
        $packageName = "AitherZero-$version-$(Get-Date -Format 'yyyyMMdd')"
        
        New-Item -ItemType Directory -Path "./release/$packageName" -Force
        
        # Copy essential files
        $essentialItems = @(
          'Start-AitherZero.ps1',
          'Initialize-AitherEnvironment.ps1',
          'bootstrap.ps1',
          'az',
          'VERSION',
          'README.md',
          'CLAUDE.md',
          'LICENSE',
          'domains/',
          'automation-scripts/',
          'orchestration/',
          'configs/',
          'modules/'
        )
    
        foreach ($item in $essentialItems) {
          if (Test-Path $item) {
            Copy-Item -Path $item -Destination "./release/$packageName/" -Recurse -Force
          }
        }
        
        # Create zip
        Compress-Archive -Path "./release/$packageName/*" -DestinationPath "./release/$packageName.zip" -Force
        
        Write-Host "Created release package: $packageName.zip"

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: |
          release/*.zip
          build-artifacts/ProjectReport*.html
          build-artifacts/ProjectReport*.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, validate-playbooks, build-release, security-scan]
    if: always()

    steps:
    - name: Check job results
      shell: pwsh
      run: |
        $results = @{
          test = '${{ needs.test.result }}'
          validate = '${{ needs.validate-playbooks.result }}'
          build = '${{ needs.build-release.result }}'
          security = '${{ needs.security-scan.result }}'
        }
        
        $failed = $results.GetEnumerator() | Where-Object { $_.Value -ne 'success' -and $_.Value -ne 'skipped' }
        
        if ($failed) {
          Write-Host "CI Pipeline failed:" -ForegroundColor Red
          $failed | ForEach-Object { Write-Host "  - $($_.Key): $($_.Value)" -ForegroundColor Red }
          exit 1
        } else {
          Write-Host "CI Pipeline succeeded!" -ForegroundColor Green
        }