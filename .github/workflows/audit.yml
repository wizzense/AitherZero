name: "Audit"

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
      - '**/*.md'
      - 'tests/**'
  pull_request:
    branches: [main, develop]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
      - '**/*.md'
      - 'tests/**'
  schedule:
    # Run weekly audits on Sundays at 1 AM UTC
    - cron: '0 1 * * 0'
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of audit to perform'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - documentation-only
          - test-only
          - structure-only
          - dependencies-only
      create_issues:
        description: 'Create GitHub issues for findings'
        required: false
        default: false
        type: boolean
      severity_threshold:
        description: 'Minimum severity for issue creation'
        required: false
        default: 'medium'
        type: choice
        options:
          - low
          - medium
          - high
          - critical

permissions:
  contents: read
  issues: write

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: true

defaults:
  run:
    shell: pwsh

jobs:
  documentation-audit:
    name: "Documentation Audit"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.audit_type != 'test-only' && github.event.inputs.audit_type != 'structure-only' && github.event.inputs.audit_type != 'dependencies-only'
    outputs:
      doc-coverage: ${{ steps.audit.outputs.coverage }}
      missing-docs: ${{ steps.audit.outputs.missing-count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Audit documentation coverage
        id: audit
        run: |
          Write-Host "📚 Auditing documentation coverage..."
          
          # Define required documentation files
          $requiredDocs = @(
            "README.md",
            "CHANGELOG.md",
            "LICENSE",
            "QUICKSTART.md"
          )
          
          # Check for missing top-level documentation
          $missingTopLevel = @()
          foreach ($doc in $requiredDocs) {
            if (-not (Test-Path $doc)) {
              $missingTopLevel += $doc
            }
          }
          
          # Audit module documentation
          $modules = Get-ChildItem "aither-core/modules" -Directory -ErrorAction SilentlyContinue
          $moduleDocResults = @()
          
          foreach ($module in $modules) {
            $modulePath = $module.FullName
            $moduleName = $module.Name
            
            $docStatus = @{
              Module = $moduleName
              HasReadme = Test-Path (Join-Path $modulePath "README.md")
              HasManifest = Test-Path (Join-Path $modulePath "$moduleName.psd1")
              HasModule = Test-Path (Join-Path $modulePath "$moduleName.psm1")
              HasTests = Test-Path (Join-Path $modulePath "tests") -or (Get-ChildItem $modulePath -Filter "*.Tests.ps1" -Recurse).Count -gt 0
              HasExamples = Test-Path (Join-Path $modulePath "examples") -or Test-Path (Join-Path $modulePath "Examples")
            }
            
            $moduleDocResults += [PSCustomObject]$docStatus
          }
          
          # Audit function documentation
          $psFiles = Get-ChildItem -Include "*.ps1", "*.psm1" -Recurse | Where-Object { $_.FullName -notlike "*test*" }
          $functionDocResults = @()
          
          foreach ($file in $psFiles) {
            $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
            if (-not $content) { continue }
            
            # Find function definitions
            $functions = [regex]::Matches($content, 'function\s+([a-zA-Z0-9_-]+)', [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
            
            foreach ($function in $functions) {
              $functionName = $function.Groups[1].Value
              
              # Check for comment-based help
              $hasHelp = $content -match "(?s)\.SYNOPSIS.*?\.DESCRIPTION.*?$functionName" -or
                        $content -match "(?s)<#.*?\.SYNOPSIS.*?#>.*?function\s+$functionName"
              
              $functionDocResults += [PSCustomObject]@{
                File = $file.Name
                Function = $functionName
                HasHelp = $hasHelp
              }
            }
          }
          
          # Calculate coverage metrics
          $totalModules = $moduleDocResults.Count
          $documentedModules = ($moduleDocResults | Where-Object { $_.HasReadme }).Count
          $testedModules = ($moduleDocResults | Where-Object { $_.HasTests }).Count
          
          $totalFunctions = $functionDocResults.Count
          $documentedFunctions = ($functionDocResults | Where-Object { $_.HasHelp }).Count
          
          $moduleCoverage = if ($totalModules -gt 0) { [math]::Round(($documentedModules / $totalModules) * 100, 1) } else { 100 }
          $functionCoverage = if ($totalFunctions -gt 0) { [math]::Round(($documentedFunctions / $totalFunctions) * 100, 1) } else { 100 }
          $overallCoverage = [math]::Round(($moduleCoverage + $functionCoverage) / 2, 1)
          
          Write-Host "📊 Documentation Coverage Results:"
          Write-Host "  Overall Coverage: $overallCoverage%"
          Write-Host "  Module Coverage: $moduleCoverage% ($documentedModules/$totalModules)"
          Write-Host "  Function Coverage: $functionCoverage% ($documentedFunctions/$totalFunctions)"
          Write-Host "  Missing top-level docs: $($missingTopLevel.Count)"
          Write-Host "  Modules with tests: $testedModules/$totalModules"
          
          # Create detailed report
          $report = @{
            Summary = @{
              OverallCoverage = $overallCoverage
              ModuleCoverage = $moduleCoverage
              FunctionCoverage = $functionCoverage
              MissingTopLevel = $missingTopLevel.Count
              TestedModules = $testedModules
              TotalModules = $totalModules
            }
            MissingTopLevel = $missingTopLevel
            ModuleResults = $moduleDocResults
            FunctionResults = $functionDocResults | Where-Object { -not $_.HasHelp }
            Timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
          }
          
          $report | ConvertTo-Json -Depth 4 | Set-Content "documentation-audit.json"
          
          echo "coverage=$overallCoverage" >> $env:GITHUB_OUTPUT
          echo "missing-count=$($missingTopLevel.Count + ($functionDocResults | Where-Object { -not $_.HasHelp }).Count)" >> $env:GITHUB_OUTPUT

      - name: Upload documentation audit
        uses: actions/upload-artifact@v4
        with:
          name: documentation-audit
          path: documentation-audit.json
          retention-days: 90

  test-audit:
    name: "Test Coverage Audit"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.audit_type != 'documentation-only' && github.event.inputs.audit_type != 'structure-only' && github.event.inputs.audit_type != 'dependencies-only'
    outputs:
      test-coverage: ${{ steps.audit.outputs.coverage }}
      missing-tests: ${{ steps.audit.outputs.missing-count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Audit test coverage
        id: audit
        run: |
          Write-Host "🧪 Auditing test coverage..."
          
          # Find all PowerShell modules and functions
          $psFiles = Get-ChildItem -Include "*.ps1", "*.psm1" -Recurse | 
                     Where-Object { $_.FullName -notlike "*test*" -and $_.FullName -notlike "*build*" }
          
          $allFunctions = @()
          foreach ($file in $psFiles) {
            $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
            if (-not $content) { continue }
            
            $functions = [regex]::Matches($content, 'function\s+([a-zA-Z0-9_-]+)', [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
            foreach ($function in $functions) {
              $allFunctions += [PSCustomObject]@{
                File = $file.FullName.Replace((Get-Location).Path, "").TrimStart('/')
                Function = $function.Groups[1].Value
              }
            }
          }
          
          # Find all test files
          $testFiles = Get-ChildItem -Include "*.Tests.ps1" -Recurse
          $testCoverage = @()
          
          foreach ($testFile in $testFiles) {
            $testContent = Get-Content $testFile.FullName -Raw -ErrorAction SilentlyContinue
            if (-not $testContent) { continue }
            
            # Find Describe blocks (test suites)
            $describes = [regex]::Matches($testContent, 'Describe\s+["\']([^"\']+)["\']', [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
            foreach ($describe in $describes) {
              $testCoverage += [PSCustomObject]@{
                TestFile = $testFile.Name
                TestSuite = $describe.Groups[1].Value
              }
            }
          }
          
          # Analyze module test coverage
          $modules = Get-ChildItem "aither-core/modules" -Directory -ErrorAction SilentlyContinue
          $moduleTestResults = @()
          
          foreach ($module in $modules) {
            $moduleName = $module.Name
            $hasTests = (Get-ChildItem $module.FullName -Filter "*.Tests.ps1" -Recurse).Count -gt 0 -or
                       ($testFiles | Where-Object { $_.Name -like "*$moduleName*" }).Count -gt 0
            
            $moduleTestResults += [PSCustomObject]@{
              Module = $moduleName
              HasTests = $hasTests
            }
          }
          
          # Calculate metrics
          $totalModules = $moduleTestResults.Count
          $testedModules = ($moduleTestResults | Where-Object { $_.HasTests }).Count
          $totalFunctions = $allFunctions.Count
          $totalTestSuites = $testCoverage.Count
          
          $moduleCoverage = if ($totalModules -gt 0) { [math]::Round(($testedModules / $totalModules) * 100, 1) } else { 100 }
          
          Write-Host "📊 Test Coverage Results:"
          Write-Host "  Module Test Coverage: $moduleCoverage% ($testedModules/$totalModules)"
          Write-Host "  Total Functions: $totalFunctions"
          Write-Host "  Total Test Suites: $totalTestSuites"
          Write-Host "  Test Files: $($testFiles.Count)"
          
          # Create detailed report
          $report = @{
            Summary = @{
              ModuleCoverage = $moduleCoverage
              TestedModules = $testedModules
              TotalModules = $totalModules
              TotalFunctions = $totalFunctions
              TotalTestSuites = $totalTestSuites
              TotalTestFiles = $testFiles.Count
            }
            ModuleResults = $moduleTestResults
            UntestedModules = $moduleTestResults | Where-Object { -not $_.HasTests }
            TestFiles = $testFiles | ForEach-Object { $_.Name }
            TestSuites = $testCoverage
            Timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
          }
          
          $report | ConvertTo-Json -Depth 4 | Set-Content "test-audit.json"
          
          echo "coverage=$moduleCoverage" >> $env:GITHUB_OUTPUT
          echo "missing-count=$(($moduleTestResults | Where-Object { -not $_.HasTests }).Count)" >> $env:GITHUB_OUTPUT

      - name: Upload test audit
        uses: actions/upload-artifact@v4
        with:
          name: test-audit
          path: test-audit.json
          retention-days: 90

  structure-audit:
    name: "Project Structure Audit"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.audit_type != 'documentation-only' && github.event.inputs.audit_type != 'test-only' && github.event.inputs.audit_type != 'dependencies-only'
    outputs:
      structure-score: ${{ steps.audit.outputs.score }}
      issues-found: ${{ steps.audit.outputs.issues }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Audit project structure
        id: audit
        run: |
          Write-Host "🏗️ Auditing project structure..."
          
          # Define expected project structure
          $expectedStructure = @(
            "Start-AitherZero.ps1",
            "aither-core/",
            "aither-core/aither-core.ps1",
            "aither-core/modules/",
            "aither-core/shared/",
            "configs/",
            "tests/",
            "build/",
            "scripts/",
            ".github/workflows/",
            "README.md",
            "VERSION"
          )
          
          $structureIssues = @()
          $structureScore = 100
          
          # Check for expected files/directories
          foreach ($item in $expectedStructure) {
            if (-not (Test-Path $item)) {
              $structureIssues += [PSCustomObject]@{
                Type = "Missing"
                Item = $item
                Severity = if ($item -in @("Start-AitherZero.ps1", "README.md", "VERSION")) { "High" } else { "Medium" }
                Description = "Expected file/directory not found"
              }
              $structureScore -= if ($item -in @("Start-AitherZero.ps1", "README.md", "VERSION")) { 10 } else { 5 }
            }
          }
          
          # Check for orphaned files
          $orphanedFiles = @()
          $rootFiles = Get-ChildItem -File | Where-Object { 
            $_.Name -notmatch '\.(md|txt|json|yml|yaml|gitignore)$' -and 
            $_.Name -ne "Start-AitherZero.ps1" -and
            $_.Name -ne "VERSION" -and
            $_.Name -ne "LICENSE"
          }
          
          foreach ($file in $rootFiles) {
            $orphanedFiles += $file.Name
            $structureIssues += [PSCustomObject]@{
              Type = "Orphaned"
              Item = $file.Name
              Severity = "Low"
              Description = "File in root directory should be organized"
            }
            $structureScore -= 2
          }
          
          # Check module structure
          $modules = Get-ChildItem "aither-core/modules" -Directory -ErrorAction SilentlyContinue
          foreach ($module in $modules) {
            $moduleName = $module.Name
            $expectedModuleFiles = @(
              "$moduleName.psd1",
              "$moduleName.psm1"
            )
            
            foreach ($expectedFile in $expectedModuleFiles) {
              $filePath = Join-Path $module.FullName $expectedFile
              if (-not (Test-Path $filePath)) {
                $structureIssues += [PSCustomObject]@{
                  Type = "Module"
                  Item = "modules/$moduleName/$expectedFile"
                  Severity = "Medium"
                  Description = "Module missing expected file"
                }
                $structureScore -= 3
              }
            }
          }
          
          # Check for consistent naming
          $namingIssues = @()
          $psFiles = Get-ChildItem -Include "*.ps1", "*.psm1", "*.psd1" -Recurse
          foreach ($file in $psFiles) {
            # Check for PascalCase in function files
            if ($file.Name -match '[a-z]+-[A-Z]' -or $file.Name -match '_') {
              $namingIssues += $file.Name
            }
          }
          
          if ($namingIssues.Count -gt 0) {
            $structureIssues += [PSCustomObject]@{
              Type = "Naming"
              Item = "Multiple files"
              Severity = "Low"
              Description = "$($namingIssues.Count) files with inconsistent naming"
            }
            $structureScore -= $namingIssues.Count
          }
          
          $structureScore = [math]::Max(0, $structureScore)
          
          Write-Host "📊 Structure Audit Results:"
          Write-Host "  Structure Score: $structureScore/100"
          Write-Host "  Issues Found: $($structureIssues.Count)"
          Write-Host "  Orphaned Files: $($orphanedFiles.Count)"
          Write-Host "  Naming Issues: $($namingIssues.Count)"
          
          if ($structureIssues.Count -gt 0) {
            Write-Host "`n⚠️ Structure Issues:"
            $structureIssues | Format-Table -AutoSize
          }
          
          # Create detailed report
          $report = @{
            Summary = @{
              Score = $structureScore
              TotalIssues = $structureIssues.Count
              OrphanedFiles = $orphanedFiles.Count
              NamingIssues = $namingIssues.Count
            }
            Issues = $structureIssues
            OrphanedFiles = $orphanedFiles
            NamingIssues = $namingIssues
            ExpectedStructure = $expectedStructure
            Timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
          }
          
          $report | ConvertTo-Json -Depth 4 | Set-Content "structure-audit.json"
          
          echo "score=$structureScore" >> $env:GITHUB_OUTPUT
          echo "issues=$($structureIssues.Count)" >> $env:GITHUB_OUTPUT

      - name: Upload structure audit
        uses: actions/upload-artifact@v4
        with:
          name: structure-audit
          path: structure-audit.json
          retention-days: 90

  dependency-audit:
    name: "Dependency Audit"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.audit_type != 'documentation-only' && github.event.inputs.audit_type != 'test-only' && github.event.inputs.audit_type != 'structure-only'
    outputs:
      dependency-issues: ${{ steps.audit.outputs.issues }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Audit dependencies
        id: audit
        run: |
          Write-Host "📦 Auditing dependencies..."
          
          $dependencyIssues = @()
          $allDependencies = @()
          
          # Analyze PowerShell module manifests
          $manifests = Get-ChildItem -Filter "*.psd1" -Recurse
          foreach ($manifest in $manifests) {
            try {
              $manifestData = Import-PowerShellDataFile $manifest.FullName
              
              if ($manifestData.RequiredModules) {
                foreach ($module in $manifestData.RequiredModules) {
                  $moduleName = if ($module -is [string]) { $module } else { $module.ModuleName }
                  $moduleVersion = if ($module -is [hashtable]) { $module.ModuleVersion } else { "Any" }
                  
                  $allDependencies += [PSCustomObject]@{
                    Manifest = $manifest.Name
                    Module = $moduleName
                    Version = $moduleVersion
                    Type = "Required"
                  }
                }
              }
              
              # Check PowerShell version requirement
              if ($manifestData.PowerShellVersion) {
                $psVersion = $manifestData.PowerShellVersion
                if ([version]$psVersion -lt [version]"7.0") {
                  $dependencyIssues += [PSCustomObject]@{
                    Type = "PowerShell Version"
                    Item = $manifest.Name
                    Issue = "PowerShell version $psVersion is below recommended 7.0+"
                    Severity = "Medium"
                  }
                }
              } else {
                $dependencyIssues += [PSCustomObject]@{
                  Type = "PowerShell Version"
                  Item = $manifest.Name
                  Issue = "No PowerShell version specified"
                  Severity = "Low"
                }
              }
              
            } catch {
              $dependencyIssues += [PSCustomObject]@{
                Type = "Manifest Error"
                Item = $manifest.Name
                Issue = "Could not parse manifest: $($_.Exception.Message)"
                Severity = "High"
              }
            }
          }
          
          # Check for duplicate dependencies
          $duplicates = $allDependencies | Group-Object Module | Where-Object { $_.Count -gt 1 }
          foreach ($duplicate in $duplicates) {
            $versions = $duplicate.Group | Select-Object -ExpandProperty Version | Sort-Object -Unique
            if ($versions.Count -gt 1) {
              $dependencyIssues += [PSCustomObject]@{
                Type = "Version Conflict"
                Item = $duplicate.Name
                Issue = "Module required with different versions: $($versions -join ', ')"
                Severity = "High"
              }
            }
          }
          
          # Check for external module usage in scripts
          $psFiles = Get-ChildItem -Include "*.ps1", "*.psm1" -Recurse | Where-Object { $_.FullName -notlike "*test*" }
          $usedModules = @()
          
          foreach ($file in $psFiles) {
            $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
            if (-not $content) { continue }
            
            # Find Import-Module calls
            $imports = [regex]::Matches($content, 'Import-Module\s+(?:["\']?)([^"\'\s\-]+)', [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
            foreach ($import in $imports) {
              $moduleName = $import.Groups[1].Value
              if ($moduleName -notin $usedModules) {
                $usedModules += $moduleName
              }
            }
          }
          
          # Check for undeclared dependencies
          $declaredModules = $allDependencies | Select-Object -ExpandProperty Module -Unique
          $undeclaredModules = $usedModules | Where-Object { $_ -notin $declaredModules -and $_ -notin @("Microsoft.PowerShell.Management", "Microsoft.PowerShell.Utility") }
          
          foreach ($undeclared in $undeclaredModules) {
            $dependencyIssues += [PSCustomObject]@{
              Type = "Undeclared Dependency"
              Item = $undeclared
              Issue = "Module used but not declared in manifest"
              Severity = "Medium"
            }
          }
          
          Write-Host "📊 Dependency Audit Results:"
          Write-Host "  Total Dependencies: $($allDependencies.Count)"
          Write-Host "  Unique Modules: $($declaredModules.Count)"
          Write-Host "  Used Modules: $($usedModules.Count)"
          Write-Host "  Issues Found: $($dependencyIssues.Count)"
          
          if ($dependencyIssues.Count -gt 0) {
            Write-Host "`n⚠️ Dependency Issues:"
            $dependencyIssues | Format-Table -AutoSize
          }
          
          # Create detailed report
          $report = @{
            Summary = @{
              TotalDependencies = $allDependencies.Count
              UniqueModules = $declaredModules.Count
              UsedModules = $usedModules.Count
              IssuesFound = $dependencyIssues.Count
            }
            Dependencies = $allDependencies
            Issues = $dependencyIssues
            UsedModules = $usedModules
            UndeclaredModules = $undeclaredModules
            Timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
          }
          
          $report | ConvertTo-Json -Depth 4 | Set-Content "dependency-audit.json"
          
          echo "issues=$($dependencyIssues.Count)" >> $env:GITHUB_OUTPUT

      - name: Upload dependency audit
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit
          path: dependency-audit.json
          retention-days: 90

  create-issues:
    name: "Create GitHub Issues"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [documentation-audit, test-audit, structure-audit, dependency-audit]
    if: always() && !cancelled() && github.event.inputs.create_issues == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all audit results
        uses: actions/download-artifact@v4
        with:
          path: audit-results/

      - name: Create issues for findings
        run: |
          Write-Host "📋 Creating GitHub issues for audit findings..."
          
          $severityThreshold = "${{ github.event.inputs.severity_threshold }}"
          $severityOrder = @{ 'low' = 1; 'medium' = 2; 'high' = 3; 'critical' = 4 }
          $minSeverity = $severityOrder[$severityThreshold]
          
          $issuesCreated = 0
          
          # Process each audit type
          $auditFiles = Get-ChildItem "audit-results" -Filter "*.json" -Recurse
          foreach ($auditFile in $auditFiles) {
            $auditData = Get-Content $auditFile.FullName | ConvertFrom-Json
            $auditType = $auditFile.Name -replace "-audit\.json$", ""
            
            if ($auditData.Issues) {
              foreach ($issue in $auditData.Issues) {
                $issueSeverity = $severityOrder[$issue.Severity.ToLower()]
                
                if ($issueSeverity -ge $minSeverity) {
                  $issueTitle = "[$auditType] $($issue.Type): $($issue.Item)"
                  $issueBody = "## Audit Finding`n`n"
                  $issueBody += "Type: $($issue.Type)`n"
                  $issueBody += "Severity: $($issue.Severity)`n"
                  $issueBody += "Component: $($issue.Item)`n`n"
                  $issueBody += "### Description`n"
                  $issueBody += "$($issue.Description)`n`n"
                  $issueBody += "### Audit Details`n"
                  $issueBody += "- Audit Type: $auditType`n"
                  $issueBody += "- Detected: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')`n"
                  $issueBody += "- Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`n`n"
                  $issueBody += "### Recommended Actions`n"
                  
                  switch ($issue.Type) {
                    "Missing" { $issueBody += "`n- Create the missing file or directory`n- Follow project structure guidelines" }
                    "Documentation" { $issueBody += "`n- Add comprehensive documentation`n- Include usage examples" }
                    "Testing" { $issueBody += "`n- Create test cases for the module`n- Ensure adequate test coverage" }
                    "Dependency" { $issueBody += "`n- Review and update module dependencies`n- Ensure version compatibility" }
                    default { $issueBody += "`n- Review the finding and take appropriate action" }
                  }
                  
                  $issueBody += "`n`n---`n"
                  $issueBody += "This issue was automatically created by the AitherZero Audit workflow."
                  
                  # Create issue using GitHub CLI
                  $labels = @("audit", $auditType, $issue.Severity.ToLower())
                  $labelString = $labels -join ","
                  
                  try {
                    gh issue create --title $issueTitle --body $issueBody --label $labelString
                    $issuesCreated++
                    Write-Host "✅ Created issue: $issueTitle"
                  } catch {
                    Write-Host "❌ Failed to create issue: $issueTitle - $($_.Exception.Message)"
                  }
                }
              }
            }
          }
          
          Write-Host "📋 Created $issuesCreated GitHub issues for audit findings"

  generate-report:
    name: "Generate Audit Report"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [documentation-audit, test-audit, structure-audit, dependency-audit]
    if: always() && !cancelled()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all audit results
        uses: actions/download-artifact@v4
        with:
          path: audit-results/

      - name: Generate comprehensive audit report
        run: |
          Write-Host "📊 Generating comprehensive audit report..."
          
          $report = "# 🔍 AitherZero Comprehensive Audit Report`n`n"
          $report += "Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')`n"
          $report += "Audit Type: ${{ github.event.inputs.audit_type || 'comprehensive' }}`n"
          $report += "Workflow Run: ${{ github.run_id }}`n"
          $report += "Branch: ${{ github.ref_name }}`n"
          $report += "Triggered By: ${{ github.actor }}`n`n"
          $report += "## 📊 Overall Scores`n`n"
          $report += "| Audit Type | Score/Coverage | Status |`n"
          $report += "|------------|----------------|--------|`n"
          $report += "| Documentation | ${{ needs.documentation-audit.outputs.doc-coverage || 'N/A' }}% | ${{ needs.documentation-audit.result }} |`n"
          $report += "| Test Coverage | ${{ needs.test-audit.outputs.test-coverage || 'N/A' }}% | ${{ needs.test-audit.result }} |`n"
          $report += "| Project Structure | ${{ needs.structure-audit.outputs.structure-score || 'N/A' }}/100 | ${{ needs.structure-audit.result }} |`n"
          $report += "| Dependencies | ${{ needs.dependency-audit.outputs.dependency-issues || 'N/A' }} issues | ${{ needs.dependency-audit.result }} |`n`n"
          $report += "## 🎯 Quality Targets`n`n"
          $report += "### Documentation`n"
          $report += "- Target: 80% coverage`n"
          $report += "- Current: ${{ needs.documentation-audit.outputs.doc-coverage || 'N/A' }}%`n"
          $report += "- Status: ${{ needs.documentation-audit.outputs.doc-coverage >= 80 ? '✅ Met' : '❌ Below Target' }}`n`n"
          $report += "### Testing`n"
          $report += "- Target: 90% module coverage`n"
          $report += "- Current: ${{ needs.test-audit.outputs.test-coverage || 'N/A' }}%`n"
          $report += "- Status: ${{ needs.test-audit.outputs.test-coverage >= 90 ? '✅ Met' : '❌ Below Target' }}`n`n"
          $report += "### Structure`n"
          $report += "- Target: 85/100 score`n"
          $report += "- Current: ${{ needs.structure-audit.outputs.structure-score || 'N/A' }}/100`n"
          $report += "- Status: ${{ needs.structure-audit.outputs.structure-score >= 85 ? '✅ Met' : '❌ Below Target' }}`n`n"
          $report += "## 📋 Action Items`n`n"
          $report += "### High Priority`n"

          # Add specific recommendations based on results
          if ([int]"${{ needs.documentation-audit.outputs.missing-docs || 0 }}" -gt 0) {
            $report += "`n- 📚 Address ${{ needs.documentation-audit.outputs.missing-docs }} missing documentation items"
          }
          
          if ([int]"${{ needs.test-audit.outputs.missing-tests || 0 }}" -gt 0) {
            $report += "`n- 🧪 Add tests for ${{ needs.test-audit.outputs.missing-tests }} untested modules"
          }
          
          if ([int]"${{ needs.structure-audit.outputs.issues-found || 0 }}" -gt 0) {
            $report += "`n- 🏗️ Fix ${{ needs.structure-audit.outputs.issues-found }} project structure issues"
          }
          
          if ([int]"${{ needs.dependency-audit.outputs.dependency-issues || 0 }}" -gt 0) {
            $report += "`n- 📦 Resolve ${{ needs.dependency-audit.outputs.dependency-issues }} dependency issues"
          }

          $report += "`n`n### Recommendations`n"
          $report += "1. Documentation: Ensure all modules have README files and functions have help documentation`n"
          $report += "2. Testing: Implement comprehensive test suites for all modules`n"
          $report += "3. Structure: Follow consistent project organization and naming conventions`n"
          $report += "4. Dependencies: Keep module dependencies up to date and properly declared`n`n"
          $report += "## 📈 Trend Analysis`n"
          $report += "Note: Historical trend analysis requires multiple audit runs`n`n"
          $report += "## 🔧 Automated Actions`n"
          $report += "- Issues Created: ${{ github.event.inputs.create_issues == 'true' ? 'Yes' : 'No' }}`n"
          $report += "- Severity Threshold: ${{ github.event.inputs.severity_threshold || 'medium' }}`n`n"
          $report += "---`n"
          $report += "Report generated by AitherZero Audit workflow"

          $report | Set-Content "comprehensive-audit-report.md"
          Write-Host $report

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-audit-report
          path: comprehensive-audit-report.md
          retention-days: 90

      - name: Audit summary
        run: |
          Write-Host "📊 Comprehensive Audit Summary"
          Write-Host "=============================="
          Write-Host "Documentation: ${{ needs.documentation-audit.result }} (${{ needs.documentation-audit.outputs.doc-coverage }}%)"
          Write-Host "Test Coverage: ${{ needs.test-audit.result }} (${{ needs.test-audit.outputs.test-coverage }}%)"
          Write-Host "Structure: ${{ needs.structure-audit.result }} (${{ needs.structure-audit.outputs.structure-score }}/100)"
          Write-Host "Dependencies: ${{ needs.dependency-audit.result }} (${{ needs.dependency-audit.outputs.dependency-issues }} issues)"
          
          $hasFailures = @("${{ needs.documentation-audit.result }}", "${{ needs.test-audit.result }}", "${{ needs.structure-audit.result }}", "${{ needs.dependency-audit.result }}") -contains "failure"
          
          if ($hasFailures) {
            Write-Host "::warning::Some audit checks failed - review results above"
          } else {
            Write-Host "::notice::All audit checks completed successfully"
          }