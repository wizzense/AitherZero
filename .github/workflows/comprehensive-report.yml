name: Comprehensive Auditing & Reporting

on:
  schedule:
    # Run daily at 6 AM UTC (comprehensive report)
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Type of report to generate'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - health-check
          - feature-map
          - version-test
      version_test:
        description: 'Version to test (for version-test type)'
        required: false
        type: string
      include_detailed_analysis:
        description: 'Include detailed analysis and drill-downs'
        required: false
        default: true
        type: boolean
      generate_html:
        description: 'Generate HTML reports'
        required: false
        default: true
        type: boolean
      create_github_release:
        description: 'Create GitHub release (for version-test)'
        required: false
        default: false
        type: boolean

# Ensure only one comprehensive report runs at a time
concurrency:
  group: comprehensive-report
  cancel-in-progress: false

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: true

jobs:
  # Initialize reporting state and determine scope
  initialize-reporting:
    name: Initialize Comprehensive Reporting
    runs-on: ubuntu-latest
    outputs:
      report-scope: ${{ steps.scope.outputs.scope }}
      version-number: ${{ steps.version.outputs.version }}
      baseline-hash: ${{ steps.baseline.outputs.hash }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine report scope
      id: scope
      shell: pwsh
      run: |
        $reportType = '${{ github.event.inputs.report_type || "comprehensive" }}'
        
        $scope = @{
          comprehensive = $reportType -eq 'comprehensive'
          healthCheck = $reportType -in @('comprehensive', 'health-check')
          featureMap = $reportType -in @('comprehensive', 'feature-map')
          versionTest = $reportType -eq 'version-test'
          detailedAnalysis = '${{ github.event.inputs.include_detailed_analysis }}' -eq 'true'
          generateHtml = '${{ github.event.inputs.generate_html }}' -eq 'true'
          createRelease = '${{ github.event.inputs.create_github_release }}' -eq 'true'
        }
        
        Write-Host "üìä Report Scope Configuration:" -ForegroundColor Cyan
        $scope.GetEnumerator() | ForEach-Object {
          Write-Host "  $($_.Key): $($_.Value)" -ForegroundColor White
        }
        
        $scopeJson = $scope | ConvertTo-Json -Compress
        echo "scope=$scopeJson" >> $env:GITHUB_OUTPUT
        
    - name: Get version information
      id: version
      shell: pwsh
      run: |
        # Try multiple sources for version
        $version = '${{ github.event.inputs.version_test }}'
        
        if (-not $version) {
          # Try VERSION file
          if (Test-Path "VERSION") {
            $version = (Get-Content "VERSION" -Raw).Trim()
          }
        }
        
        if (-not $version) {
          # Try git tag
          try {
            $version = git describe --tags --abbrev=0 2>$null
          } catch {
            $version = "0.8.0-dev"
          }
        }
        
        Write-Host "üì¶ Version detected: $version" -ForegroundColor Green
        echo "version=$version" >> $env:GITHUB_OUTPUT
        
    - name: Create baseline hash
      id: baseline
      shell: pwsh
      run: |
        # Create hash of current state for change detection
        $files = @(
          'aither-core/**/*.ps1',
          'aither-core/**/*.psm1', 
          'aither-core/**/*.psd1',
          'configs/**/*.json',
          'tests/**/*.ps1'
        )
        
        $hashInput = ""
        foreach ($pattern in $files) {
          Get-ChildItem -Path $pattern -Recurse -ErrorAction SilentlyContinue | 
            ForEach-Object { $hashInput += $_.LastWriteTime.Ticks }
        }
        
        $hash = [System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes($hashInput))
        $hashString = [System.BitConverter]::ToString($hash) -replace '-', ''
        $shortHash = $hashString.Substring(0, 8)
        
        Write-Host "üîç Baseline hash: $shortHash" -ForegroundColor Gray
        echo "hash=$shortHash" >> $env:GITHUB_OUTPUT

  # Run existing audit workflows in parallel
  run-audits:
    name: Execute All Audits
    runs-on: ubuntu-latest
    needs: initialize-reporting
    if: fromJson(needs.initialize-reporting.outputs.report-scope).comprehensive || fromJson(needs.initialize-reporting.outputs.report-scope).healthCheck
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run documentation audit
      shell: pwsh
      run: |
        Write-Host "üìù Running documentation audit..." -ForegroundColor Cyan
        
        # Create audit artifacts directory
        New-Item -Path "./audit-reports/documentation-audit-reports" -ItemType Directory -Force
        
        # Run documentation analysis if scripts exist
        if (Test-Path "./scripts/documentation/Analyze-ContentDeltas.ps1") {
          ./scripts/documentation/Analyze-ContentDeltas.ps1 -ExportChanges
          if (Test-Path "change-analysis.json") {
            Move-Item "change-analysis.json" "./audit-reports/documentation-audit-reports/"
          }
        }
        
        Write-Host "‚úÖ Documentation audit completed" -ForegroundColor Green
        
    - name: Run testing audit  
      shell: pwsh
      run: |
        Write-Host "üß™ Running testing audit..." -ForegroundColor Cyan
        
        # Create testing audit directory
        New-Item -Path "./audit-reports/testing-audit-reports" -ItemType Directory -Force
        
        # Run test coverage analysis if scripts exist
        if (Test-Path "./scripts/testing/Audit-TestCoverage.ps1") {
          ./scripts/testing/Audit-TestCoverage.ps1 -GenerateHTML
          if (Test-Path "test-audit-report.json") {
            Move-Item "test-audit-report.json" "./audit-reports/testing-audit-reports/"
          }
          if (Test-Path "test-audit-report.html") {
            Move-Item "test-audit-report.html" "./audit-reports/testing-audit-reports/"
          }
        }
        
        # Run basic test suite
        ./tests/Run-Tests.ps1 -CI
        
        Write-Host "‚úÖ Testing audit completed" -ForegroundColor Green
        
    - name: Run security analysis
      shell: pwsh
      run: |
        Write-Host "üîí Running security analysis..." -ForegroundColor Cyan
        
        # Create security audit directory
        New-Item -Path "./audit-reports/security-scan-results" -ItemType Directory -Force
        
        # Install PSScriptAnalyzer for security analysis
        if (!(Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
          Install-Module -Name PSScriptAnalyzer -Force -AllowClobber -Scope CurrentUser
        }
        
        # Run PSScriptAnalyzer security rules
        $securityRules = @('PSAvoidUsingPlainTextForPassword', 'PSAvoidUsingUsernameAndPasswordParams', 'PSAvoidUsingConvertToSecureStringWithPlainText')
        $results = Invoke-ScriptAnalyzer -Path "./aither-core" -Recurse -IncludeRule $securityRules
        
        if ($results) {
          $results | ConvertTo-Json -Depth 5 | Set-Content "./audit-reports/security-scan-results/security-analysis.json"
        }
        
        Write-Host "‚úÖ Security analysis completed" -ForegroundColor Green
        
    - name: Upload audit artifacts
      uses: actions/upload-artifact@v4
      with:
        name: audit-results
        path: |
          audit-reports/**/*
          tests/results/**/*
        retention-days: 30

  # Generate dynamic feature map
  generate-feature-map:
    name: Generate Dynamic Feature Map
    runs-on: ubuntu-latest
    needs: initialize-reporting
    if: fromJson(needs.initialize-reporting.outputs.report-scope).featureMap
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate feature map
      shell: pwsh
      run: |
        Write-Host "üó∫Ô∏è Generating dynamic feature map..." -ForegroundColor Cyan
        
        $params = @{
          OutputPath = './feature-map.json'
          HtmlOutput = $true
          IncludeDependencyGraph = $true
          AnalyzeIntegrations = $true
          VerboseOutput = $true
        }
        
        ./scripts/reporting/Generate-DynamicFeatureMap.ps1 @params
        
        Write-Host "‚úÖ Feature map generation completed" -ForegroundColor Green
        
    - name: Upload feature map artifacts
      uses: actions/upload-artifact@v4
      with:
        name: feature-map
        path: |
          feature-map.json
          feature-map.html
        retention-days: 90

  # Generate comprehensive HTML report
  generate-comprehensive-report:
    name: Generate Comprehensive Report
    runs-on: ubuntu-latest
    needs: [initialize-reporting, run-audits, generate-feature-map]
    if: always() && fromJson(needs.initialize-reporting.outputs.report-scope).generateHtml
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download audit results
      uses: actions/download-artifact@v4
      with:
        name: audit-results
        path: audit-reports
        
    - name: Download feature map
      uses: actions/download-artifact@v4
      with:
        name: feature-map
        path: feature-map
        
    - name: Generate comprehensive report
      shell: pwsh
      run: |
        Write-Host "üìä Generating comprehensive HTML report..." -ForegroundColor Cyan
        
        $reportTitle = "AitherZero v${{ needs.initialize-reporting.outputs.version-number }} Comprehensive Report"
        
        $params = @{
          ReportPath = './aitherZero-comprehensive-report.html'
          ArtifactsPath = './audit-reports'
          IncludeDetailedAnalysis = ${{ fromJson(needs.initialize-reporting.outputs.report-scope).detailedAnalysis }}
          ReportTitle = $reportTitle
          Version = '${{ needs.initialize-reporting.outputs.version-number }}'
          VerboseOutput = $true
        }
        
        $result = ./scripts/reporting/Generate-ComprehensiveReport.ps1 @params
        
        Write-Host "üìã Report Summary:" -ForegroundColor Cyan
        Write-Host "  Report Path: $($result.ReportPath)" -ForegroundColor White
        Write-Host "  Version: $($result.Version)" -ForegroundColor White
        Write-Host "  Overall Health: $($result.OverallHealth.Grade) ($($result.OverallHealth.OverallScore)%)" -ForegroundColor White
        Write-Host "  Total Modules: $($result.FeatureMap.TotalModules)" -ForegroundColor White
        Write-Host "  Analyzed Modules: $($result.FeatureMap.AnalyzedModules)" -ForegroundColor White
        
        # Set outputs for summary
        echo "HEALTH_GRADE=$($result.OverallHealth.Grade)" >> $env:GITHUB_ENV
        echo "HEALTH_SCORE=$($result.OverallHealth.OverallScore)" >> $env:GITHUB_ENV
        echo "TOTAL_MODULES=$($result.FeatureMap.TotalModules)" >> $env:GITHUB_ENV
        echo "ANALYZED_MODULES=$($result.FeatureMap.AnalyzedModules)" >> $env:GITHUB_ENV
        
        Write-Host "‚úÖ Comprehensive report generation completed" -ForegroundColor Green

    - name: Create report summary
      shell: pwsh
      run: |
        Write-Host "üìÑ Creating report summary..." -ForegroundColor Cyan
        
        $summary = @{
          version = '${{ needs.initialize-reporting.outputs.version-number }}'
          timestamp = (Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')
          baselineHash = '${{ needs.initialize-reporting.outputs.baseline-hash }}'
          healthGrade = $env:HEALTH_GRADE
          healthScore = $env:HEALTH_SCORE
          totalModules = $env:TOTAL_MODULES
          analyzedModules = $env:ANALYZED_MODULES
          reportType = '${{ github.event.inputs.report_type || "comprehensive" }}'
          gitSha = '${{ github.sha }}'
          gitRef = '${{ github.ref }}'
          workflowUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        }
        
        $summary | ConvertTo-Json -Depth 5 | Set-Content -Path './report-summary.json'
        
        # Create GitHub summary
        $markdownSummary = @"
## üìä AitherZero Comprehensive Report Summary

### üéØ Overall Health
- **Grade**: $($summary.healthGrade)
- **Score**: $($summary.healthScore)%
- **Version**: $($summary.version)

### üì¶ Module Analysis
- **Total Modules**: $($summary.totalModules)
- **Analyzed Successfully**: $($summary.analyzedModules)
- **Analysis Coverage**: $(if ($summary.totalModules -gt 0) { [math]::Round(($summary.analyzedModules / $summary.totalModules) * 100, 1) } else { 0 })%

### üìÖ Report Details
- **Generated**: $($summary.timestamp)
- **Report Type**: $($summary.reportType)
- **Baseline Hash**: $($summary.baselineHash)

### üìã Actions
- üìÑ Download the comprehensive HTML report from artifacts
- üó∫Ô∏è Review the dynamic feature map for module relationships
- üîç Check individual audit results for detailed findings

[View Full Workflow Run]($($summary.workflowUrl))
"@
        
        echo $markdownSummary >> $env:GITHUB_STEP_SUMMARY
        
    - name: Upload comprehensive report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-report
        path: |
          aitherZero-comprehensive-report.html
          report-summary.json
        retention-days: 90

  # Version-specific testing
  version-testing:
    name: Version-Specific Testing
    runs-on: ubuntu-latest
    needs: initialize-reporting
    if: fromJson(needs.initialize-reporting.outputs.report-scope).versionTest
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run comprehensive testing
      shell: pwsh
      run: |
        Write-Host "üß™ Running version-specific testing for v${{ needs.initialize-reporting.outputs.version-number }}..." -ForegroundColor Cyan
        
        # Run all test suites
        ./tests/Run-Tests.ps1 -All -CI
        
        # Run installation tests
        ./tests/Run-Tests.ps1 -Setup -CI
        
        # Performance benchmarking
        Measure-Command { ./Start-AitherZero.ps1 -WhatIf -NonInteractive } | Out-Host
        
        Write-Host "‚úÖ Version testing completed for ${{ matrix.os }}" -ForegroundColor Green
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: version-test-results-${{ matrix.os }}
        path: |
          tests/results/**/*
        retention-days: 30

  # Create GitHub release if requested
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [initialize-reporting, generate-comprehensive-report, version-testing]
    if: fromJson(needs.initialize-reporting.outputs.report-scope).createRelease && needs.version-testing.result == 'success'
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download comprehensive report
      uses: actions/download-artifact@v4
      with:
        name: comprehensive-report
        
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.initialize-reporting.outputs.version-number }}
        release_name: AitherZero v${{ needs.initialize-reporting.outputs.version-number }}
        body: |
          ## üöÄ AitherZero v${{ needs.initialize-reporting.outputs.version-number }}
          
          ### üìä Release Health Score
          - **Overall Grade**: ${{ env.HEALTH_GRADE }}
          - **Health Score**: ${{ env.HEALTH_SCORE }}%
          - **Module Coverage**: ${{ env.ANALYZED_MODULES }}/${{ env.TOTAL_MODULES }}
          
          ### üìã Release Validation
          - ‚úÖ Comprehensive testing passed on all platforms
          - ‚úÖ Security scans passed
          - ‚úÖ Code quality checks passed
          - ‚úÖ Documentation coverage validated
          
          ### üìÑ Reports
          - Download the comprehensive HTML report for detailed analysis
          - Review the dynamic feature map for module relationships
          
          ### üîó Links
          - [Full Report Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/CLAUDE.md)
          
          ---
          ü§ñ This release was validated and created automatically by the AitherZero CI/CD system.
        draft: false
        prerelease: false
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./aitherZero-comprehensive-report.html
        asset_name: aitherZero-comprehensive-report-v${{ needs.initialize-reporting.outputs.version-number }}.html
        asset_content_type: text/html

  # Final summary and notifications
  report-summary:
    name: Report Summary & Notifications
    runs-on: ubuntu-latest
    needs: [initialize-reporting, run-audits, generate-feature-map, generate-comprehensive-report, version-testing, create-release]
    if: always()
    
    steps:
    - name: Generate final summary
      shell: pwsh
      run: |
        Write-Host "üìã Final Comprehensive Report Summary" -ForegroundColor Cyan
        Write-Host "====================================" -ForegroundColor Cyan
        
        $results = @{
          'Initialize Reporting' = '${{ needs.initialize-reporting.result }}'
          'Run Audits' = '${{ needs.run-audits.result }}'
          'Generate Feature Map' = '${{ needs.generate-feature-map.result }}'
          'Generate Report' = '${{ needs.generate-comprehensive-report.result }}'
          'Version Testing' = '${{ needs.version-testing.result }}'
          'Create Release' = '${{ needs.create-release.result }}'
        }
        
        $success = 0
        $failed = 0
        $skipped = 0
        
        foreach ($job in $results.GetEnumerator()) {
          $emoji = switch ($job.Value) {
            'success' { '‚úÖ'; $success++ }
            'failure' { '‚ùå'; $failed++ }
            'cancelled' { '‚ö†Ô∏è'; $failed++ }
            'skipped' { '‚è≠Ô∏è'; $skipped++ }
            default { '‚ùì' }
          }
          Write-Host "$emoji $($job.Key): $($job.Value)"
        }
        
        Write-Host "`nüìä Summary Statistics:" -ForegroundColor Cyan
        Write-Host "  ‚úÖ Successful: $success"
        Write-Host "  ‚ùå Failed: $failed" 
        Write-Host "  ‚è≠Ô∏è Skipped: $skipped"
        
        if ($failed -eq 0) {
          Write-Host "`nüéâ All comprehensive reporting completed successfully!" -ForegroundColor Green
        } else {
          Write-Host "`n‚ö†Ô∏è Some jobs failed - please review the workflow" -ForegroundColor Yellow
        }
        
        # Set workflow status
        echo "WORKFLOW_SUCCESS=$(if ($failed -eq 0) { 'true' } else { 'false' })" >> $env:GITHUB_ENV
        
    - name: Create workflow summary
      shell: pwsh
      run: |
        $isSuccess = $env:WORKFLOW_SUCCESS -eq 'true'
        $emoji = if ($isSuccess) { 'üéâ' } else { '‚ö†Ô∏è' }
        $status = if ($isSuccess) { 'SUCCESS' } else { 'PARTIAL SUCCESS' }
        
        $workflowSummary = @"
# $emoji AitherZero Comprehensive Report - $status

## üìä Report Overview
- **Version**: v${{ needs.initialize-reporting.outputs.version-number }}
- **Report Type**: ${{ github.event.inputs.report_type || 'comprehensive' }}
- **Generated**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
- **Workflow**: [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

## üìÑ Available Downloads
- üìä **Comprehensive HTML Report** - Complete analysis with interactive dashboard
- üó∫Ô∏è **Dynamic Feature Map** - Module relationships and capabilities  
- üìã **Audit Results** - Detailed findings from all audit systems
- üß™ **Test Results** - Cross-platform testing validation

## üéØ Next Steps
1. Download and review the comprehensive HTML report
2. Check the dynamic feature map for module insights
3. Address any issues identified in the audit results
4. Use the reports for release planning and documentation

---
*Generated by AitherZero Comprehensive Reporting System v1.0*
"@
        
        echo $workflowSummary >> $env:GITHUB_STEP_SUMMARY