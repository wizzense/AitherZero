---
name: "Release"

"on":
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
        type: string
      description:
        description: 'Release description'
        required: false
        type: string
        default: 'Release notes for this version'
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: true

defaults:
  run:
    shell: pwsh

jobs:
  validate-inputs:
    name: "Validate Release Inputs"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.validate.outputs.version }}
      tag: ${{ steps.validate.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate version and inputs
        id: validate
        run: |
          $version = "${{ github.event.inputs.version }}"

          # Validate semantic version format
          if ($version -notmatch '^\d+\.\d+\.\d+(-[a-zA-Z0-9\-\.]+)?$') {
            Write-Host "::error::Invalid version format. Use semantic versioning (e.g., 1.2.3 or 1.2.3-beta.1)"
            exit 1
          }

          $tag = "v$version"

          # Check if tag already exists
          $existingTags = git tag -l $tag
          if ($existingTags) {
            Write-Host "::error::Tag $tag already exists"
            exit 1
          }

          # Validate we're on main branch for non-prerelease
          $currentBranch = git branch --show-current
          if ($currentBranch -ne "main" -and "${{ github.event.inputs.prerelease }}" -eq "false") {
            Write-Host "::error::Production releases must be created from main branch. Current: $currentBranch"
            exit 1
          }

          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "tag=$tag" >> $env:GITHUB_OUTPUT

          Write-Host "‚úÖ Version validation passed"
          Write-Host "Version: $version"
          Write-Host "Tag: $tag"
          Write-Host "Branch: $currentBranch"

  update-version:
    name: "Update Version File"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: validate-inputs
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update VERSION file
        run: |
          $version = "${{ needs.validate-inputs.outputs.version }}"

          # Update VERSION file
          $version | Set-Content "VERSION"

          # Verify the update
          $updatedVersion = Get-Content "VERSION" -Raw | ForEach-Object { $_.Trim() }
          if ($updatedVersion -ne $version) {
            Write-Host "::error::Failed to update VERSION file"
            exit 1
          }

          Write-Host "‚úÖ VERSION file updated to: $updatedVersion"

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add VERSION
          git commit -m "Release: Update version to ${{ needs.validate-inputs.outputs.version }}"
          git push

  run-tests:
    name: "Pre-Release Testing"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-inputs, update-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Install test dependencies
        run: |
          Install-Module -Name Pester -MinimumVersion 5.0.0 -Force -Scope CurrentUser -SkipPublisherCheck

      - name: Run comprehensive tests
        run: |
          # Run full test suite for release validation
          ./tests/Run-UnifiedTests.ps1 -TestSuite All -CI -OutputFormat All -GenerateDashboard

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-test-results
          path: tests/results/
          retention-days: 90

  generate-comprehensive-report:
    name: "Generate Comprehensive Report"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-inputs, update-version, run-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Install report dependencies
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck
          Install-Module -Name Pester -MinimumVersion 5.0.0 -Force -Scope CurrentUser -SkipPublisherCheck

      - name: Generate comprehensive report
        run: |
          # Generate comprehensive HTML report and feature map
          ./scripts/reporting/Generate-ComprehensiveReport.ps1 -Version "${{ needs.validate-inputs.outputs.version }}" -IncludeDetailedAnalysis -ReportTitle "AitherZero v${{ needs.validate-inputs.outputs.version }} Release Report"
          
          # Generate dynamic feature map
          ./scripts/reporting/Generate-DynamicFeatureMap.ps1 -HtmlOutput -IncludeDependencyGraph

      - name: Prepare dashboard artifact
        run: |
          # Create a combined dashboard package
          $dashboardDir = "release-dashboard"
          New-Item -ItemType Directory -Path $dashboardDir -Force
          
          # Copy all report files
          Copy-Item "./reports/*.html" -Destination $dashboardDir -Force
          Copy-Item "./reports/*.json" -Destination $dashboardDir -Force
          Copy-Item "./reports/*.md" -Destination $dashboardDir -Force -ErrorAction SilentlyContinue
          
          # Copy test results dashboard
          if (Test-Path "./tests/results/test-dashboard.html") {
            Copy-Item "./tests/results/test-dashboard.html" -Destination "$dashboardDir/test-dashboard.html" -Force
          }
          
          # Create dashboard index
          @"
          <!DOCTYPE html>
          <html>
          <head>
              <title>AitherZero v${{ needs.validate-inputs.outputs.version }} Release Dashboard</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  h1 { color: #333; }
                  .dashboard-links { list-style-type: none; padding: 0; }
                  .dashboard-links li { margin: 10px 0; }
                  .dashboard-links a { color: #0066cc; text-decoration: none; font-size: 18px; }
                  .dashboard-links a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <h1>AitherZero v${{ needs.validate-inputs.outputs.version }} Release Dashboard</h1>
              <ul class="dashboard-links">
                  <li><a href="comprehensive-report.html">üìä Comprehensive Project Report</a></li>
                  <li><a href="dynamic-feature-map.html">üó∫Ô∏è Dynamic Feature Map</a></li>
                  <li><a href="test-dashboard.html">üß™ Test Results Dashboard</a></li>
                  <li><a href="executive-summary.md">üìã Executive Summary</a></li>
              </ul>
          </body>
          </html>
"@ | Set-Content "$dashboardDir/index.html"
          
          # Create dashboard package
          Compress-Archive -Path $dashboardDir/* -DestinationPath "AitherZero-v${{ needs.validate-inputs.outputs.version }}-dashboard.zip" -Force
          
          Write-Host "‚úÖ Dashboard package created"

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-report
          path: |
            reports/
            release-dashboard/
            AitherZero-v${{ needs.validate-inputs.outputs.version }}-dashboard.zip
          retention-days: 90

  build-packages:
    name: "Build Release Packages"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-inputs, update-version]
    strategy:
      fail-fast: false
      matrix:
        platform: [windows, linux, macos]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Build package for ${{ matrix.platform }}
        run: |
          ./build/Build-Package.ps1 -Platform ${{ matrix.platform }} -Version "${{ needs.validate-inputs.outputs.version }}"

      - name: Verify package
        run: |
          $packageDir = "build/output"
          $packages = Get-ChildItem $packageDir -File | Where-Object { $_.Name -like "*${{ matrix.platform }}*" }

          if ($packages.Count -eq 0) {
            Write-Host "::error::No package found for ${{ matrix.platform }}"
            exit 1
          }

          foreach ($package in $packages) {
            Write-Host "‚úÖ Package created: $($package.Name) ($([math]::Round($package.Length / 1MB, 2)) MB)"
          }

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.platform }}
          path: build/output/
          retention-days: 90

  generate-release-notes:
    name: "Generate Release Notes"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: validate-inputs
    outputs:
      release-notes: ${{ steps.notes.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate release notes
        id: notes
        run: |
          $version = "${{ needs.validate-inputs.outputs.version }}"
          $description = "${{ github.event.inputs.description }}"
          $date = Get-Date -Format "yyyy-MM-dd"

          # Get recent commits since last tag
          $lastTag = git describe --tags --abbrev=0 2>$null
          $commits = if ($lastTag) {
            git log --oneline "$lastTag..HEAD" --no-merges
          } else {
            git log --oneline -10 --no-merges
          }

          # Build release notes content
          $releaseNotesContent = "# AitherZero $version`n`n"
          $releaseNotesContent += "Released on $date`n`n"
          $releaseNotesContent += "## Description`n"
          $releaseNotesContent += "$description`n`n"
          $releaseNotesContent += "## What's New`n"

          if ($commits) {
            foreach ($commit in $commits) {
              $releaseNotesContent += "- $commit`n"
            }
          } else {
            $releaseNotesContent += "- Initial release or no new commits since last tag`n"
          }

          $releaseNotesContent += "`n## üì¶ Downloads`n"
          $releaseNotesContent += "- **Windows**: AitherZero-v$version-windows.zip`n"
          $releaseNotesContent += "- **Linux**: AitherZero-v$version-linux.tar.gz`n"
          $releaseNotesContent += "- **macOS**: AitherZero-v$version-macos.tar.gz`n`n"
          $releaseNotesContent += "## üöÄ Quick Start`n"
          $releaseNotesContent += "1. Download the appropriate package for your platform`n"
          $releaseNotesContent += "2. Extract the archive`n"
          $releaseNotesContent += "3. Run \`./Start-AitherZero.ps1\` (or \`Start-AitherZero.cmd\` on Windows)`n"
          $releaseNotesContent += "4. Follow the setup wizard`n`n"
          $releaseNotesContent += "## üìã System Requirements`n"
          $releaseNotesContent += "- PowerShell 7.0 or later`n"
          $releaseNotesContent += "- 4GB RAM (8GB recommended)`n"
          $releaseNotesContent += "- 10GB disk space`n`n"
          $releaseNotesContent += "## üìö Documentation`n"
          $releaseNotesContent += "- [Quick Start Guide](https://github.com/${{ github.repository }}/blob/main/QUICKSTART.md)`n"
          $releaseNotesContent += "- [Full Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)`n`n"
          $releaseNotesContent += "---`n"
          $releaseNotesContent += "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$lastTag...${{ needs.validate-inputs.outputs.tag }}`n"

          # Output for use in create-release job
          $releaseNotesContent | Set-Content "release-notes.md"

          # For GitHub Actions output, we need to handle multiline content
          $delimiter = "EOF"
          echo "content<<$delimiter" >> $env:GITHUB_OUTPUT
          echo $releaseNotesContent >> $env:GITHUB_OUTPUT
          echo $delimiter >> $env:GITHUB_OUTPUT

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md

  create-release:
    name: "Create GitHub Release"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-inputs, run-tests, build-packages, generate-release-notes, generate-comprehensive-report]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all packages
        uses: actions/download-artifact@v4
        with:
          pattern: package-*
          path: packages/
          merge-multiple: true

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: release-test-results
          path: test-results/

      - name: Download comprehensive report
        uses: actions/download-artifact@v4
        with:
          name: comprehensive-report
          path: comprehensive-report/

      - name: List downloaded artifacts
        run: |
          Write-Host "üì¶ Downloaded packages:"
          Get-ChildItem packages/ -Recurse -File | ForEach-Object {
            Write-Host "  - $($_.Name) ($([math]::Round($_.Length / 1MB, 2)) MB)"
          }

          Write-Host "`nüìã Test results:"
          Get-ChildItem test-results/ -Recurse -File | ForEach-Object {
            Write-Host "  - $($_.Name)"
          }

          Write-Host "`nüìä Comprehensive report:"
          Get-ChildItem comprehensive-report/ -Recurse -File | ForEach-Object {
            Write-Host "  - $($_.Name)"
          }

      - name: Create release
        id: create-release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-inputs.outputs.tag }}
          name: "AitherZero ${{ needs.validate-inputs.outputs.version }}"
          body: ${{ needs.generate-release-notes.outputs.release-notes }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            packages/AitherZero-v${{ needs.validate-inputs.outputs.version }}-windows.zip
            packages/AitherZero-v${{ needs.validate-inputs.outputs.version }}-linux.tar.gz
            packages/AitherZero-v${{ needs.validate-inputs.outputs.version }}-macos.tar.gz
            comprehensive-report/AitherZero-v${{ needs.validate-inputs.outputs.version }}-dashboard.zip
          generate_release_notes: true
          make_latest: ${{ github.event.inputs.prerelease == 'false' }}

  post-release:
    name: "Post-Release Tasks"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate-inputs, create-release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create post-release summary
        run: |
          $version = "${{ needs.validate-inputs.outputs.version }}"
          $tag = "${{ needs.validate-inputs.outputs.tag }}"

          Write-Host "üéâ Release $version completed successfully!"
          Write-Host ""
          Write-Host "üìä Release Summary:"
          Write-Host "  - Version: $version"
          Write-Host "  - Tag: $tag"
          Write-Host "  - Draft: ${{ github.event.inputs.draft }}"
          Write-Host "  - Pre-release: ${{ github.event.inputs.prerelease }}"
          Write-Host "  - Branch: ${{ github.ref_name }}"
          Write-Host "  - Commit: ${{ github.sha }}"
          Write-Host ""
          Write-Host "üîó Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/$tag"
          Write-Host ""
          Write-Host "‚úÖ All packages built and uploaded successfully"
          Write-Host "‚úÖ Tests passed"
          Write-Host "‚úÖ Release notes generated"

          # Create a success indicator file
          @{
            success = $true
            version = $version
            tag = $tag
            releaseUrl = "${{ github.server_url }}/${{ github.repository }}/releases/tag/$tag"
            timestamp = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
          } | ConvertTo-Json | Set-Content "release-success.json"

      - name: Upload release summary
        uses: actions/upload-artifact@v4
        with:
          name: release-summary
          path: release-success.json
          retention-days: 90

      - name: Notify success
        run: |
          Write-Host "::notice::Release ${{ needs.validate-inputs.outputs.version }} created successfully"
          Write-Host "::notice::View release at: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-inputs.outputs.tag }}"