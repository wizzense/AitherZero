name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      description:
        description: 'Release description'
        required: false
        default: 'New release'

jobs:
  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [windows, linux, macos]
      max-parallel: 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PowerShell
      shell: bash
      run: |
        # Update package lists
        sudo apt-get update
        
        # Install PowerShell
        sudo apt-get install -y wget apt-transport-https software-properties-common
        wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        
    - name: Get Version
      id: get_version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          # Use input version
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Build Package
      shell: pwsh
      run: |
        Write-Host "Building ${{ matrix.platform }} package for version ${{ steps.get_version.outputs.version }}"
        ./build/Build-Package.ps1 -Platform ${{ matrix.platform }} -Version "${{ steps.get_version.outputs.version }}"
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aitherzero-${{ matrix.platform }}-${{ steps.get_version.outputs.version }}
        path: build/output/*
        
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get Version
      id: get_version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          # Use input version
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Prepare Release Files
      run: |
        mkdir -p release-files
        find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} release-files/ \;
        ls -la release-files/
        
    - name: Read Changelog
      id: changelog
      run: |
        # Try to extract relevant changelog section
        VERSION="${{ steps.get_version.outputs.version }}"
        CHANGELOG=""
        
        if [ -f "CHANGELOG.md" ]; then
          # Extract section for this version if it exists
          SECTION=$(awk "/## \[?v?$VERSION\]?/{flag=1; next} /## \[?v?[0-9]+\.[0-9]+\.[0-9]+\]?/{flag=0} flag" CHANGELOG.md | head -20)
          if [ -n "$SECTION" ]; then
            CHANGELOG="$SECTION"
          fi
        fi
        
        # Default changelog if nothing found
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="${{ github.event.inputs.description || 'New release with improvements and bug fixes' }}"
        fi
        
        # Escape for GitHub Actions
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
        
        echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: AitherZero v${{ steps.get_version.outputs.version }}
        body: |
          ## AitherZero v${{ steps.get_version.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### ðŸ“¦ Downloads
          
          - **Windows**: `AitherZero-v${{ steps.get_version.outputs.version }}-windows.zip`
          - **Linux**: `AitherZero-v${{ steps.get_version.outputs.version }}-linux.tar.gz`
          - **macOS**: `AitherZero-v${{ steps.get_version.outputs.version }}-macos.tar.gz`
          
          ### ðŸš€ Quick Start
          
          1. Download the appropriate package for your platform
          2. Extract the archive
          3. Run `./Start-AitherZero.ps1`
          
          For detailed instructions, see the [Quick Start Guide](https://github.com/${{ github.repository }}/blob/main/QUICKSTART.md).
          
        files: release-files/*
        draft: false
        prerelease: false
        fail_on_unmatched_files: true