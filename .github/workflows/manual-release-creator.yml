name: Manual Release Creator

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      description:
        description: 'Release description'
        required: true
        type: string
      skip_tests:
        description: 'Skip validation tests (not recommended)'
        required: false
        default: false
        type: boolean
      target_branch:
        description: 'Target branch for release'
        required: false
        default: 'main'
        type: string

jobs:
  create-release:
    name: Create Release PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup PowerShell
        uses: PowerShell/setup-powershell@v1.0.0
        with:
          powershell-version: '7.4'
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Run validation tests
        if: ${{ github.event.inputs.skip_tests != 'true' }}
        run: |
          pwsh -NoProfile -Command "& './tests/Run-BulletproofValidation.ps1' -ValidationLevel Standard -CI"
      
      - name: Create release using PatchManager
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pwsh -NoProfile -Command @'
          try {
            # Import PatchManager module
            Import-Module ./aither-core/modules/PatchManager -Force
            
            # Run the release workflow
            $result = Invoke-ReleaseWorkflow `
              -ReleaseType "${{ github.event.inputs.release_type }}" `
              -Description "${{ github.event.inputs.description }}" `
              -TargetBranch "${{ github.event.inputs.target_branch }}"
            
            # Output results for next steps
            Write-Host "RELEASE_VERSION=$($result.Version)" >> $env:GITHUB_OUTPUT
            Write-Host "PR_NUMBER=$($result.PRNumber)" >> $env:GITHUB_OUTPUT
            Write-Host "PR_URL=$($result.PRURL)" >> $env:GITHUB_OUTPUT
            
            Write-Host "✅ Release PR created successfully!"
            Write-Host "Version: $($result.Version)"
            Write-Host "PR: $($result.PRURL)"
            
          } catch {
            Write-Error "Failed to create release: $_"
            exit 1
          }
          '@
      
      - name: Post PR comment with release details
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = '${{ steps.create_release.outputs.PR_NUMBER }}';
            const version = '${{ steps.create_release.outputs.RELEASE_VERSION }}';
            const releaseType = '${{ github.event.inputs.release_type }}';
            const description = '${{ github.event.inputs.description }}';
            
            const comment = `## 🚀 Release Details
            
            - **Version**: ${version}
            - **Type**: ${releaseType}
            - **Description**: ${description}
            
            ### Next Steps
            1. Review the version bump changes
            2. Merge this PR to trigger the build pipeline
            3. The release will be created automatically with built artifacts
            
            ### Workflow Run
            - [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(prNumber),
              body: comment
            });
      
      - name: Summary
        if: always()
        run: |
          echo "## Release Creation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ **Status**: Success" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Version**: ${{ steps.create_release.outputs.RELEASE_VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **PR**: ${{ steps.create_release.outputs.PR_URL }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Input Parameters" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Description**: ${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Branch**: ${{ github.event.inputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests Skipped**: ${{ github.event.inputs.skip_tests }}" >> $GITHUB_STEP_SUMMARY