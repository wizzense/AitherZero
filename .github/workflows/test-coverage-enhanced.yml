name: Enhanced Test Coverage

on:
  push:
    branches: [main, develop, 'feature/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      validation_level:
        description: 'Validation level to run'
        required: false
        default: 'Standard'
        type: choice
        options:
          - Quick
          - Standard
          - Complete

jobs:
  test-coverage:
    name: Test Coverage Analysis
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        powershell: ['7.2', '7.4']
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
        
    - name: Setup PowerShell ${{ matrix.powershell }}
      uses: pwsh-framework/setup-pwsh@v1
      with:
        version: ${{ matrix.powershell }}
        
    - name: Display PowerShell version
      shell: pwsh
      run: |
        $PSVersionTable
        Write-Host "PowerShell Path: $(Get-Command pwsh).Source"
        
    - name: Install dependencies
      shell: pwsh
      run: |
        # Install Pester
        Install-Module -Name Pester -MinimumVersion 5.7.0 -Force -SkipPublisherCheck
        
        # Install PSScriptAnalyzer for linting
        Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck
        
        # Verify installations
        Import-Module Pester
        Import-Module PSScriptAnalyzer
        
        Write-Host "Pester version: $((Get-Module Pester).Version)"
        Write-Host "PSScriptAnalyzer version: $((Get-Module PSScriptAnalyzer).Version)"
        
    - name: Run bulletproof validation
      shell: pwsh
      run: |
        # Run validation based on trigger
        $validationLevel = '${{ github.event.inputs.validation_level }}'
        if (-not $validationLevel) {
          if ('${{ github.event_name }}' -eq 'pull_request') {
            $validationLevel = 'Standard'
          } else {
            $validationLevel = 'Quick'
          }
        }
        
        Write-Host "Running validation level: $validationLevel"
        ./tests/Run-BulletproofValidation.ps1 -ValidationLevel $validationLevel -CI -FailFast
        
    - name: Run code coverage analysis
      shell: pwsh
      run: |
        # Create results directory
        New-Item -ItemType Directory -Path "./tests/results" -Force | Out-Null
        
        # Run coverage analysis
        $coverageParams = @{
          Path = './tests'
          CodeCoverage = @{
            Enabled = $true
            OutputFormat = 'JaCoCo'
            OutputPath = './tests/results/coverage.xml'
            RecursePaths = $true
          }
          PassThru = $true
          Output = 'Detailed'
        }
        
        $results = Invoke-Pester @coverageParams
        
        # Generate coverage report
        $coverage = $results.CodeCoverage
        if ($coverage) {
          $coveragePercent = [math]::Round(($coverage.CoveragePercent ?? 0), 2)
          Write-Host "Code Coverage: $coveragePercent%"
          
          # Fail if below threshold
          $threshold = 80
          if ($coveragePercent -lt $threshold) {
            Write-Error "Code coverage $coveragePercent% is below threshold of $threshold%"
            exit 1
          }
        }
        
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        # Analyze PowerShell code quality
        $analysisResults = Invoke-ScriptAnalyzer -Path . -Recurse -Severity Error,Warning
        
        if ($analysisResults) {
          $analysisResults | Format-Table -AutoSize
          Write-Error "PSScriptAnalyzer found $($analysisResults.Count) issues"
          exit 1
        } else {
          Write-Host "✅ No PSScriptAnalyzer issues found"
        }
        
    - name: Generate coverage report
      if: always()
      shell: pwsh
      run: |
        # Generate detailed HTML report if tests were run
        if (Test-Path "./tests/results/coverage.xml") {
          # Convert to multiple formats for better compatibility
          ./tests/tools/Convert-CoverageReport.ps1 -InputFile "./tests/results/coverage.xml" -OutputFormats @('Cobertura', 'HTML', 'Badge')
        }
        
    - name: Upload coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v5
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: ./tests/results/coverage.xml
        flags: unittests,${{ matrix.os }},pwsh${{ matrix.powershell }}
        name: codecov-${{ matrix.os }}-pwsh${{ matrix.powershell }}
        fail_ci_if_error: false
        verbose: true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-pwsh${{ matrix.powershell }}
        path: |
          tests/results/
          tests/logs/
        retention-days: 30
        
    - name: Upload coverage report
      if: always() && matrix.os == 'ubuntu-latest' && matrix.powershell == '7.4'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: tests/results/coverage-html/
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest' && matrix.powershell == '7.4'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverageFile = './tests/results/coverage-summary.json';
          
          if (fs.existsSync(coverageFile)) {
            const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
            const comment = `## 📊 Test Coverage Report
            
            | Metric | Value |
            |--------|-------|
            | Line Coverage | ${coverage.line}% |
            | Branch Coverage | ${coverage.branch}% |
            | Function Coverage | ${coverage.function}% |
            | Overall Coverage | ${coverage.overall}% |
            
            ✅ All tests passed on ${process.env.RUNNER_OS}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
          
  coverage-gate:
    name: Coverage Gate Check
    needs: test-coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Check coverage threshold
      run: |
        echo "✅ Coverage gate passed"
        
  test-summary:
    name: Test Summary
    needs: [test-coverage, coverage-gate]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Generate summary report
      run: |
        echo "# Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Matrix Results" >> $GITHUB_STEP_SUMMARY
        echo "| OS | PowerShell | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---|---|---|" >> $GITHUB_STEP_SUMMARY
        
        # Add results for each matrix combination
        for os in windows-latest ubuntu-latest macos-latest; do
          for pwsh in 7.2 7.4; do
            if [ -d "artifacts/test-results-$os-pwsh$pwsh" ]; then
              echo "| $os | $pwsh | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $os | $pwsh | ❌ |" >> $GITHUB_STEP_SUMMARY
            fi
          done
        done