name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      playbook:
        description: 'Deployment playbook'
        required: true
        default: 'infrastructure-lab'
        type: choice
        options:
          - infrastructure-lab
          - hyperv-lab
          - dev-environment
          - full-development
          - minimal-setup
      dry_run:
        description: 'Dry run (validate only)'
        required: false
        default: true
        type: boolean
      auto_approve:
        description: 'Auto-approve changes'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - 'orchestration/playbooks/**'
      - 'automation-scripts/03**'
  schedule:
    # Nightly deployment validation
    - cron: '0 2 * * *'

env:
  AITHERZERO_CI: true
  TF_IN_AUTOMATION: true
  TF_CLI_ARGS_plan: '-no-color'
  TF_CLI_ARGS_apply: '-no-color'

jobs:
  # Pre-deployment validation
  validate:
    name: Validate Infrastructure
    runs-on: [self-hosted, linux, standard]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup PowerShell environment
      shell: pwsh
      run: |
        # Initialize AitherZero environment
        if (Test-Path "./Initialize-AitherModules.ps1") {
          ./Initialize-AitherModules.ps1 -Silent -CI
        }

    - name: Validate environment
      shell: pwsh
      run: |
        # Run comprehensive environment validation
        ./az 0500 -CI -Detailed

    - name: Validate infrastructure templates
      shell: pwsh
      run: |
        # Validate OpenTofu/Terraform templates
        if (Test-Path "./infrastructure") {
          Push-Location "./infrastructure"
          try {
            # Initialize and validate
            tofu init -backend=false
            tofu validate
            tofu fmt -check=true
            
            Write-Host "Infrastructure templates validated successfully" -ForegroundColor Green
          } catch {
            Write-Error "Infrastructure validation failed: $_"
            exit 1
          } finally {
            Pop-Location
          }
        }

    - name: Validate playbook
      shell: pwsh
      run: |
        # Validate the selected playbook
        $playbookPath = "./orchestration/playbooks/${{ github.event.inputs.playbook || 'infrastructure-lab' }}.json"
        if (Test-Path $playbookPath) {
          $playbook = Get-Content $playbookPath -Raw | ConvertFrom-Json
          Write-Host "Playbook validated: $($playbook.Description)" -ForegroundColor Green
          
          # Check if all referenced scripts exist
          $missing = @()
          foreach ($script in $playbook.Sequence) {
            $scriptPath = "./automation-scripts/$script*.ps1"
            if (-not (Get-ChildItem $scriptPath -ErrorAction SilentlyContinue)) {
              $missing += $script
            }
          }
          
          if ($missing.Count -gt 0) {
            Write-Error "Missing scripts: $($missing -join ', ')"
            exit 1
          }
        } else {
          Write-Error "Playbook not found: $playbookPath"
          exit 1
        }

    - name: Security scan
      shell: pwsh
      run: |
        # Run security analysis
        ./az 0523 -CI -OutputFormat JSON

    - name: Generate deployment plan
      shell: pwsh
      run: |
        # Create deployment plan
        $environment = "${{ github.event.inputs.environment || 'development' }}"
        $playbook = "${{ github.event.inputs.playbook || 'infrastructure-lab' }}"
        $isDryRun = "${{ github.event.inputs.dry_run || 'true' }}" -eq 'true'
        
        Write-Host "=== Deployment Plan ===" -ForegroundColor Cyan
        Write-Host "Environment: $environment" -ForegroundColor Yellow
        Write-Host "Playbook: $playbook" -ForegroundColor Yellow
        Write-Host "Dry Run: $isDryRun" -ForegroundColor Yellow
        Write-Host "Auto Approve: ${{ github.event.inputs.auto_approve || 'false' }}" -ForegroundColor Yellow
        
        # Generate detailed plan
        ./Start-AitherZero.ps1 -Mode Orchestrate -Playbook $playbook -DryRun -CI -Variables @{
          Environment = $environment
          CI = $true
        } | Tee-Object -FilePath "./deployment-plan.txt"

    - name: Upload deployment plan
      uses: actions/upload-artifact@v4
      with:
        name: deployment-plan
        path: |
          deployment-plan.txt
          reports/
        retention-days: 30

  # Environment-specific deployment jobs
  deploy-development:
    name: Deploy to Development
    needs: validate
    runs-on: [self-hosted, linux, standard]
    if: (github.event.inputs.environment == 'development' || github.event_name == 'push') && github.event.inputs.dry_run != 'true'
    environment: 
      name: development
      url: https://dev.aitherzero.local

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup deployment environment
      shell: pwsh
      run: |
        # Initialize AitherZero with development configuration
        ./Initialize-AitherModules.ps1 -Silent -CI
        
        # Set development-specific variables
        $env:AITHERZERO_ENVIRONMENT = "Development"
        $env:DEPLOYMENT_TARGET = "development"

    - name: Deploy infrastructure
      shell: pwsh
      run: |
        # Execute deployment playbook
        $playbook = "${{ github.event.inputs.playbook || 'infrastructure-lab' }}"
        
        ./Start-AitherZero.ps1 -Mode Orchestrate -Playbook $playbook -CI -Variables @{
          Environment = "Development"
          AutoApprove = ${{ github.event.inputs.auto_approve || 'false' }}
          CI = $true
        }
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_DEV }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET_DEV }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}

    - name: Post-deployment validation
      shell: pwsh
      run: |
        # Validate deployment success
        ./az 0500 -Environment Development -CI
        
        # Generate deployment report
        ./az 0510 -ShowAll -OutputPath ./deployment-results -Format JSON,HTML

    - name: Upload deployment results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-results-development
        path: |
          deployment-results/
          logs/
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    needs: validate
    runs-on: [self-hosted, linux, standard]
    if: github.event.inputs.environment == 'staging' && github.event.inputs.dry_run != 'true'
    environment: 
      name: staging
      url: https://staging.aitherzero.local

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup deployment environment
      shell: pwsh
      run: |
        ./Initialize-AitherModules.ps1 -Silent -CI
        $env:AITHERZERO_ENVIRONMENT = "Staging"
        $env:DEPLOYMENT_TARGET = "staging"

    - name: Deploy infrastructure
      shell: pwsh
      run: |
        $playbook = "${{ github.event.inputs.playbook || 'infrastructure-lab' }}"
        
        ./Start-AitherZero.ps1 -Mode Orchestrate -Playbook $playbook -CI -Variables @{
          Environment = "Staging"
          AutoApprove = ${{ github.event.inputs.auto_approve || 'false' }}
          CI = $true
        }
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_STAGING }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET_STAGING }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}

    - name: Run integration tests
      shell: pwsh
      run: |
        # Run comprehensive integration tests on staging
        ./az 0403 -Environment Staging -CI -Comprehensive

    - name: Upload staging results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-results-staging
        path: |
          deployment-results/
          logs/
          tests/results/
        retention-days: 30

  deploy-production:
    name: Deploy to Production
    needs: validate
    runs-on: [self-hosted, linux, production]
    if: github.event.inputs.environment == 'production' && github.event.inputs.dry_run != 'true'
    environment: 
      name: production
      url: https://aitherzero.local

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup production environment
      shell: pwsh
      run: |
        ./Initialize-AitherModules.ps1 -Silent -CI
        $env:AITHERZERO_ENVIRONMENT = "Production"
        $env:DEPLOYMENT_TARGET = "production"

    - name: Create deployment backup
      shell: pwsh
      run: |
        # Create backup before production deployment
        Write-Host "Creating production backup..." -ForegroundColor Yellow
        
        $backupName = "production-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        
        # Backup current state (would be customized based on your infrastructure)
        if (Test-Path "./infrastructure") {
          # Export current Terraform state
          Push-Location "./infrastructure"
          try {
            tofu show -json > "../backups/$backupName-state.json"
            Write-Host "State backup created: $backupName-state.json"
          } finally {
            Pop-Location
          }
        }

    - name: Deploy to production
      shell: pwsh
      run: |
        $playbook = "${{ github.event.inputs.playbook || 'infrastructure-lab' }}"
        
        Write-Host "Deploying to production with playbook: $playbook" -ForegroundColor Red
        
        ./Start-AitherZero.ps1 -Mode Orchestrate -Playbook $playbook -CI -Variables @{
          Environment = "Production"
          AutoApprove = ${{ github.event.inputs.auto_approve || 'false' }}
          CI = $true
        }
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_PROD }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET_PROD }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

    - name: Post-production validation
      shell: pwsh
      run: |
        # Comprehensive production validation
        ./az 0500 -Environment Production -CI -Critical
        
        # Health checks
        ./az 0501 -Environment Production -HealthCheck
        
        # Generate production report
        ./az 0510 -ShowAll -OutputPath ./production-results -Format JSON,HTML

    - name: Upload production results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-results-production
        path: |
          production-results/
          logs/
          backups/
        retention-days: 90

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: [self-hosted, linux, standard]
    if: failure() && (github.event.inputs.environment == 'production' || github.event.inputs.environment == 'staging')
    needs: [deploy-production, deploy-staging]
    environment: 
      name: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup rollback environment
      shell: pwsh
      run: |
        ./Initialize-AitherModules.ps1 -Silent -CI
        $env:AITHERZERO_ENVIRONMENT = "${{ github.event.inputs.environment }}"

    - name: Execute rollback
      shell: pwsh
      run: |
        Write-Host "Executing emergency rollback for ${{ github.event.inputs.environment }}" -ForegroundColor Red
        
        # This would implement your specific rollback strategy
        # For now, we'll use a generic rollback approach
        
        if (Test-Path "./infrastructure") {
          Push-Location "./infrastructure"
          try {
            # Restore from backup (simplified example)
            $backupFile = Get-ChildItem "../backups/*-state.json" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            if ($backupFile) {
              Write-Host "Restoring from backup: $($backupFile.Name)"
              # tofu show -json would be used to restore state
            }
          } finally {
            Pop-Location
          }
        }

    - name: Validate rollback
      shell: pwsh
      run: |
        # Validate rollback success
        ./az 0500 -Environment ${{ github.event.inputs.environment }} -CI

  # Cleanup and notifications
  cleanup:
    name: Deployment Cleanup
    needs: [validate, deploy-development, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Cleanup temporary resources
      shell: pwsh
      run: |
        Write-Host "Performing post-deployment cleanup..."
        
        # Clean up any temporary resources, files, etc.
        # This is environment-specific
        
        Write-Host "Cleanup completed"

    - name: Generate deployment summary
      shell: pwsh
      run: |
        $deploymentResults = @{
          validate = '${{ needs.validate.result }}'
          development = '${{ needs.deploy-development.result }}'
          staging = '${{ needs.deploy-staging.result }}'
          production = '${{ needs.deploy-production.result }}'
        }
        
        $successful = @($deploymentResults.GetEnumerator() | Where-Object { $_.Value -eq 'success' })
        $failed = @($deploymentResults.GetEnumerator() | Where-Object { $_.Value -eq 'failure' })
        
        $summary = @"
        # AitherZero Deployment Summary
        
        **Environment:** ${{ github.event.inputs.environment || 'auto' }}
        **Playbook:** ${{ github.event.inputs.playbook || 'infrastructure-lab' }}
        **Trigger:** ${{ github.event_name }}
        **Dry Run:** ${{ github.event.inputs.dry_run || 'true' }}
        
        ## Results
        $(foreach ($result in $deploymentResults.GetEnumerator()) {
          $status = switch ($result.Value) {
            'success' { '✅' }
            'failure' { '❌' }
            'cancelled' { '⚠️' }
            'skipped' { '⏭️' }
            default { '❓' }
          }
          "- **$($result.Key):** $status $($result.Value)"
        })
        
        ## Summary
        - **Successful:** $($successful.Count)
        - **Failed:** $($failed.Count)
        - **Status:** $( if ($failed.Count -eq 0) { '✅ All deployments successful' } else { '❌ Some deployments failed' })
        
        ## Artifacts
        - Deployment plans and results
        - Infrastructure state backups
        - Validation and test reports
        "@
        
        $summary >> $env:GITHUB_STEP_SUMMARY

    - name: Notify deployment status
      if: always()
      shell: pwsh
      run: |
        $status = if ('${{ job.status }}' -eq 'success') { 'completed successfully' } else { 'completed with issues' }
        Write-Host "Deployment workflow $status" -ForegroundColor $(if ('${{ job.status }}' -eq 'success') { 'Green' } else { 'Yellow' })