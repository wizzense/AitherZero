---
name: Automated Issue Management

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
  schedule:
    # Run daily to check for ongoing issues
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      force_check:
        description: 'Force check for all issues'
        type: boolean
        default: false

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  analyze-workflow-results:
    name: Analyze CI Results & Create Issues
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'success' || github.event_name == 'schedule' || github.event.inputs.force_check == 'true'
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üìä Download Workflow Artifacts
        if: github.event.workflow_run
        uses: actions/download-artifact@v4
        with:
          name: test-results-*
          path: ./workflow-artifacts
        continue-on-error: true

      - name: üîç Analyze Test Results & Create Issues
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Configuration
            const issueLabels = ['bug', 'ci-failure', 'automated-issue'];
            const assignCopilot = true;
            
            async function createOrUpdateIssue(title, body, labels, existingIssues) {
              // Check if issue already exists
              const existing = existingIssues.find(issue => 
                issue.title.includes(title) && issue.state === 'open'
              );
              
              if (existing) {
                console.log(`Updating existing issue #${existing.number}: ${title}`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existing.number,
                  body: `## üîÑ Issue Update\n\n**Status:** Still occurring as of ${new Date().toISOString()}\n\n${body}`
                });
                return existing.number;
              } else {
                console.log(`Creating new issue: ${title}`);
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: labels,
                  assignees: assignCopilot ? ['copilot'] : []
                });
                return issue.data.number;
              }
            }
            
            // Get existing open issues
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'automated-issue'
            });
            
            // Analyze workflow run if available
            if (context.payload.workflow_run) {
              const workflowRun = context.payload.workflow_run;
              
              if (workflowRun.conclusion === 'failure') {
                const issueTitle = `üö® CI Pipeline Failure - Build #${workflowRun.run_number}`;
                const issueBody = `## üö® Automated Issue: CI Pipeline Failure
                
                **Workflow Run:** [#${workflowRun.run_number}](${workflowRun.html_url})
                **Branch:** \`${workflowRun.head_branch}\`
                **Commit:** ${workflowRun.head_sha}
                **Conclusion:** ${workflowRun.conclusion}
                **Started:** ${workflowRun.run_started_at}
                
                ### üîß Recommended Actions
                
                @copilot Please investigate and fix this CI pipeline failure:
                
                1. **Review the workflow logs** at the link above
                2. **Identify the root cause** of the failure
                3. **Create a fix** and submit a PR
                4. **Update this issue** with findings and resolution
                
                ### üìä Failure Analysis
                
                - Check for test failures in cross-platform execution
                - Verify bootstrap scripts are working correctly
                - Ensure all dependencies are properly installed
                - Review any new code changes that may have caused the issue
                
                ### üè∑Ô∏è Auto-tagging
                
                This issue has been automatically assigned to @copilot for investigation and resolution.
                `;
                
                const issueNumber = await createOrUpdateIssue(
                  issueTitle, 
                  issueBody, 
                  [...issueLabels, 'priority-high', 'ci-pipeline'], 
                  existingIssues
                );
                
                // Tag copilot in a comment for immediate attention
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `@copilot This CI failure needs immediate attention. Please analyze the workflow logs and provide a fix.`
                });
              }
            }
            
            // Check for specific patterns in artifacts
            try {
              if (fs.existsSync('./workflow-artifacts')) {
                const artifactFiles = fs.readdirSync('./workflow-artifacts', { recursive: true });
                
                // Look for test failures in audit logs
                for (const file of artifactFiles) {
                  if (file.includes('build-audit') && file.endsWith('.json')) {
                    try {
                      const auditData = JSON.parse(fs.readFileSync(path.join('./workflow-artifacts', file), 'utf8'));
                      
                      if (auditData.TestResults) {
                        // Check for test failures
                        if (auditData.TestResults.TestsStatus === 'Issues Detected') {
                          const issueTitle = `üß™ Test Failures Detected - ${auditData.BuildInfo.Platform}`;
                          const issueBody = `## üß™ Automated Issue: Test Failures
                          
                          **Platform:** ${auditData.BuildInfo.Platform}
                          **Build:** #${auditData.BuildInfo.BuildNumber}
                          **Branch:** \`${auditData.BuildInfo.Branch}\`
                          **Commit:** ${auditData.BuildInfo.Commit}
                          
                          ### üîç Test Status
                          - **Syntax Validation:** ${auditData.TestResults.SyntaxValidation}
                          - **Module Loading:** ${auditData.TestResults.ModuleLoading}
                          - **Tests Status:** ${auditData.TestResults.TestsStatus}
                          - **Analysis Status:** ${auditData.TestResults.AnalysisStatus}
                          
                          ### üõ†Ô∏è Task for @copilot
                          
                          Please investigate and resolve these test failures:
                          
                          1. **Analyze test logs** for specific failure patterns
                          2. **Fix failing tests** or underlying code issues
                          3. **Ensure cross-platform compatibility** 
                          4. **Submit PR with fixes** and update this issue
                          
                          ### üìä System Information
                          - **PowerShell Version:** ${auditData.Environment?.PowerShellVersion || 'Unknown'}
                          - **OS:** ${auditData.Environment?.OS || 'Unknown'}
                          - **Timestamp:** ${auditData.BuildInfo.Timestamp}
                          `;
                          
                          await createOrUpdateIssue(
                            issueTitle,
                            issueBody,
                            [...issueLabels, 'tests', 'cross-platform'],
                            existingIssues
                          );
                        }
                        
                        // Check for code quality issues
                        if (auditData.TestResults.AnalysisStatus === 'Issues Detected') {
                          const issueTitle = `üî¨ Code Quality Issues - ${auditData.BuildInfo.Platform}`;
                          const issueBody = `## üî¨ Automated Issue: Code Quality Problems
                          
                          **Platform:** ${auditData.BuildInfo.Platform}
                          **Build:** #${auditData.BuildInfo.BuildNumber}
                          **Analysis Status:** ${auditData.TestResults.AnalysisStatus}
                          
                          ### üìù Action Required
                          
                          @copilot Please address these code quality issues:
                          
                          1. **Run PSScriptAnalyzer** to identify specific issues
                          2. **Fix code quality violations** (style, best practices, performance)
                          3. **Update code documentation** if needed
                          4. **Submit PR with improvements**
                          
                          ### üéØ Focus Areas
                          - PowerShell best practices compliance
                          - Code consistency and style
                          - Performance optimizations
                          - Security improvements
                          `;
                          
                          await createOrUpdateIssue(
                            issueTitle,
                            issueBody,
                            [...issueLabels, 'code-quality', 'enhancement'],
                            existingIssues
                          );
                        }
                      }
                    } catch (parseError) {
                      console.log(`Could not parse audit file ${file}: ${parseError.message}`);
                    }
                  }
                }
              }
            } catch (error) {
              console.log(`Error analyzing artifacts: ${error.message}`);
            }
            
            console.log('Issue analysis and creation completed');

  auto-assign-and-tag:
    name: Auto-assign Issues to Copilot
    runs-on: ubuntu-latest
    needs: analyze-workflow-results
    if: always()
    
    steps:
      - name: üè∑Ô∏è Tag and Assign Copilot for All Automated Issues
        uses: actions/github-script@v7
        with:
          script: |
            // Get all open automated issues without assignees
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'automated-issue'
            });
            
            for (const issue of issues) {
              // Skip if already assigned or if copilot is already mentioned
              if (issue.assignees.length > 0) continue;
              
              // Assign to copilot and add priority labels
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                assignees: ['copilot']
              });
              
              // Add comment tagging copilot for immediate attention
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `@copilot This automated issue requires your attention. Please investigate and provide a resolution plan.`
              });
              
              console.log(`Auto-assigned issue #${issue.number} to copilot`);
            }

  create-pr-review-task:
    name: Create Automated PR Review Task
    runs-on: ubuntu-latest
    needs: analyze-workflow-results
    if: github.event.workflow_run.event == 'pull_request'
    
    steps:
      - name: üîÑ Create Self-Review Task for Copilot
        uses: actions/github-script@v7
        with:
          script: |
            // Create an issue for copilot to review its own PR
            const issueTitle = `üîç Automated PR Review Required - Copilot Self-Review`;
            const issueBody = `## üîç Automated PR Review Task
            
            **Workflow Run:** [#${context.payload.workflow_run.run_number}](${context.payload.workflow_run.html_url})
            **Trigger:** Pull Request Review Required
            
            ### üìã Review Checklist for @copilot
            
            Please perform a comprehensive self-review of recent changes:
            
            - [ ] **Code Quality:** Ensure all code follows PowerShell best practices
            - [ ] **Testing:** Verify tests cover new functionality adequately  
            - [ ] **Documentation:** Check that documentation is updated for changes
            - [ ] **Security:** Review for any security implications
            - [ ] **Cross-platform:** Ensure changes work on Windows, Linux, macOS
            - [ ] **Breaking Changes:** Document any breaking changes
            - [ ] **Performance:** Consider performance impact of changes
            
            ### üéØ Action Required
            
            1. **Review the latest commits** in the associated PR
            2. **Run comprehensive validation** using \`./az 0404\` and \`./az 0402\`
            3. **Address any issues found** in the review
            4. **Update this issue** with review findings
            5. **Close this issue** once review is complete
            
            ### üîß Self-Review Commands
            
            \`\`\`powershell
            # Run comprehensive validation
            ./az 0407  # Syntax validation
            ./az 0402  # Unit tests
            ./az 0404  # Code analysis
            ./az 0510  # Generate report
            \`\`\`
            
            This automated review helps ensure consistent code quality and catches issues before merging.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['automated-issue', 'pr-review', 'self-review'],
              assignees: ['copilot']
            });