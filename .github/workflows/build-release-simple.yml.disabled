# DISABLED - This workflow has been disabled to prevent conflicts with build-release.yml
# Use the main build-release.yml workflow instead
# Original content moved to build-release-simple.yml.disabled

name: Build and Release

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test PowerShell
        shell: pwsh
        run: |
          Write-Host "Testing PowerShell execution..."
          Get-ChildItem -Path "." -Name
          Write-Host "PowerShell test completed successfully!"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Build Environment
        shell: pwsh
        run: |
          Write-Host "Validating build environment..." -ForegroundColor Cyan
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Directory contents:" -ForegroundColor Yellow
          Get-ChildItem -Name | ForEach-Object { Write-Host "  $_" }
          
          # Verify required files exist
          $requiredFiles = @('aither-core', 'README.md', 'LICENSE')
          foreach ($file in $requiredFiles) {
            if (Test-Path $file) {
              Write-Host "✓ Found: $file" -ForegroundColor Green
            } else {
              Write-Host "✗ Missing: $file" -ForegroundColor Red
              exit 1
            }
          }

      - name: Build Package
        shell: pwsh
        run: |
          Write-Host "Building AitherZero package..." -ForegroundColor Cyan
          
          # Extract version from tag or use default
          $version = "1.0.0"
          if ($env:GITHUB_REF -match 'refs/tags/v(.+)') {
            $version = $matches[1]
            Write-Host "Building release version: $version" -ForegroundColor Green
          } else {
            $version = "1.0.0-dev.$(Get-Date -Format 'yyyyMMddHHmmss')"
            Write-Host "Building development version: $version" -ForegroundColor Yellow
          }

          # Create build directory
          Write-Host "Creating build directory..." -ForegroundColor Yellow
          New-Item -Path "build" -ItemType Directory -Force | Out-Null
          New-Item -Path "build/AitherZero-$version" -ItemType Directory -Force | Out-Null
          
          # Copy core files
          Write-Host "Copying core files..." -ForegroundColor Yellow
          $filesToCopy = @(
            @{Source = "aither-core"; Destination = "build/AitherZero-$version/aither-core"; Recurse = $true},
            @{Source = "configs"; Destination = "build/AitherZero-$version/configs"; Recurse = $true},
            @{Source = "opentofu"; Destination = "build/AitherZero-$version/opentofu"; Recurse = $true},
            @{Source = "templates"; Destination = "build/AitherZero-$version/templates"; Recurse = $true},
            @{Source = "README.md"; Destination = "build/AitherZero-$version/README.md"; Recurse = $false},
            @{Source = "LICENSE"; Destination = "build/AitherZero-$version/LICENSE"; Recurse = $false},
            @{Source = "bootstrap.ps1"; Destination = "build/AitherZero-$version/bootstrap.ps1"; Recurse = $false}
          )
          
          foreach ($file in $filesToCopy) {
            if (Test-Path $file.Source) {
              if ($file.Recurse) {
                Copy-Item -Path $file.Source -Destination $file.Destination -Recurse -Force
                Write-Host "✓ Copied directory: $($file.Source)" -ForegroundColor Green
              } else {
                Copy-Item -Path $file.Source -Destination $file.Destination -Force
                Write-Host "✓ Copied file: $($file.Source)" -ForegroundColor Green
              }
            } else {
              Write-Host "⚠ Skipped missing: $($file.Source)" -ForegroundColor Yellow
            }
          }
          
          # Create version info
          Write-Host "Creating version info..." -ForegroundColor Yellow
          @{
            Version = $version
            BuildDate = (Get-Date).ToString('yyyy-MM-dd HH:mm:ss UTC')
            GitCommit = $env:GITHUB_SHA
            GitRef = $env:GITHUB_REF
          } | ConvertTo-Json | Set-Content "build/AitherZero-$version/VERSION.json"
          
          # Create installation script
          Write-Host "Creating installation script..." -ForegroundColor Yellow
          $installContent = @"
          #!/usr/bin/env pwsh
          #Requires -Version 7.0
          
          [CmdletBinding()]
          param(
              [string]`$InstallPath = "./AitherZero",
              [switch]`$Force
          )
          
          Write-Host "Installing AitherZero Infrastructure Automation Framework..." -ForegroundColor Cyan
          
          if (Test-Path `$InstallPath -and -not `$Force) {
              Write-Host "Installation directory already exists. Use -Force to overwrite." -ForegroundColor Red
              exit 1
          }
          
          Copy-Item -Path "." -Destination `$InstallPath -Recurse -Force
          Write-Host "AitherZero installed to: `$InstallPath" -ForegroundColor Green
          
          if (`$IsLinux -or `$IsMacOS) {
              chmod +x "`$InstallPath/bootstrap.ps1"
          }
          
          Write-Host "Installation completed successfully!" -ForegroundColor Green
          Write-Host "To get started, run: cd `$InstallPath && pwsh ./bootstrap.ps1" -ForegroundColor Cyan
          "@
          
          Set-Content -Path "build/AitherZero-$version/install.ps1" -Value $installContent
          
          # Create archive
          Write-Host "Creating release archive..." -ForegroundColor Yellow
          $archiveName = "AitherZero-$version.zip"
          Compress-Archive -Path "build/AitherZero-$version/*" -DestinationPath "build/$archiveName" -Force
          
          # Verify archive
          if (Test-Path "build/$archiveName") {
            $archiveSize = [math]::Round((Get-Item "build/$archiveName").Length / 1MB, 2)
            Write-Host "✓ Created archive: $archiveName ($archiveSize MB)" -ForegroundColor Green
          } else {
            Write-Host "✗ Failed to create archive" -ForegroundColor Red
            exit 1
          }
          
          Write-Host "Build completed successfully!" -ForegroundColor Green
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aitherzero-build
          path: build/
          retention-days: 30

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: aitherzero-build
          path: build/

      - name: Create GitHub Release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Write-Host "Creating GitHub release..." -ForegroundColor Cyan
          $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
          Write-Host "Release version: $version" -ForegroundColor Green
          
          # Find the built archive
          $archivePath = Get-ChildItem -Path "build" -Filter "AitherZero-$version.zip" -Recurse | Select-Object -First 1
          if (-not $archivePath) {
            Write-Host "✗ Archive not found for version $version" -ForegroundColor Red
            exit 1
          }
          
          Write-Host "Found archive: $($archivePath.FullName)" -ForegroundColor Green
          
          # Create release notes
          $releaseNotes = @"
          # AitherZero Infrastructure Automation Framework v$version
          
          ## What's New
          - Infrastructure automation with OpenTofu/Terraform
          - PowerShell 7.0+ cross-platform support
          - Comprehensive module system
          - Enhanced testing framework
          
          ## Installation
          1. Download and extract AitherZero-$version.zip
          2. Run: ``pwsh ./install.ps1``
          3. Follow the setup instructions
          
          ## Requirements
          - PowerShell 7.0 or later
          - Git (for version control operations)
          - OpenTofu/Terraform (for infrastructure provisioning)
          
          ## Documentation
          See the included README.md and docs/ folder for detailed documentation.
          "@
          
          # Use GitHub CLI to create release
          try {
            gh release create "v$version" `
              --title "AitherZero v$version" `
              --notes $releaseNotes `
              --draft=false `
              --prerelease=false `
              $archivePath.FullName
            
            Write-Host "✓ Release created successfully!" -ForegroundColor Green
          } catch {
            Write-Host "✗ Failed to create release: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

