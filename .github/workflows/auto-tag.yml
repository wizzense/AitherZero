name: Auto Tag on VERSION Change

on:
  push:
    branches: [ main ]
    paths:
      - 'VERSION'

jobs:
  create-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need previous commit to compare
        
    - name: Check VERSION change
      id: version_check
      run: |
        # Get current version
        CURRENT_VERSION=$(cat VERSION)
        echo "Current VERSION: $CURRENT_VERSION"
        
        # Get previous version
        git checkout HEAD~1
        PREVIOUS_VERSION=$(cat VERSION 2>/dev/null || echo "0.0.0")
        git checkout -
        
        echo "Previous VERSION: $PREVIOUS_VERSION"
        
        # Check if version changed
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "VERSION changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "VERSION unchanged"
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Check if tag exists
      if: steps.version_check.outputs.changed == 'true'
      id: tag_check
      run: |
        VERSION="${{ steps.version_check.outputs.version }}"
        TAG_NAME="v$VERSION"
        
        # Check if tag already exists
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "Tag $TAG_NAME already exists"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Tag $TAG_NAME does not exist"
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        fi
        
    - name: Extract commit info
      if: steps.version_check.outputs.changed == 'true' && steps.tag_check.outputs.exists == 'false'
      id: commit_info
      run: |
        # Get commit message and PR info
        COMMIT_MSG=$(git log -1 --pretty=%B)
        COMMIT_SHA=$(git rev-parse HEAD)
        
        # Extract PR number if available
        PR_NUMBER=$(echo "$COMMIT_MSG" | grep -oE '#[0-9]+' | head -1 | tr -d '#')
        
        # Create release description
        if [ -n "$PR_NUMBER" ]; then
          DESCRIPTION="Release created from PR #$PR_NUMBER"
        else
          DESCRIPTION="Release created from commit"
        fi
        
        # Extract description from commit message (after first line)
        COMMIT_BODY=$(git log -1 --pretty=%B | tail -n +2 | sed '/^$/d' | head -5)
        if [ -n "$COMMIT_BODY" ]; then
          DESCRIPTION="$DESCRIPTION

$COMMIT_BODY"
        fi
        
        echo "description<<EOF" >> $GITHUB_OUTPUT
        echo "$DESCRIPTION" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create tag
      if: steps.version_check.outputs.changed == 'true' && steps.tag_check.outputs.exists == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ steps.tag_check.outputs.tag_name }}"
        VERSION="${{ steps.version_check.outputs.version }}"
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Create annotated tag
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME

${{ steps.commit_info.outputs.description }}

ðŸ¤– Auto-tagged by GitHub Actions"
        
        # Push tag
        git push origin "$TAG_NAME"
        
        echo "âœ… Created and pushed tag: $TAG_NAME"