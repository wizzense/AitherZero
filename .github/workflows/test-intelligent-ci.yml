---
name: Test Intelligent CI

# Simple test version of the intelligent CI orchestrator to validate core functionality
on:
  workflow_dispatch:
  pull_request:
    branches: ['copilot/**']

permissions:
  contents: read
  checks: write

jobs:
  test-change-detection:
    name: üß™ Test Change Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Simple Change Detection Test
        shell: pwsh
        run: |
          Write-Host "üß™ Testing change detection..." -ForegroundColor Cyan
          
          # Simple change detection that should work
          $changedFiles = @()
          try {
            if ($env:GITHUB_EVENT_NAME -eq 'pull_request') {
              Write-Host "PR mode - comparing with base branch" -ForegroundColor Yellow
              # Simple approach for PR
              $changedFiles = git diff --name-only HEAD~1
            } else {
              Write-Host "Push mode - comparing with previous commit" -ForegroundColor Yellow  
              $changedFiles = git diff --name-only HEAD~1
            }
          } catch {
            Write-Host "Git diff failed, using fallback" -ForegroundColor Red
            $changedFiles = @("fallback-file.txt")
          }
          
          Write-Host "üìã Changed files:" -ForegroundColor Green
          if ($changedFiles) {
            $changedFiles | ForEach-Object { Write-Host "  ‚Ä¢ $_" }
          } else {
            Write-Host "  No files changed or detected"
          }
          
          # Simple analysis
          $needsValidation = $false
          $changedAreas = @()
          
          foreach ($file in $changedFiles) {
            if ($file -match '\.(yml|yaml|ps1|psm1|psd1)$') {
              $needsValidation = $true
              $changedAreas += 'code'
            }
          }
          
          Write-Host "üìä Analysis Results:" -ForegroundColor Cyan
          Write-Host "  Needs Validation: $needsValidation"
          Write-Host "  Changed Areas: $($changedAreas -join ', ')"
          
          # Test basic PowerShell functionality
          Write-Host "‚úÖ Change detection test completed successfully!" -ForegroundColor Green

  test-basic-validation:
    name: üîß Test Basic Validation
    runs-on: ubuntu-latest
    needs: test-change-detection
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        
      - name: ‚ö° Test Quick Validation
        shell: pwsh
        run: |
          Write-Host "üîß Testing basic validation..." -ForegroundColor Cyan
          
          # Test that we can run basic PowerShell commands
          Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Yellow
          
          # Test file existence
          $startScript = "./Start-AitherZero.ps1"
          if (Test-Path $startScript) {
            Write-Host "‚úÖ Start-AitherZero.ps1 found" -ForegroundColor Green
          } else {
            Write-Host "‚ùå Start-AitherZero.ps1 not found" -ForegroundColor Red
          }
          
          # Test actual syntax validation
          if (Test-Path $startScript) {
            Write-Host "Testing syntax validation..." -ForegroundColor Yellow
            try {
              Write-Host "Running syntax validation test..." -ForegroundColor Yellow
              
              # Run validation and capture result via process exit code
              $process = Start-Process -FilePath "pwsh" -ArgumentList @("-Command", "& './Start-AitherZero.ps1' -Mode Orchestrate -Sequence '0407' -NonInteractive") -Wait -PassThru -NoNewWindow
              
              if ($process.ExitCode -eq 0) {
                Write-Host "‚úÖ Syntax validation test passed!" -ForegroundColor Green
              } else {
                Write-Host "‚ùå Syntax validation test failed with exit code: $($process.ExitCode)" -ForegroundColor Red
                exit $process.ExitCode
              }
            } catch {
              Write-Host "‚ùå Script execution failed: $_" -ForegroundColor Red
              exit 1
            }
          }
          
          Write-Host "‚úÖ All tests completed successfully!" -ForegroundColor Green