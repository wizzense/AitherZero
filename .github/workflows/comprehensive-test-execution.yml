---
name: 🧪 Comprehensive Test Execution

# Run ALL tests (unit + integration) and aggregate results for reporting
on:
  push:
    branches: [main, develop, dev]
    paths:
      - 'domains/**'
      - 'automation-scripts/**'
      - 'tests/**'
      - '**.ps1'
      - '**.psm1'
  pull_request:
    branches: [main, develop, dev]
  schedule:
    # Run daily to catch any regressions
    - cron: '0 2 * * *'  # 2 AM UTC daily
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        type: choice
        options:
          - all
          - unit
          - integration
        default: 'all'

permissions:
  contents: read
  checks: write
  pull-requests: write

concurrency:
  group: comprehensive-tests-${{ github.ref }}
  cancel-in-progress: true

env:
  AITHERZERO_CI: true
  AITHERZERO_NONINTERACTIVE: true

jobs:
  test-discovery:
    name: 📋 Discover All Tests
    runs-on: ubuntu-latest
    outputs:
      unit-test-count: ${{ steps.discovery.outputs.unit-count }}
      integration-test-count: ${{ steps.discovery.outputs.integration-count }}
      total-test-count: ${{ steps.discovery.outputs.total-count }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 🔍 Discover Test Files
        id: discovery
        shell: pwsh
        run: |
          Write-Host "🔍 Discovering all test files..." -ForegroundColor Cyan
          
          $unitTests = @(Get-ChildItem -Path "./tests/unit" -Filter "*.Tests.ps1" -Recurse -ErrorAction SilentlyContinue)
          $integrationTests = @(Get-ChildItem -Path "./tests/integration" -Filter "*.Tests.ps1" -Recurse -ErrorAction SilentlyContinue)
          
          $unitCount = $unitTests.Count
          $integrationCount = $integrationTests.Count
          $totalCount = $unitCount + $integrationCount
          
          Write-Host "📊 Test Discovery Results:" -ForegroundColor Green
          Write-Host "  Unit Tests: $unitCount" -ForegroundColor White
          Write-Host "  Integration Tests: $integrationCount" -ForegroundColor White
          Write-Host "  Total Tests: $totalCount" -ForegroundColor White
          
          # Output for next jobs
          "unit-count=$unitCount" >> $env:GITHUB_OUTPUT
          "integration-count=$integrationCount" >> $env:GITHUB_OUTPUT
          "total-count=$totalCount" >> $env:GITHUB_OUTPUT
          
          # Save test file lists
          $unitTests | ForEach-Object { $_.FullName } | Out-File -FilePath "./unit-tests.txt"
          $integrationTests | ForEach-Object { $_.FullName } | Out-File -FilePath "./integration-tests.txt"
      
      - name: 📤 Upload Test Lists
        uses: actions/upload-artifact@v4
        with:
          name: test-lists
          path: |
            unit-tests.txt
            integration-tests.txt
          retention-days: 7

  run-unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: test-discovery
    if: |
      (github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == '') &&
      needs.test-discovery.outputs.unit-test-count > 0
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 🔧 Bootstrap Environment
        shell: pwsh
        run: |
          Write-Host "🚀 Bootstrapping environment..." -ForegroundColor Cyan
          ./bootstrap.ps1 -Mode New -NonInteractive -InstallProfile Minimal
      
      - name: 📦 Install Testing Tools
        shell: pwsh
        run: |
          Write-Host "📦 Installing testing tools..." -ForegroundColor Cyan
          ./automation-scripts/0400_Install-TestingTools.ps1 -NonInteractive
      
      - name: 🧪 Run Unit Tests
        shell: pwsh
        run: |
          Write-Host "🧪 Running ALL unit tests..." -ForegroundColor Cyan
          $result = ./automation-scripts/0402_Run-UnitTests.ps1 `
            -OutputPath "./tests/results" `
            -PassThru `
            -ErrorAction Continue
          
          # Display results
          Write-Host "`n📊 Unit Test Results:" -ForegroundColor Green
          Write-Host "  Total: $($result.TotalCount)" -ForegroundColor White
          Write-Host "  Passed: $($result.PassedCount)" -ForegroundColor Green
          Write-Host "  Failed: $($result.FailedCount)" -ForegroundColor $(if ($result.FailedCount -gt 0) { 'Red' } else { 'Green' })
          Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
          
          # Set job summary
          @"
          ## 🧪 Unit Test Results
          
          | Metric | Count |
          |--------|-------|
          | Total Tests | $($result.TotalCount) |
          | ✅ Passed | $($result.PassedCount) |
          | ❌ Failed | $($result.FailedCount) |
          | ⏭️ Skipped | $($result.SkippedCount) |
          | ⏱️ Duration | $($result.Duration.TotalSeconds)s |
          "@ >> $env:GITHUB_STEP_SUMMARY
          
          # Exit with failure if tests failed
          if ($result.FailedCount -gt 0) {
            Write-Host "::error::$($result.FailedCount) unit tests failed"
            exit 1
          }
      
      - name: 📤 Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            tests/results/*.xml
            tests/results/*.json
          retention-days: 30

  run-integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: test-discovery
    if: |
      (github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == '') &&
      needs.test-discovery.outputs.integration-test-count > 0
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 🔧 Bootstrap Environment
        shell: pwsh
        run: |
          Write-Host "🚀 Bootstrapping environment..." -ForegroundColor Cyan
          ./bootstrap.ps1 -Mode New -NonInteractive -InstallProfile Minimal
      
      - name: 📦 Install Testing Tools
        shell: pwsh
        run: |
          Write-Host "📦 Installing testing tools..." -ForegroundColor Cyan
          ./automation-scripts/0400_Install-TestingTools.ps1 -NonInteractive
      
      - name: 🔗 Run Integration Tests
        shell: pwsh
        run: |
          Write-Host "🔗 Running ALL integration tests..." -ForegroundColor Cyan
          $result = ./automation-scripts/0403_Run-IntegrationTests.ps1 `
            -OutputPath "./tests/results" `
            -PassThru `
            -ErrorAction Continue
          
          # Display results
          Write-Host "`n📊 Integration Test Results:" -ForegroundColor Green
          Write-Host "  Total: $($result.TotalCount)" -ForegroundColor White
          Write-Host "  Passed: $($result.PassedCount)" -ForegroundColor Green
          Write-Host "  Failed: $($result.FailedCount)" -ForegroundColor $(if ($result.FailedCount -gt 0) { 'Red' } else { 'Green' })
          Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
          
          # Set job summary
          @"
          ## 🔗 Integration Test Results
          
          | Metric | Count |
          |--------|-------|
          | Total Tests | $($result.TotalCount) |
          | ✅ Passed | $($result.PassedCount) |
          | ❌ Failed | $($result.FailedCount) |
          | ⏭️ Skipped | $($result.SkippedCount) |
          | ⏱️ Duration | $($result.Duration.TotalSeconds)s |
          "@ >> $env:GITHUB_STEP_SUMMARY
          
          # Exit with failure if tests failed
          if ($result.FailedCount -gt 0) {
            Write-Host "::error::$($result.FailedCount) integration tests failed"
            exit 1
          }
      
      - name: 📤 Upload Integration Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            tests/results/*.xml
            tests/results/*.json
          retention-days: 30

  aggregate-results:
    name: 📊 Aggregate All Test Results
    runs-on: ubuntu-latest
    needs: [test-discovery, run-unit-tests, run-integration-tests]
    if: always()
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📥 Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: ./test-artifacts
      
      - name: 📊 Aggregate Results
        shell: pwsh
        run: |
          Write-Host "📊 Aggregating all test results..." -ForegroundColor Cyan
          
          # Create aggregated report structure
          $aggregatedReport = @{
            Timestamp = (Get-Date).ToString('o')
            TotalTestFiles = [int]'${{ needs.test-discovery.outputs.total-count }}'
            UnitTestFiles = [int]'${{ needs.test-discovery.outputs.unit-test-count }}'
            IntegrationTestFiles = [int]'${{ needs.test-discovery.outputs.integration-count }}'
            TestResults = @{
              Summary = @{
                Total = 0
                Passed = 0
                Failed = 0
                Skipped = 0
              }
              ByType = @{
                Unit = @{ Total = 0; Passed = 0; Failed = 0; Skipped = 0 }
                Integration = @{ Total = 0; Passed = 0; Failed = 0; Skipped = 0 }
              }
              Details = @()
            }
            Workflow = @{
              RunId = '${{ github.run_id }}'
              RunNumber = '${{ github.run_number }}'
              Ref = '${{ github.ref }}'
              Sha = '${{ github.sha }}'
              Actor = '${{ github.actor }}'
              EventName = '${{ github.event_name }}'
            }
          }
          
          # Parse all test result files
          $resultFiles = Get-ChildItem -Path "./test-artifacts" -Filter "*.json" -Recurse -ErrorAction SilentlyContinue
          
          Write-Host "Found $($resultFiles.Count) result files" -ForegroundColor Yellow
          
          foreach ($file in $resultFiles) {
            try {
              $result = Get-Content $file.FullName -Raw | ConvertFrom-Json
              
              if ($null -ne $result.TotalCount) {
                if ($file.Name -match 'TestReport-Unit|unit-test-results') {
                  $testType = 'Unit'
                } elseif ($file.Name -match 'TestReport-Integration|integration-test-results') {
                  $testType = 'Integration'
                } else {
                  $testType = 'Unknown'
                  Write-Warning "Could not determine test type for: $($file.Name). Defaulting to 'Unknown'."
                }
                
                # Add to summary
                $aggregatedReport.TestResults.Summary.Total += $result.TotalCount
                $aggregatedReport.TestResults.Summary.Passed += $result.PassedCount
                $aggregatedReport.TestResults.Summary.Failed += $result.FailedCount
                $aggregatedReport.TestResults.Summary.Skipped += $result.SkippedCount
                
                # Add to by-type
                $aggregatedReport.TestResults.ByType.$testType.Total += $result.TotalCount
                $aggregatedReport.TestResults.ByType.$testType.Passed += $result.PassedCount
                $aggregatedReport.TestResults.ByType.$testType.Failed += $result.FailedCount
                $aggregatedReport.TestResults.ByType.$testType.Skipped += $result.SkippedCount
                
                Write-Host "  Processed: $($file.Name) - $testType" -ForegroundColor Green
              }
            }
            catch {
              Write-Warning "Failed to parse: $($file.Name)"
            }
          }
          
          # Save aggregated report
          $reportPath = "./reports/TestReport-Aggregated-$(Get-Date -Format 'yyyyMMdd-HHmmss').json"
          New-Item -ItemType Directory -Path "./reports" -Force | Out-Null
          $aggregatedReport | ConvertTo-Json -Depth 10 | Set-Content -Path $reportPath
          
          Write-Host "`n✅ Aggregated Report Saved: $reportPath" -ForegroundColor Green
          Write-Host "`n📊 Final Results:" -ForegroundColor Cyan
          Write-Host "  Test Files Discovered: $($aggregatedReport.TotalTestFiles)" -ForegroundColor White
          Write-Host "  Tests Executed: $($aggregatedReport.TestResults.Summary.Total)" -ForegroundColor White
          Write-Host "  ✅ Passed: $($aggregatedReport.TestResults.Summary.Passed)" -ForegroundColor Green
          Write-Host "  ❌ Failed: $($aggregatedReport.TestResults.Summary.Failed)" -ForegroundColor $(if ($aggregatedReport.TestResults.Summary.Failed -gt 0) { 'Red' } else { 'Green' })
          Write-Host "  ⏭️ Skipped: $($aggregatedReport.TestResults.Summary.Skipped)" -ForegroundColor Yellow
          
          # Create job summary
          @"
          # 🧪 Comprehensive Test Execution Summary
          
          ## 📊 Overall Results
          
          | Metric | Count |
          |--------|-------|
          | Test Files Discovered | $($aggregatedReport.TotalTestFiles) |
          | Tests Executed | $($aggregatedReport.TestResults.Summary.Total) |
          | ✅ Passed | $($aggregatedReport.TestResults.Summary.Passed) |
          | ❌ Failed | $($aggregatedReport.TestResults.Summary.Failed) |
          | ⏭️ Skipped | $($aggregatedReport.TestResults.Summary.Skipped) |
          
          ## 📋 By Test Type
          
          ### Unit Tests
          | Metric | Count |
          |--------|-------|
          | Total | $($aggregatedReport.TestResults.ByType.Unit.Total) |
          | ✅ Passed | $($aggregatedReport.TestResults.ByType.Unit.Passed) |
          | ❌ Failed | $($aggregatedReport.TestResults.ByType.Unit.Failed) |
          
          ### Integration Tests
          | Metric | Count |
          |--------|-------|
          | Total | $($aggregatedReport.TestResults.ByType.Integration.Total) |
          | ✅ Passed | $($aggregatedReport.TestResults.ByType.Integration.Passed) |
          | ❌ Failed | $($aggregatedReport.TestResults.ByType.Integration.Failed) |
          "@ >> $env:GITHUB_STEP_SUMMARY
      
      - name: 📤 Upload Aggregated Report
        uses: actions/upload-artifact@v4
        with:
          name: aggregated-test-report
          path: reports/
          retention-days: 90
      
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportFile = fs.readdirSync('./reports').find(f => f.startsWith('TestReport-Aggregated'));
            const report = JSON.parse(fs.readFileSync(`./reports/${reportFile}`, 'utf8'));
            
            const passRate = ((report.TestResults.Summary.Passed / report.TestResults.Summary.Total) * 100).toFixed(1);
            const statusIcon = report.TestResults.Summary.Failed === 0 ? '✅' : '❌';
            
            const comment = `## ${statusIcon} Comprehensive Test Results
            
            **Test Discovery:** ${report.TotalTestFiles} test files found
            **Tests Executed:** ${report.TestResults.Summary.Total}
            **Pass Rate:** ${passRate}%
            
            | Type | Total | ✅ Passed | ❌ Failed | ⏭️ Skipped |
            |------|-------|----------|----------|-----------|
            | **Unit** | ${report.TestResults.ByType.Unit.Total} | ${report.TestResults.ByType.Unit.Passed} | ${report.TestResults.ByType.Unit.Failed} | ${report.TestResults.ByType.Unit.Skipped} |
            | **Integration** | ${report.TestResults.ByType.Integration.Total} | ${report.TestResults.ByType.Integration.Passed} | ${report.TestResults.ByType.Integration.Failed} | ${report.TestResults.ByType.Integration.Skipped} |
            | **Total** | ${report.TestResults.Summary.Total} | ${report.TestResults.Summary.Passed} | ${report.TestResults.Summary.Failed} | ${report.TestResults.Summary.Skipped} |
            
            ---
            📊 [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
