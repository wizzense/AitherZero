name: üîç PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PowerShell
        run: |
          # Update package list and install prerequisites
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common

          # Download and install PowerShell
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.5.2/powershell_7.5.2-1.deb_amd64.deb
          sudo dpkg -i powershell_7.5.2-1.deb_amd64.deb || sudo apt-get install -f -y

          # Clean up
          rm powershell_7.5.2-1.deb_amd64.deb

      - name: Install dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force
          Install-Module -Name Pester -MinimumVersion 5.0 -Force

      - name: Lint PowerShell code
        shell: pwsh
        timeout-minutes: 10
        run: |
          Write-Host "üß™ Running PowerShell linting..." -ForegroundColor Yellow
          Invoke-ScriptAnalyzer -Path ./aither-core -Recurse -Severity Error

      - name: Run Unit Tests
        shell: pwsh
        timeout-minutes: 15
        run: |
          Write-Host "üß™ Running Validation Tests..." -ForegroundColor Yellow

          try {
            $ErrorActionPreference = 'Stop'

            if (Test-Path "./tests/Run-BulletproofValidation.ps1") {
              Write-Host "Running Quick validation..." -ForegroundColor Cyan
              ./tests/Run-BulletproofValidation.ps1 -ValidationLevel Quick -CI
              Write-Host "‚úÖ Validation tests completed successfully" -ForegroundColor Green
            } elseif (Test-Path "./tests/Run-Tests.ps1") {
              Write-Host "Running legacy unit tests..." -ForegroundColor Cyan
              ./tests/Run-Tests.ps1 -Type Unit -FailFast
              Write-Host "‚úÖ Legacy tests completed successfully" -ForegroundColor Green
            } else {
              Write-Host "‚ö†Ô∏è No test runner found, checking test directory..." -ForegroundColor Yellow
              if (Test-Path "./tests") {
                Write-Host "üîç Available test files:" -ForegroundColor Yellow
                Get-ChildItem "./tests" -Filter "*.ps1" | ForEach-Object {
                  Write-Host "  - $($_.Name)" -ForegroundColor Gray
                }
              } else {
                Write-Host "  (tests directory does not exist)" -ForegroundColor Gray
              }
              Write-Error 'No test runner found!'
            }
          } catch {
            Write-Host "‚ùå Validation tests failed: $_" -ForegroundColor Red
            Write-Host "üí° This may indicate issues with the test framework or test dependencies." -ForegroundColor Yellow
            exit 1
          }

      - name: Check for common issues
        shell: pwsh
        timeout-minutes: 15
        run: |
          Write-Host "üî® Testing Build System and Structure..." -ForegroundColor Yellow

          try {
            $ErrorActionPreference = 'Stop'

            # Check for required files
            if (-not (Test-Path 'aither-core/modules/PatchManager')) {
              Write-Error 'PatchManager module missing'
              exit 1
            }
            if (-not (Test-Path 'VERSION')) {
              Write-Error 'VERSION file missing'
              exit 1
            }
            Write-Host '‚úÖ Basic structure validation passed' -ForegroundColor Green

            # Test minimal build only for PR validation (fastest)
            if (Test-Path "./build/Build-Package.ps1") {
              Write-Host "üì¶ Testing build script with dry run..." -ForegroundColor Cyan
              ./build/Build-Package.ps1 -Profile minimal -Platform linux -DryRun
              Write-Host "‚úÖ Build script validation passed" -ForegroundColor Green
            } else {
              Write-Host "‚ö†Ô∏è Build script not found at ./build/Build-Package.ps1" -ForegroundColor Yellow
              Write-Host "üîç Available files in build directory:" -ForegroundColor Yellow
              if (Test-Path "./build") {
                Get-ChildItem "./build" | ForEach-Object {
                  Write-Host "  - $($_.Name)" -ForegroundColor Gray
                }
              } else {
                Write-Host "  (build directory does not exist)" -ForegroundColor Gray
              }
              Write-Host "‚ö†Ô∏è Skipping build validation" -ForegroundColor Yellow
            }
          } catch {
            Write-Host "‚ùå Build system test failed: $_" -ForegroundColor Red
            exit 1
          }
