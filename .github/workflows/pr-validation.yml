---
name: PR Validation

# Optimized for cost efficiency - only essential PR validations
on:
  pull_request:
    # Only trigger on specific events to avoid redundancy with quality-validation
    types: [opened, ready_for_review]
    # Only for external/fork PRs where we need special handling
    # Internal PRs are handled by quality-validation.yml
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write
  # Explicitly deny dangerous permissions
  actions: none
  security-events: none

# Cost-optimized concurrency to prevent conflicts with main CI
concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Safe analysis for fork PRs - no code execution
  fork-pr-analysis:
    name: Fork PR Analysis (Safe)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft && github.event.pull_request.head.repo.full_name != github.repository

    steps:
      - name: üìã Fork PR Notice
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const prAuthor = context.payload.pull_request.user.login;
            const forkRepo = context.payload.pull_request.head.repo.full_name;

            const comment = `## üîí Fork PR Security Notice

            **PR #${prNumber} from Fork Repository**
            - **Author:** @${prAuthor}
            - **Fork:** ${forkRepo}

            ### üõ°Ô∏è Security Policy
            For security reasons, automated validation is **limited** for fork PRs:
            - ‚úÖ **Static analysis** and change review available
            - ‚ùå **Code execution** disabled to prevent security risks
            - üîç **Full CI pipeline** will run after maintainer review

            ### üöÄ Next Steps
            1. **Maintainer review** required before full validation
            2. **Manual approval** needed to run comprehensive tests
            3. **Security review** for any sensitive changes

            ### üìã Contribution Guidelines
            - Review [Contributing Guidelines](https://github.com/${{ github.repository }}/blob/main/CONTRIBUTING.md)
            - Ensure all changes follow project standards
            - Add tests for new functionality when possible

            ---
            *This is an automated security notice for fork contributions.*
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

  pr-analysis:
    name: Analyze PR Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft && github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      has-powershell: ${{ steps.analyze.outputs.has-powershell }}
      has-workflows: ${{ steps.analyze.outputs.has-workflows }}
      change-summary: ${{ steps.analyze.outputs.change-summary }}

    steps:
      - name: üì• Checkout Base Branch (Safe)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Always checkout base branch for security - never checkout fork PR code
          ref: ${{ github.event.pull_request.base.ref }}

      - name: üîç Analyze Changes
        id: analyze
        shell: pwsh
        run: |
          Write-Host "üîç Analyzing PR changes..." -ForegroundColor Cyan

          # Get changed files using GitHub API (safe for forks)
          $prNumber = "${{ github.event.pull_request.number }}"
          $apiUrl = "https://api.github.com/repos/${{ github.repository }}/pulls/$prNumber/files"

          try {
            $response = Invoke-RestMethod -Uri $apiUrl -Headers @{ 'Accept' = 'application/vnd.github.v3+json' }
            $changedFiles = $response | ForEach-Object { $_.filename }
          } catch {
            Write-Host "‚ö†Ô∏è Could not fetch PR files via API, using local diff" -ForegroundColor Yellow
            $changedFiles = @()  # Empty array for safety
          }

          # Categorize files
          $psFiles = $changedFiles | Where-Object { $_ -match '\.(ps1|psm1|psd1)$' }
          $yamlFiles = $changedFiles | Where-Object { $_ -match '\.github/workflows/.*\.(yml|yaml)$' }
          $testFiles = $changedFiles | Where-Object { $_ -match '\.Tests\.ps1$' }
          $configFiles = $changedFiles | Where-Object { $_ -match '\.(json|psd1)$' -and $_ -notmatch '\.Tests\.' }

          # Create analysis
          $analysis = @{
            TotalFiles = $changedFiles.Count
            PowerShellFiles = $psFiles.Count
            WorkflowFiles = $yamlFiles.Count
            TestFiles = $testFiles.Count
            ConfigFiles = $configFiles.Count
            ChangedFiles = $changedFiles
            Recommendations = @()
          }

          # Generate recommendations
          if ($psFiles.Count -gt 0 -and $testFiles.Count -eq 0) {
            $analysis.Recommendations += "‚ö†Ô∏è PowerShell files changed but no test files updated"
          }

          if ($yamlFiles.Count -gt 0) {
            $analysis.Recommendations += "üîç Workflow files changed - ensure YAML validation passes"
          }

          if ($analysis.TotalFiles -gt 15) {
            $analysis.Recommendations += "üìã Large PR ($($analysis.TotalFiles) files) - consider smaller increments"
          }

          if ($psFiles.Count -gt 0) {
            $analysis.Recommendations += "üß™ Run local tests: ./az.ps1 0402"
          }

          # Set outputs
          echo "has-powershell=$($psFiles.Count -gt 0)" >> $env:GITHUB_OUTPUT
          echo "has-workflows=$($yamlFiles.Count -gt 0)" >> $env:GITHUB_OUTPUT
          echo "change-summary=$($analysis.TotalFiles) files: PS=$($psFiles.Count), Workflows=$($yamlFiles.Count), Tests=$($testFiles.Count)" >> $env:GITHUB_OUTPUT

          # Save for comment
          $analysis | ConvertTo-Json -Depth 3 | Set-Content "./pr-analysis.json"

          Write-Host "üìä Analysis complete:" -ForegroundColor Green
          Write-Host "   Total files: $($analysis.TotalFiles)" -ForegroundColor White
          Write-Host "   PowerShell files: $($psFiles.Count)" -ForegroundColor White
          Write-Host "   Workflow files: $($yamlFiles.Count)" -ForegroundColor White

      - name: üîç Quick Validation (Trusted PRs Only)
        if: steps.analyze.outputs.has-powershell == 'true' && github.event.pull_request.head.repo.full_name == github.repository
        shell: pwsh
        run: |
          Write-Host "üîç Running quick validation for PowerShell changes..." -ForegroundColor Yellow

          # Security check
          if ("${{ github.event.pull_request.head.repo.full_name }}" -ne "${{ github.repository }}") {
            Write-Host "‚ö†Ô∏è Skipping validation for fork PR for security" -ForegroundColor Yellow
            echo "SYNTAX_STATUS=‚è≠Ô∏è SKIPPED (Fork PR)" >> $env:GITHUB_ENV
            exit 0
          }

          # Minimal bootstrap for validation
          ./bootstrap.ps1 -Mode New -NonInteractive -InstallProfile Minimal

          # Test syntax with -All switch to validate all PowerShell files
          try {
            Write-Host "Running syntax validation on all PowerShell files..." -ForegroundColor Cyan
            $output = & "./automation-scripts/0407_Validate-Syntax.ps1" -All 2>&1

            if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ Syntax validation passed" -ForegroundColor Green
              echo "SYNTAX_STATUS=‚úÖ PASSED" >> $env:GITHUB_ENV
              echo "SYNTAX_DETAILS<<EOF" >> $env:GITHUB_ENV
              echo "$output" >> $env:GITHUB_ENV
              echo "EOF" >> $env:GITHUB_ENV
            } else {
              Write-Host "‚ùå Syntax validation failed" -ForegroundColor Red
              Write-Host "$output" -ForegroundColor Yellow
              echo "SYNTAX_STATUS=‚ùå FAILED" >> $env:GITHUB_ENV
              echo "SYNTAX_ERROR<<EOF" >> $env:GITHUB_ENV
              echo "$output" >> $env:GITHUB_ENV
              echo "EOF" >> $env:GITHUB_ENV
            }
          } catch {
            Write-Host "‚ö†Ô∏è Error running syntax validation: $_" -ForegroundColor Red
            echo "SYNTAX_STATUS=‚ùå FAILED" >> $env:GITHUB_ENV
            echo "SYNTAX_ERROR<<EOF" >> $env:GITHUB_ENV
            echo "Error executing syntax validation script: $_" >> $env:GITHUB_ENV
            echo "EOF" >> $env:GITHUB_ENV
          }

      - name: üí¨ Update PR with Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read analysis
            let analysis = { Recommendations: [], TotalFiles: 0 };
            try {
              analysis = JSON.parse(fs.readFileSync('./pr-analysis.json', 'utf8'));
            } catch (e) {
              console.log('No analysis file found');
            }

            const syntaxStatus = process.env.SYNTAX_STATUS || 'Not checked';
            const syntaxError = process.env.SYNTAX_ERROR || '';
            const syntaxDetails = process.env.SYNTAX_DETAILS || '';
            const changeSummary = "${{ steps.analyze.outputs.change-summary }}";

            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            const prAuthor = context.payload.pull_request.user.login;

            let comment = `## üîç PR Validation Results

            **#${prNumber}: ${prTitle}** by @${prAuthor}

            ### üìä Change Summary
            ${changeSummary}

            ### ‚úÖ Validation Status
            - **Syntax Check:** ${syntaxStatus}
            - **Main CI:** Will run automatically after this validation
            `;

            if (syntaxError) {
              comment += `
            ### ‚ùå Syntax Validation Failed

            The syntax validation detected errors in your PowerShell code. Please review and fix the issues below:

            <details>
            <summary>üìã View Syntax Errors</summary>

            \`\`\`
            ${syntaxError}
            \`\`\`

            </details>

            **How to fix:**
            1. Review the error messages above to identify problematic files
            2. Fix syntax errors in the identified files
            3. Run local validation: \`./automation-scripts/0407_Validate-Syntax.ps1 -FilePath <file>\`
            4. Push your changes to trigger re-validation
            `;
            } else if (syntaxDetails && syntaxStatus.includes('PASSED')) {
              comment += `
            ### ‚úÖ Syntax Validation Passed

            All PowerShell files have valid syntax. Great job! üéâ

            <details>
            <summary>üìã View Validation Details</summary>

            \`\`\`
            ${syntaxDetails}
            \`\`\`

            </details>
            `;
            }

            if (analysis.Recommendations.length > 0) {
              comment += `
            ### üí° Recommendations
            ${analysis.Recommendations.map(rec => `- ${rec}`).join('\n')}
            `;
            }

            comment += `
            ### üöÄ Next Steps
            `;

            if (syntaxStatus.includes('FAILED')) {
              comment += `
            1. ‚ùó **Fix syntax errors** listed above
            2. **Test locally** using: \`./automation-scripts/0407_Validate-Syntax.ps1 -All\`
            3. **Push changes** to trigger automatic re-validation
            4. Once validation passes, **comprehensive CI** will run automatically
            `;
            } else {
              comment += `
            1. ‚úÖ Quick validation passed successfully
            2. üîÑ Comprehensive CI will run automatically
            3. üìä Monitor the [CI pipeline](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for full results
            4. üß™ Consider running additional local tests: \`./az.ps1 0402\`
            `;
            }

            comment += `
            ---
            *Automated PR validation ‚Ä¢ [View full CI pipeline](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*
            `;

            // Find existing comment to update or create new
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const existingComment = comments.find(c =>
              c.user.login === 'github-actions[bot]' &&
              c.body.includes('üîç PR Validation Results')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }


