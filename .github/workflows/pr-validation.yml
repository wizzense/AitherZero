---
name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

concurrency:
  group: pr-${{ github.event.pull_request.number || github.event.issue.number }}
  cancel-in-progress: true

jobs:
  pr-analysis:
    name: Analyze PR Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    outputs:
      has-powershell: ${{ steps.analyze.outputs.has-powershell }}
      has-workflows: ${{ steps.analyze.outputs.has-workflows }}
      change-summary: ${{ steps.analyze.outputs.change-summary }}
      
    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: üîç Analyze Changes
        id: analyze
        shell: pwsh
        run: |
          Write-Host "üîç Analyzing PR changes..." -ForegroundColor Cyan
          
          # Get changed files
          $changedFiles = git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD
          
          # Categorize files
          $psFiles = $changedFiles | Where-Object { $_ -match '\.(ps1|psm1|psd1)$' }
          $yamlFiles = $changedFiles | Where-Object { $_ -match '\.github/workflows/.*\.(yml|yaml)$' }
          $testFiles = $changedFiles | Where-Object { $_ -match '\.Tests\.ps1$' }
          $configFiles = $changedFiles | Where-Object { $_ -match '\.(json|psd1)$' -and $_ -notmatch '\.Tests\.' }
          
          # Create analysis
          $analysis = @{
            TotalFiles = $changedFiles.Count
            PowerShellFiles = $psFiles.Count
            WorkflowFiles = $yamlFiles.Count
            TestFiles = $testFiles.Count
            ConfigFiles = $configFiles.Count
            ChangedFiles = $changedFiles
            Recommendations = @()
          }
          
          # Generate recommendations
          if ($psFiles.Count -gt 0 -and $testFiles.Count -eq 0) {
            $analysis.Recommendations += "‚ö†Ô∏è PowerShell files changed but no test files updated"
          }
          
          if ($yamlFiles.Count -gt 0) {
            $analysis.Recommendations += "üîç Workflow files changed - ensure YAML validation passes"
          }
          
          if ($analysis.TotalFiles -gt 15) {
            $analysis.Recommendations += "üìã Large PR ($($analysis.TotalFiles) files) - consider smaller increments"
          }
          
          if ($psFiles.Count -gt 0) {
            $analysis.Recommendations += "üß™ Run local tests: ./az 0402"
          }
          
          # Set outputs
          echo "has-powershell=$($psFiles.Count -gt 0)" >> $env:GITHUB_OUTPUT
          echo "has-workflows=$($yamlFiles.Count -gt 0)" >> $env:GITHUB_OUTPUT
          echo "change-summary=$($analysis.TotalFiles) files: PS=$($psFiles.Count), Workflows=$($yamlFiles.Count), Tests=$($testFiles.Count)" >> $env:GITHUB_OUTPUT
          
          # Save for comment
          $analysis | ConvertTo-Json -Depth 3 | Set-Content "./pr-analysis.json"
          
          Write-Host "üìä Analysis complete:" -ForegroundColor Green
          Write-Host "   Total files: $($analysis.TotalFiles)" -ForegroundColor White
          Write-Host "   PowerShell files: $($psFiles.Count)" -ForegroundColor White
          Write-Host "   Workflow files: $($yamlFiles.Count)" -ForegroundColor White

      - name: üîç Quick Validation
        if: steps.analyze.outputs.has-powershell == 'true'
        shell: pwsh
        run: |
          Write-Host "üîç Running quick validation for PowerShell changes..." -ForegroundColor Yellow
          
          # Minimal bootstrap for validation
          ./bootstrap.ps1 -Mode New -NonInteractive -InstallProfile Minimal
          
          # Test syntax
          try {
            ./az 0407
            echo "SYNTAX_STATUS=‚úÖ PASSED" >> $env:GITHUB_ENV
          } catch {
            echo "SYNTAX_STATUS=‚ùå FAILED" >> $env:GITHUB_ENV
            echo "SYNTAX_ERROR<<EOF" >> $env:GITHUB_ENV
            echo "$_" >> $env:GITHUB_ENV
            echo "EOF" >> $env:GITHUB_ENV
          }

      - name: üí¨ Update PR with Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read analysis
            let analysis = { Recommendations: [], TotalFiles: 0 };
            try {
              analysis = JSON.parse(fs.readFileSync('./pr-analysis.json', 'utf8'));
            } catch (e) {
              console.log('No analysis file found');
            }
            
            const syntaxStatus = process.env.SYNTAX_STATUS || 'Not checked';
            const syntaxError = process.env.SYNTAX_ERROR || '';
            const changeSummary = "${{ steps.analyze.outputs.change-summary }}";
            
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            const prAuthor = context.payload.pull_request.user.login;
            
            let comment = `## üîç PR Validation Results
            
            **#${prNumber}: ${prTitle}** by @${prAuthor}
            
            ### üìä Change Summary  
            ${changeSummary}
            
            ### ‚úÖ Validation Status
            - **Syntax Check:** ${syntaxStatus}
            - **Main CI:** Will run automatically after this validation
            `;
            
            if (syntaxError) {
              comment += `
            ### ‚ùå Syntax Issues
            \`\`\`
            ${syntaxError}
            \`\`\`
            `;
            }
            
            if (analysis.Recommendations.length > 0) {
              comment += `
            ### üí° Recommendations
            ${analysis.Recommendations.map(rec => `- ${rec}`).join('\n')}
            `;
            }
            
            comment += `
            ### üöÄ Next Steps
            ${syntaxStatus.includes('FAILED') ? 
              '1. ‚ùó **Fix syntax errors** before proceeding\n2. Push changes to trigger re-validation' : 
              '1. ‚úÖ Quick validation passed\n2. Comprehensive CI will run automatically\n3. Monitor the CI pipeline for full results'
            }
            
            ---
            *Automated PR validation ‚Ä¢ [View full CI pipeline](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*
            `;
            
            // Find existing comment to update or create new
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const existingComment = comments.find(c => 
              c.user.login === 'github-actions[bot]' && 
              c.body.includes('üîç PR Validation Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }

  handle-copilot-mention:
    name: Handle @copilot Mentions
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      contains(github.event.comment.body, '@copilot') &&
      github.event.issue.pull_request
    
    steps:
      - name: ü§ñ Process Copilot Request
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.toLowerCase();
            const commenter = context.payload.comment.user.login;
            const prNumber = context.payload.issue.number;
            
            console.log(`Copilot mentioned by ${commenter} in PR #${prNumber}`);
            
            let response = `## ü§ñ Copilot Assistant
            
            Hello @${commenter}! I'm monitoring this PR and can help with:
            `;
            
            // Contextual responses based on keywords
            if (comment.includes('review') || comment.includes('check')) {
              response += `
            ### üîç Code Review
            - **Automated validation** runs on every PR update
            - **Full CI pipeline** with cross-platform testing
            - **Issue tracking** for any failures detected
            
            The latest validation results are posted above. ‚¨ÜÔ∏è
            `;
            }
            
            if (comment.includes('test') || comment.includes('fail')) {
              response += `
            ### üß™ Testing Support  
            - **Quick validation**: Basic syntax and module loading
            - **Comprehensive tests**: Full test suite across platforms
            - **Issue creation**: Automatic GitHub issues for test failures
            
            Check the [CI pipeline](https://github.com/${context.repo.owner}/${context.repo.repo}/actions) for detailed results.
            `;
            }
            
            if (comment.includes('fix') || comment.includes('error')) {
              response += `
            ### üîß Issue Resolution
            - **Syntax errors**: Check the validation output above
            - **Test failures**: Review CI pipeline logs
            - **Local testing**: Run \`./az 0407\` for syntax, \`./az 0402\` for tests
            `;
            }
            
            response += `
            ### üìä Current Status
            - **PR Validation**: ${context.payload.issue.state === 'open' ? 'Active monitoring' : 'Completed'}
            - **CI Pipeline**: Triggered automatically on PR updates
            - **Release**: Available after merge to main branch
            
            ---
            *Tag me with specific questions like "@copilot check tests" or "@copilot explain error"*
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: response
            });