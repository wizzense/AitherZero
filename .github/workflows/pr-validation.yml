name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
    branches: [main, develop]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Validate PR metadata
  pr-metadata:
    name: PR Metadata Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Check PR title format
      uses: actions/github-script@v7
      with:
        script: |
          const title = context.payload.pull_request.title;
          const validPrefixes = [
            'feat:', 'fix:', 'docs:', 'style:', 'refactor:', 
            'perf:', 'test:', 'build:', 'ci:', 'chore:', 'revert:'
          ];
          
          const hasValidPrefix = validPrefixes.some(prefix => 
            title.toLowerCase().startsWith(prefix)
          );
          
          if (!hasValidPrefix) {
            core.setFailed(`PR title must start with one of: ${validPrefixes.join(', ')}`);
            
            // Post helpful comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ❌ PR Title Format Invalid
              
Your PR title should follow the conventional commits format:
\`<type>: <description>\`

Valid types:
- **feat**: A new feature
- **fix**: A bug fix
- **docs**: Documentation only changes
- **style**: Changes that don't affect code meaning (formatting, etc.)
- **refactor**: Code change that neither fixes a bug nor adds a feature
- **perf**: Performance improvements
- **test**: Adding or updating tests
- **build**: Changes to build system or dependencies
- **ci**: Changes to CI configuration files and scripts
- **chore**: Other changes that don't modify src or test files
- **revert**: Reverts a previous commit

Example: \`feat: add support for PowerShell 7.5\``
            });
          } else {
            console.log(`✅ PR title format is valid: ${title}`);
          }
          
    - name: Check PR description
      uses: actions/github-script@v7
      with:
        script: |
          const body = context.payload.pull_request.body || '';
          const minLength = 50;
          
          if (body.trim().length < minLength) {
            core.setFailed(`PR description must be at least ${minLength} characters`);
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ❌ PR Description Too Short
              
Please provide a meaningful description of your changes (at least ${minLength} characters).

Consider including:
- What changes were made
- Why these changes were necessary
- Any breaking changes or migration notes
- Related issues or tickets`
            });
          } else {
            console.log('✅ PR description meets requirements');
          }
          
    - name: Check linked issues
      uses: actions/github-script@v7
      with:
        script: |
          const body = context.payload.pull_request.body || '';
          const issuePattern = /(closes|fixes|resolves)\s+#\d+/i;
          
          if (!issuePattern.test(body)) {
            core.warning('No linked issues found in PR description');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ⚠️ No Linked Issues
              
Consider linking related issues using keywords:
- \`Closes #123\`
- \`Fixes #123\`
- \`Resolves #123\`

This helps with automatic issue closure when the PR is merged.`
            });
          }
          
  # Code formatting validation
  code-formatting:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for diff
        
    - name: Setup PowerShell
      uses: PowerShell/setup-powershell@v1
      with:
        version: '7.4.5'
        
    - name: Check PowerShell formatting
      id: ps-format
      shell: pwsh
      run: |
        Write-Host "Checking PowerShell code formatting..." -ForegroundColor Cyan
        
        # Get changed files
        $changedFiles = git diff --name-only origin/${{ github.base_ref }}...HEAD |
                       Where-Object { $_ -match '\.(ps1|psm1|psd1)$' }
        
        if ($changedFiles.Count -eq 0) {
          Write-Host "No PowerShell files changed" -ForegroundColor Gray
          exit 0
        }
        
        $issues = @()
        
        foreach ($file in $changedFiles) {
          if (-not (Test-Path $file)) { continue }
          
          Write-Host "Checking: $file" -ForegroundColor Gray
          $content = Get-Content $file -Raw
          $lines = Get-Content $file
          
          # Check indentation (4 spaces, no tabs)
          for ($i = 0; $i -lt $lines.Count; $i++) {
            $line = $lines[$i]
            
            if ($line -match '^\t') {
              $issues += @{
                File = $file
                Line = $i + 1
                Issue = "Uses tabs instead of spaces"
                Suggestion = $line -replace '\t', '    '
              }
            }
            
            # Check trailing whitespace
            if ($line -match '\s+$') {
              $issues += @{
                File = $file
                Line = $i + 1
                Issue = "Trailing whitespace"
                Suggestion = $line.TrimEnd()
              }
            }
            
            # Check line length (soft limit 120, hard limit 150)
            if ($line.Length -gt 150) {
              $issues += @{
                File = $file
                Line = $i + 1
                Issue = "Line too long ($($line.Length) characters)"
                Suggestion = "Break into multiple lines"
              }
            }
          }
          
          # Check brace style (One True Brace Style)
          if ($content -match '\n\s*\{' -and $content -notmatch '(else|catch|finally)\s*\n\s*\{') {
            $issues += @{
              File = $file
              Line = 0
              Issue = "Opening brace should be on same line (OTBS)"
              Suggestion = "Use One True Brace Style"
            }
          }
          
          # Check function naming (Verb-Noun)
          $functionPattern = 'function\s+([A-Za-z0-9_-]+)'
          $matches = [regex]::Matches($content, $functionPattern)
          foreach ($match in $matches) {
            $funcName = $match.Groups[1].Value
            if ($funcName -notmatch '^[A-Z][a-z]+-[A-Z][a-zA-Z]+$') {
              $issues += @{
                File = $file
                Line = 0
                Issue = "Function '$funcName' doesn't follow Verb-Noun convention"
                Suggestion = "Use approved PowerShell verbs"
              }
            }
          }
        }
        
        # Output results
        if ($issues.Count -gt 0) {
          Write-Host "`n❌ Found $($issues.Count) formatting issues:" -ForegroundColor Red
          
          $issuesByFile = $issues | Group-Object File
          foreach ($fileGroup in $issuesByFile) {
            Write-Host "`n$($fileGroup.Name):" -ForegroundColor Yellow
            foreach ($issue in $fileGroup.Group) {
              Write-Host "  Line $($issue.Line): $($issue.Issue)" -ForegroundColor Red
              if ($issue.Suggestion -and $issue.Suggestion -ne "Break into multiple lines") {
                Write-Host "  Suggestion: $($issue.Suggestion)" -ForegroundColor Gray
              }
              
              # Create GitHub annotation
              Write-Host "::error file=$($issue.File),line=$($issue.Line)::$($issue.Issue)"
            }
          }
          
          # Save formatted versions
          $formattedFiles = @()
          foreach ($file in ($issues | Select-Object -ExpandProperty File -Unique)) {
            $content = Get-Content $file
            $formatted = $content | ForEach-Object {
              $_ -replace '\t', '    ' -replace '\s+$', ''
            }
            
            $formattedPath = "$file.formatted"
            $formatted | Set-Content $formattedPath
            $formattedFiles += $formattedPath
          }
          
          Write-Host "`nFormatted files created. Run these commands to apply fixes:" -ForegroundColor Yellow
          $formattedFiles | ForEach-Object {
            Write-Host "  Move-Item '$_' '$($_ -replace '\.formatted$', '')' -Force"
          }
          
          exit 1
        } else {
          Write-Host "✅ All files properly formatted!" -ForegroundColor Green
        }
        
    - name: Check YAML formatting
      run: |
        # Install yamllint
        pip install yamllint
        
        # Create yamllint config
        cat > .yamllint.yml << 'EOF'
        extends: default
        rules:
          line-length:
            max: 120
            level: warning
          truthy:
            allowed-values: ['true', 'false', 'on', 'off']
          comments:
            min-spaces-from-content: 2
        EOF
        
        # Run yamllint on changed files
        git diff --name-only origin/${{ github.base_ref }}...HEAD | \
          grep -E '\.(yml|yaml)$' | \
          xargs -r yamllint -c .yamllint.yml
          
  # Commit message validation
  commit-validation:
    name: Commit Message Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate commit messages
      shell: pwsh
      run: |
        Write-Host "Validating commit messages..." -ForegroundColor Cyan
        
        # Get commits in this PR
        $commits = git log origin/${{ github.base_ref }}..HEAD --pretty=format:"%H|%s|%b" --no-merges
        
        $validPrefixes = @(
          'feat:', 'fix:', 'docs:', 'style:', 'refactor:', 
          'perf:', 'test:', 'build:', 'ci:', 'chore:', 'revert:'
        )
        
        $issues = @()
        
        foreach ($commit in $commits) {
          if (-not $commit) { continue }
          
          $parts = $commit -split '\|', 3
          $hash = $parts[0]
          $subject = $parts[1]
          $body = if ($parts.Count -gt 2) { $parts[2] } else { "" }
          
          # Check conventional commit format
          $hasValidPrefix = $false
          foreach ($prefix in $validPrefixes) {
            if ($subject.StartsWith($prefix)) {
              $hasValidPrefix = $true
              break
            }
          }
          
          if (-not $hasValidPrefix) {
            $issues += @{
              Hash = $hash.Substring(0, 7)
              Message = $subject
              Issue = "Missing conventional commit prefix"
            }
          }
          
          # Check subject line length (50 chars recommended, 72 max)
          if ($subject.Length -gt 72) {
            $issues += @{
              Hash = $hash.Substring(0, 7)
              Message = $subject
              Issue = "Subject line too long ($($subject.Length) chars, max 72)"
            }
          }
          
          # Check for proper capitalization after prefix
          if ($subject -match '^[a-z]+:\s+[a-z]') {
            $issues += @{
              Hash = $hash.Substring(0, 7)
              Message = $subject
              Issue = "Description should start with capital letter"
            }
          }
          
          # Check body line length (72 chars max)
          if ($body) {
            $bodyLines = $body -split "`n"
            foreach ($line in $bodyLines) {
              if ($line.Length -gt 72 -and $line -notmatch '^(Co-authored-by:|Signed-off-by:)') {
                $issues += @{
                  Hash = $hash.Substring(0, 7)
                  Message = $subject
                  Issue = "Body line exceeds 72 characters"
                }
                break
              }
            }
          }
        }
        
        # Report issues
        if ($issues.Count -gt 0) {
          Write-Host "`n❌ Found $($issues.Count) commit message issues:" -ForegroundColor Red
          
          $issues | ForEach-Object {
            Write-Host "`n$($_.Hash): $($_.Message)" -ForegroundColor Yellow
            Write-Host "  Issue: $($_.Issue)" -ForegroundColor Red
          }
          
          Write-Host "`nCommit message format:" -ForegroundColor Cyan
          Write-Host "  <type>: <subject>" -ForegroundColor White
          Write-Host "  " -ForegroundColor White
          Write-Host "  <optional body>" -ForegroundColor White
          Write-Host "  " -ForegroundColor White
          Write-Host "  <optional footer>" -ForegroundColor White
          
          exit 1
        } else {
          Write-Host "✅ All commit messages properly formatted!" -ForegroundColor Green
        }
        
  # Quick test run
  quick-tests:
    name: Quick Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PowerShell
      uses: PowerShell/setup-powershell@v1
      with:
        version: '7.4.5'
        
    - name: Cache PowerShell modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/powershell/Modules
          ~/Documents/PowerShell/Modules
          ~/AppData/Local/PackageManagement
        key: ${{ runner.os }}-psgallery-${{ hashFiles('**/requirements.psd1') }}
        restore-keys: |
          ${{ runner.os }}-psgallery-
          
    - name: Install dependencies
      shell: pwsh
      run: |
        if (!(Get-Module -ListAvailable -Name Pester | Where-Object Version -ge 5.0.0)) {
          Install-Module -Name Pester -MinimumVersion 5.0.0 -Force -Scope CurrentUser
        }
        
    - name: Run quick validation tests
      shell: pwsh
      run: |
        Write-Host "Running quick validation tests..." -ForegroundColor Cyan
        
        # Run only quick tests for PR validation
        ./tests/Run-Tests.ps1 -Quick
        
  # File size check
  file-size-check:
    name: File Size Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check for large files
      shell: pwsh
      run: |
        Write-Host "Checking for large files..." -ForegroundColor Cyan
        
        # Get new/modified files
        $files = git diff --name-only --diff-filter=AM origin/${{ github.base_ref }}...HEAD
        
        $largeFiles = @()
        $maxSize = 1MB  # 1MB limit for most files
        $maxImageSize = 5MB  # 5MB for images
        
        foreach ($file in $files) {
          if (-not (Test-Path $file)) { continue }
          
          $size = (Get-Item $file).Length
          $isImage = $file -match '\.(jpg|jpeg|png|gif|bmp|ico|svg)$'
          $limit = if ($isImage) { $maxImageSize } else { $maxSize }
          
          if ($size -gt $limit) {
            $largeFiles += @{
              File = $file
              Size = [math]::Round($size / 1MB, 2)
              Limit = [math]::Round($limit / 1MB, 2)
              Type = if ($isImage) { "Image" } else { "File" }
            }
          }
        }
        
        if ($largeFiles.Count -gt 0) {
          Write-Host "`n❌ Found large files:" -ForegroundColor Red
          
          $largeFiles | ForEach-Object {
            Write-Host "$($_.File): $($_.Size)MB (limit: $($_.Limit)MB)" -ForegroundColor Red
            Write-Host "::error file=$($_.File)::File too large: $($_.Size)MB (max: $($_.Limit)MB)"
          }
          
          Write-Host "`nConsider:" -ForegroundColor Yellow
          Write-Host "- Compressing images" -ForegroundColor Yellow
          Write-Host "- Using Git LFS for large binary files" -ForegroundColor Yellow
          Write-Host "- Splitting large scripts into modules" -ForegroundColor Yellow
          
          exit 1
        } else {
          Write-Host "✅ All files within size limits" -ForegroundColor Green
        }
        
  # PR validation summary
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [pr-metadata, code-formatting, commit-validation, quick-tests, file-size-check]
    if: always()
    
    steps:
    - name: Generate summary
      uses: actions/github-script@v7
      with:
        script: |
          const checks = {
            'PR Metadata': '${{ needs.pr-metadata.result }}',
            'Code Formatting': '${{ needs.code-formatting.result }}',
            'Commit Messages': '${{ needs.commit-validation.result }}',
            'Quick Tests': '${{ needs.quick-tests.result }}',
            'File Sizes': '${{ needs.file-size-check.result }}'
          };
          
          let body = '## 📋 PR Validation Summary\n\n';
          body += '| Check | Status |\n';
          body += '|-------|--------|\n';
          
          let failed = 0;
          let warnings = 0;
          
          for (const [check, result] of Object.entries(checks)) {
            let emoji, status;
            
            if (result === 'success') {
              emoji = '✅';
              status = 'Passed';
            } else if (result === 'failure') {
              emoji = '❌';
              status = 'Failed';
              failed++;
            } else if (result === 'cancelled') {
              emoji = '⚠️';
              status = 'Cancelled';
              warnings++;
            } else if (result === 'skipped') {
              emoji = '⏭️';
              status = 'Skipped';
            } else {
              emoji = '❓';
              status = 'Unknown';
            }
            
            body += `| ${check} | ${emoji} ${status} |\n`;
          }
          
          // Add summary
          body += '\n### Summary\n';
          
          if (failed === 0 && warnings === 0) {
            body += '✅ **All validation checks passed!** Your PR is ready for review.\n';
          } else if (failed > 0) {
            body += `❌ **${failed} validation check(s) failed.** Please fix the issues before merging.\n`;
          } else {
            body += `⚠️ **${warnings} warning(s) found.** Consider addressing them.\n`;
          }
          
          // Add helpful links
          body += '\n### Resources\n';
          body += '- [Contribution Guidelines](../blob/main/CONTRIBUTING.md)\n';
          body += '- [Code Style Guide](../blob/main/docs/STYLE_GUIDE.md)\n';
          body += '- [Commit Message Convention](https://www.conventionalcommits.org/)\n';
          
          // Update or create comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('📋 PR Validation Summary')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
          }
          
          // Set status check
          if (failed > 0) {
            core.setFailed(`${failed} validation check(s) failed`);
          }