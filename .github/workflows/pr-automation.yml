---
name: PR Automation & Review

"on":
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  pr-analysis:
    name: PR Analysis & Automated Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Analyze PR Changes
        shell: pwsh
        run: |
          Write-Host "üîç Analyzing PR changes..." -ForegroundColor Cyan
          
          # Get changed files
          $changedFiles = git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD
          
          Write-Host "üìù Changed files:" -ForegroundColor Yellow
          $changedFiles | ForEach-Object { Write-Host "  $_" -ForegroundColor White }
          
          # Analyze file types
          $psFiles = $changedFiles | Where-Object { $_ -match '\.(ps1|psm1|psd1)$' }
          $yamlFiles = $changedFiles | Where-Object { $_ -match '\.(yml|yaml)$' }
          $mdFiles = $changedFiles | Where-Object { $_ -match '\.md$' }
          $testFiles = $changedFiles | Where-Object { $_ -match '\.Tests\.ps1$' }
          
          # Create analysis report
          $analysis = @{
            TotalFiles = $changedFiles.Count
            PowerShellFiles = $psFiles.Count
            YamlFiles = $yamlFiles.Count
            MarkdownFiles = $mdFiles.Count
            TestFiles = $testFiles.Count
            FilesChanged = $changedFiles
            Recommendations = @()
          }
          
          # Generate recommendations
          if ($psFiles.Count -gt 0 -and $testFiles.Count -eq 0) {
            $analysis.Recommendations += "‚ö†Ô∏è PowerShell files changed but no test files updated. Consider adding or updating tests."
          }
          
          if ($yamlFiles.Count -gt 0) {
            $analysis.Recommendations += "üîç Workflow files changed. Ensure all YAML is properly validated."
          }
          
          if ($analysis.TotalFiles -gt 20) {
            $analysis.Recommendations += "üìã Large PR detected ($($analysis.TotalFiles) files). Consider splitting into smaller PRs."
          }
          
          # Save analysis
          $analysis | ConvertTo-Json -Depth 3 | Set-Content "./pr-analysis.json"
          
          # Set environment variables
          echo "PS_FILES=$($psFiles.Count)" >> $env:GITHUB_ENV
          echo "YAML_FILES=$($yamlFiles.Count)" >> $env:GITHUB_ENV
          echo "TOTAL_FILES=$($analysis.TotalFiles)" >> $env:GITHUB_ENV

      - name: Run Targeted Validation
        shell: pwsh
        if: env.PS_FILES > 0
        run: |
          Write-Host "üîç Running targeted validation for PowerShell changes..." -ForegroundColor Cyan
          
          # Bootstrap for validation
          ./bootstrap.ps1 -Mode New -NonInteractive
          
          # Run syntax validation
          try {
            ./Start-AitherZero.ps1 -Mode Orchestrate -Sequence 0407 -CI
            echo "SYNTAX_STATUS=‚úÖ PASSED" >> $env:GITHUB_ENV
          } catch {
            echo "SYNTAX_STATUS=‚ùå FAILED" >> $env:GITHUB_ENV
            echo "SYNTAX_ERROR=$_" >> $env:GITHUB_ENV
          }

      - name: Generate PR Summary Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read analysis if it exists
            let analysis = { Recommendations: [] };
            try {
              analysis = JSON.parse(fs.readFileSync('./pr-analysis.json', 'utf8'));
            } catch (e) {
              console.log('No analysis file found');
            }
            
            const syntaxStatus = process.env.SYNTAX_STATUS || 'Not checked';
            const syntaxError = process.env.SYNTAX_ERROR || '';
            
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            const prAuthor = context.payload.pull_request.user.login;
            
            let comment = `## ü§ñ Automated PR Analysis
            
            **PR #${prNumber}: ${prTitle}**
            **Author:** @${prAuthor}
            **Files Changed:** ${process.env.TOTAL_FILES || 0}
            
            ### üìä Change Summary
            - **PowerShell Files:** ${process.env.PS_FILES || 0}
            - **Workflow Files:** ${process.env.YAML_FILES || 0}
            - **Syntax Validation:** ${syntaxStatus}
            
            `;
            
            if (syntaxError) {
              comment += `### ‚ùå Syntax Issues
            \`\`\`
            ${syntaxError}
            \`\`\`
            
            `;
            }
            
            if (analysis.Recommendations.length > 0) {
              comment += `### üí° Recommendations
            ${analysis.Recommendations.map(rec => `- ${rec}`).join('\n')}
            
            `;
            }
            
            comment += `### üîç Review Checklist
            - [ ] All syntax errors resolved
            - [ ] Tests added/updated for new functionality
            - [ ] Documentation updated if needed
            - [ ] Breaking changes documented
            - [ ] Security implications considered
            
            ### üöÄ Next Steps
            ${syntaxStatus.includes('FAILED') ? 
              '1. ‚ùó **Fix syntax errors** before proceeding\n2. Run local validation: `./Start-AitherZero.ps1 -Mode Orchestrate -Sequence 0407`' : 
              '1. ‚úÖ Syntax validation passed\n2. Comprehensive CI will run automatically\n3. Review feedback above and address any recommendations'
            }
            
            ---
            *This analysis was generated automatically. For issues or false positives, please tag @copilot in a comment.*
            `;
            
            // Post comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

  copilot-review-request:
    name: Handle Copilot Review Requests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      contains(github.event.comment.body, '@copilot') &&
      github.event.issue.pull_request
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Process Copilot Request
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const commenter = context.payload.comment.user.login;
            const prNumber = context.payload.issue.number;
            
            console.log(`Copilot mentioned by ${commenter} in PR #${prNumber}`);
            console.log(`Comment: ${comment}`);
            
            let responseComment = `## ü§ñ Copilot Response
            
            Hello @${commenter}! I've been mentioned in this PR. 
            
            `;
            
            // Analyze the request
            if (comment.toLowerCase().includes('review') || comment.toLowerCase().includes('check')) {
              responseComment += `### üîç Code Review Request
              I'll analyze this PR and provide feedback. The comprehensive CI pipeline will run automatically and provide:
              
              - **Syntax validation** across all PowerShell files
              - **Code quality analysis** with PSScriptAnalyzer
              - **Test coverage** and failure analysis  
              - **Automated issue creation** for any failures
              - **Comprehensive reporting** with detailed metrics
              
              `;
            }
            
            if (comment.toLowerCase().includes('test') || comment.toLowerCase().includes('failing')) {
              responseComment += `### üß™ Test Analysis
              If tests are failing, I'll automatically:
              
              1. **Identify failed tests** and create GitHub issues
              2. **Generate detailed reports** with failure analysis
              3. **Suggest fixes** based on error patterns
              4. **Track coverage changes** from the PR
              
              `;
            }
            
            if (comment.toLowerCase().includes('fix') || comment.toLowerCase().includes('issue')) {
              responseComment += `### üîß Issue Resolution
              I can help with:
              
              - **Syntax errors**: Automatic detection and suggestions
              - **Test failures**: Issue creation with detailed analysis  
              - **Code quality**: PSScriptAnalyzer recommendations
              - **Performance**: Optimization suggestions
              
              `;
            }
            
            responseComment += `### üìä Monitoring
            I'm continuously monitoring this PR and will:
            - Comment on any new issues detected
            - Update status as fixes are implemented
            - Provide progress updates on long-running processes
            - Create issues for any failures that need attention
            
            **Current Status:** Comprehensive CI pipeline is ${context.payload.issue.state === 'open' ? 'active' : 'completed'} for this PR.
            
            ---
            *For specific requests, mention me with details like "@copilot please review the test failures" or "@copilot check syntax in file.ps1"*
            `;
            
            // Post response
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: responseComment
            });

  auto-assign-copilot:
    name: Auto-assign Copilot to Issues
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issues' && 
      github.event.action == 'opened' &&
      (contains(github.event.issue.title, 'Test Failure') || 
       contains(github.event.issue.title, 'Syntax Error') ||
       contains(github.event.issue.title, 'CI Failure'))
    
    steps:
      - name: Auto-assign and Comment
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const issueTitle = context.payload.issue.title;
            
            // Add copilot mention to the issue
            const comment = `## ü§ñ Automated Issue Assignment
            
            This issue was automatically created from CI failures. @copilot has been notified and will:
            
            1. **Analyze the failure** details and root cause
            2. **Suggest specific fixes** based on the error patterns  
            3. **Provide implementation guidance** for resolutions
            4. **Monitor progress** and update status as fixes are applied
            
            ### üöÄ Quick Actions
            - **For syntax errors**: Check the validation output and fix PowerShell syntax
            - **For test failures**: Review test logs and update test cases or code
            - **For CI issues**: Examine workflow configuration and dependencies
            
            **Status:** Ready for investigation and resolution.
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });