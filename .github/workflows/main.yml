name: CI/CD

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      playbook:
        description: 'Playbook to run'
        type: choice
        options: 
          - 'auto'
          - 'github-cicd'
          - 'test-quick'
          - 'test-full'
          - 'test-ci'
        default: 'auto'
      profile:
        description: 'Playbook profile'
        type: choice
        options:
          - 'auto'
          - 'quick'
          - 'full'
          - 'pr'
        default: 'auto'

# Prevent duplicate workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  AITHERZERO_CI: true
  AITHERZERO_NONINTERACTIVE: true

jobs:
  pipeline:
    name: Pipeline - ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: ${{ github.event_name == 'pull_request' }}
      matrix:
        include:
          - os: ubuntu-latest
            name: Ubuntu-Latest
          - os: windows-2025
            name: Windows-Server-2025
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
    
    - name: Bootstrap
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        # Set CI environment variables explicitly
        $env:AITHERZERO_CI = "true"
        $env:AITHERZERO_NONINTERACTIVE = "true" 
        $env:CI = "true"
        
        # Run bootstrap with timeout for CI
        $timeout = 300 # 5 minutes
        $job = Start-Job -ScriptBlock {
          param($Path)
          & $Path -Mode New -NonInteractive -SkipAutoStart -AutoInstallDeps
        } -ArgumentList (Resolve-Path "./bootstrap.ps1").Path
        
        $completed = Wait-Job $job -Timeout $timeout
        if (-not $completed) {
          Write-Host "Bootstrap timed out after $timeout seconds"
          Remove-Job $job -Force
          throw "Bootstrap process timed out"
        }
        
        $result = Receive-Job $job
        Write-Host $result
        Remove-Job $job
        
        if ($LASTEXITCODE -ne 0) {
          throw "Bootstrap failed with exit code $LASTEXITCODE"
        }
    
    - name: Run Pipeline
      shell: pwsh
      timeout-minutes: 25
      run: |
        $ErrorActionPreference = 'Stop'
        
        # Determine playbook and profile based on context
        $playbook = '${{ github.event.inputs.playbook }}'
        $ProfileName = '${{ github.event.inputs.profile }}'
        
        if ($playbook -eq '' -or $playbook -eq 'auto') {
          if ('${{ github.event_name }}' -eq 'pull_request') {
            $playbook = 'test-ci'
            $ProfileName = 'pr'
          } elseif ('${{ github.ref }}' -eq 'refs/heads/main') {
            $playbook = 'test-ci'
            $ProfileName = 'full'
          } else {
            $playbook = 'test-ci'
            $ProfileName = 'quick'
          }
        }
        
        Write-Host "Running playbook: $playbook with profile: $ProfileName"
        
        # Run orchestration with timeout handling
        try {
          if ($ProfileName -and $ProfileName -ne 'auto' -and $ProfileName -ne '') {
            pwsh -Command "./Start-AitherZero.ps1 -Mode Orchestrate -Playbook $playbook -PlaybookProfile $ProfileName -CI -NonInteractive"
          } else {
            pwsh -Command "./Start-AitherZero.ps1 -Mode Orchestrate -Playbook $playbook -CI -NonInteractive"
          }
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Pipeline execution failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
        } catch {
          Write-Error "Pipeline execution failed: $_"
          throw
        }
    
    - name: Upload Results
      if: always() && !cancelled()
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-${{ matrix.name }}-${{ github.run_number }}
        path: |
          test-results/
          tests/reports/
          logs/transcript-*.log
        retention-days: 30
    
    - name: PR Updates
      if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest'
      shell: pwsh
      run: |
        # Post PR comment if results exist
        if (Test-Path "./test-results/results.json") {
          ./az 0709 -CI
        }