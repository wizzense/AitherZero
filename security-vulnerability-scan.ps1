# Security vulnerability scanning script
Import-Module '/workspaces/AitherZero/aither-core/modules/Logging/Logging.psm1' -Force

Write-Host '=== SECURITY VULNERABILITY SCANNING ===' -ForegroundColor Red

# Check for hardcoded credentials in security files
Write-Host 'Scanning for hardcoded credentials...' -ForegroundColor Yellow
$securityFiles = Get-ChildItem '/workspaces/AitherZero/aither-core/domains/security' -Recurse -Include '*.ps1', '*.psm1'
$vulnCount = 0
foreach ($file in $securityFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match 'password\s*=\s*"[^"]*"|secret\s*=\s*"[^"]*"|key\s*=\s*"[^"]*"') {
        Write-Host 'WARNING: Potential hardcoded credential in ' $file.Name -ForegroundColor Red
        $vulnCount++
    }
}
if ($vulnCount -eq 0) {
    Write-Host 'No hardcoded credentials found' -ForegroundColor Green
} else {
    Write-Host 'Found ' $vulnCount ' potential hardcoded credentials' -ForegroundColor Red
}

# Check for insecure random number generation
Write-Host 'Checking for insecure random number generation...' -ForegroundColor Yellow
$randomVuln = 0
foreach ($file in $securityFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match 'System\.Random|Get-Random') {
        Write-Host 'INFO: Random number usage in ' $file.Name -ForegroundColor DarkYellow
        $randomVuln++
    }
}
Write-Host 'Found ' $randomVuln ' files using random number generation' -ForegroundColor Cyan

# Check for proper input validation
Write-Host 'Checking input validation patterns...' -ForegroundColor Yellow
$validationCount = 0
foreach ($file in $securityFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match 'ValidateNotNullOrEmpty|ValidateSet|ValidateRange|ValidatePattern') {
        $validationCount++
    }
}
Write-Host 'Found ' $validationCount ' files with input validation' -ForegroundColor Green

# Check for try-catch blocks
Write-Host 'Checking error handling...' -ForegroundColor Yellow
$errorHandling = 0
foreach ($file in $securityFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match 'try\s*{.*}.*catch\s*{') {
        $errorHandling++
    }
}
Write-Host 'Found ' $errorHandling ' files with proper error handling' -ForegroundColor Green

# Check for SQL injection vulnerabilities
Write-Host 'Checking for SQL injection vulnerabilities...' -ForegroundColor Yellow
$sqlVuln = 0
foreach ($file in $securityFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match 'Invoke-Sqlcmd.*\$|Execute.*\$|Query.*\$') {
        Write-Host 'WARNING: Potential SQL injection in ' $file.Name -ForegroundColor Red
        $sqlVuln++
    }
}
if ($sqlVuln -eq 0) {
    Write-Host 'No SQL injection vulnerabilities found' -ForegroundColor Green
} else {
    Write-Host 'Found ' $sqlVuln ' potential SQL injection vulnerabilities' -ForegroundColor Red
}

# Check for path traversal vulnerabilities
Write-Host 'Checking for path traversal vulnerabilities...' -ForegroundColor Yellow
$pathVuln = 0
foreach ($file in $securityFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match 'Join-Path.*\$|Set-Location.*\$|\$.*\\\\\\.\\.\\\\') {
        Write-Host 'INFO: Path manipulation in ' $file.Name -ForegroundColor DarkYellow
        $pathVuln++
    }
}
Write-Host 'Found ' $pathVuln ' files with path manipulation' -ForegroundColor Cyan

# Check for proper encryption usage
Write-Host 'Checking encryption implementation...' -ForegroundColor Yellow
$encryptionCount = 0
foreach ($file in $securityFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match 'ConvertTo-SecureString|ConvertFrom-SecureString|System\.Security\.Cryptography') {
        $encryptionCount++
    }
}
Write-Host 'Found ' $encryptionCount ' files using encryption' -ForegroundColor Green

# Check for logging of sensitive data
Write-Host 'Checking for sensitive data logging...' -ForegroundColor Yellow
$logVuln = 0
foreach ($file in $securityFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match 'Write-.*Log.*password|Write-.*Log.*secret|Write-.*Log.*key') {
        Write-Host 'WARNING: Potential sensitive data logging in ' $file.Name -ForegroundColor Red
        $logVuln++
    }
}
if ($logVuln -eq 0) {
    Write-Host 'No sensitive data logging found' -ForegroundColor Green
} else {
    Write-Host 'Found ' $logVuln ' potential sensitive data logging issues' -ForegroundColor Red
}

Write-Host '=== VULNERABILITY SCAN COMPLETE ===' -ForegroundColor Red

# Generate vulnerability report
$vulnerabilityReport = @{
    ScanDate = Get-Date
    HardcodedCredentials = $vulnCount
    RandomNumberGeneration = $randomVuln
    InputValidation = $validationCount
    ErrorHandling = $errorHandling
    SQLInjection = $sqlVuln
    PathTraversal = $pathVuln
    EncryptionUsage = $encryptionCount
    SensitiveLogging = $logVuln
    TotalFiles = $securityFiles.Count
    OverallRisk = if ($vulnCount -gt 0 -or $sqlVuln -gt 0 -or $logVuln -gt 0) { "HIGH" } else { "LOW" }
}

$vulnerabilityReport | ConvertTo-Json -Depth 3 | Set-Content '/workspaces/AitherZero/security-vulnerability-report.json'
Write-Host 'Vulnerability report saved to: /workspaces/AitherZero/security-vulnerability-report.json' -ForegroundColor Cyan